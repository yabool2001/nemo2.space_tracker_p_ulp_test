
nemo2.space_tracker_p_ulp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028ec  080028ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028ec  080028ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028ec  080028ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002900  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002900  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000091c5  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f6  00000000  00000000  0002923c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000810  00000000  00000000  0002b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad04  00000000  00000000  0002bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000094e0  00000000  00000000  00046914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adcf5  00000000  00000000  0004fdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002678  00000000  00000000  000fdaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00100164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002894 	.word	0x08002894

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002894 	.word	0x08002894

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	0008      	movs	r0, r1
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	0019      	movs	r1, r3
 800022a:	230b      	movs	r3, #11
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	1c02      	adds	r2, r0, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	2308      	movs	r3, #8
 8000234:	18fb      	adds	r3, r7, r3
 8000236:	1c0a      	adds	r2, r1, #0
 8000238:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d102      	bne.n	8000246 <iis2dh_read_reg+0x2a>
 8000240:	2301      	movs	r3, #1
 8000242:	425b      	negs	r3, r3
 8000244:	e00f      	b.n	8000266 <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	685c      	ldr	r4, [r3, #4]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	68d8      	ldr	r0, [r3, #12]
 800024e:	2308      	movs	r3, #8
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	881d      	ldrh	r5, [r3, #0]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	230b      	movs	r3, #11
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	7819      	ldrb	r1, [r3, #0]
 800025c:	002b      	movs	r3, r5
 800025e:	47a0      	blx	r4
 8000260:	0003      	movs	r3, r0
 8000262:	617b      	str	r3, [r7, #20]

  return ret;
 8000264:	697b      	ldr	r3, [r7, #20]
}
 8000266:	0018      	movs	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	b006      	add	sp, #24
 800026c:	bdb0      	pop	{r4, r5, r7, pc}

0800026e <iis2dh_write_reg>:
  *
  */
int32_t __weak iis2dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800026e:	b5b0      	push	{r4, r5, r7, lr}
 8000270:	b086      	sub	sp, #24
 8000272:	af00      	add	r7, sp, #0
 8000274:	60f8      	str	r0, [r7, #12]
 8000276:	0008      	movs	r0, r1
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	0019      	movs	r1, r3
 800027c:	230b      	movs	r3, #11
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	1c02      	adds	r2, r0, #0
 8000282:	701a      	strb	r2, [r3, #0]
 8000284:	2308      	movs	r3, #8
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	1c0a      	adds	r2, r1, #0
 800028a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d102      	bne.n	8000298 <iis2dh_write_reg+0x2a>
 8000292:	2301      	movs	r3, #1
 8000294:	425b      	negs	r3, r3
 8000296:	e00f      	b.n	80002b8 <iis2dh_write_reg+0x4a>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681c      	ldr	r4, [r3, #0]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	68d8      	ldr	r0, [r3, #12]
 80002a0:	2308      	movs	r3, #8
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	881d      	ldrh	r5, [r3, #0]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	230b      	movs	r3, #11
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	7819      	ldrb	r1, [r3, #0]
 80002ae:	002b      	movs	r3, r5
 80002b0:	47a0      	blx	r4
 80002b2:	0003      	movs	r3, r0
 80002b4:	617b      	str	r3, [r7, #20]

  return ret;
 80002b6:	697b      	ldr	r3, [r7, #20]
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b006      	add	sp, #24
 80002be:	bdb0      	pop	{r4, r5, r7, pc}

080002c0 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	000a      	movs	r2, r1
 80002ca:	1cfb      	adds	r3, r7, #3
 80002cc:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80002ce:	2310      	movs	r3, #16
 80002d0:	18fa      	adds	r2, r7, r3
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	2301      	movs	r3, #1
 80002d6:	2120      	movs	r1, #32
 80002d8:	f7ff ffa0 	bl	800021c <iis2dh_read_reg>
 80002dc:	0003      	movs	r3, r0
 80002de:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d108      	bne.n	80002f8 <iis2dh_operating_mode_set+0x38>
  {
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80002e6:	230c      	movs	r3, #12
 80002e8:	18fa      	adds	r2, r7, r3
 80002ea:	6878      	ldr	r0, [r7, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	2123      	movs	r1, #35	; 0x23
 80002f0:	f7ff ff94 	bl	800021c <iis2dh_read_reg>
 80002f4:	0003      	movs	r3, r0
 80002f6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d138      	bne.n	8000370 <iis2dh_operating_mode_set+0xb0>
  {
    if (val == IIS2DH_HR_12bit)
 80002fe:	1cfb      	adds	r3, r7, #3
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d10b      	bne.n	800031e <iis2dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8000306:	2310      	movs	r3, #16
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	781a      	ldrb	r2, [r3, #0]
 800030c:	2108      	movs	r1, #8
 800030e:	438a      	bics	r2, r1
 8000310:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8000312:	230c      	movs	r3, #12
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	781a      	ldrb	r2, [r3, #0]
 8000318:	2108      	movs	r1, #8
 800031a:	430a      	orrs	r2, r1
 800031c:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_NM_10bit)
 800031e:	1cfb      	adds	r3, r7, #3
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d10b      	bne.n	800033e <iis2dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8000326:	2310      	movs	r3, #16
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	781a      	ldrb	r2, [r3, #0]
 800032c:	2108      	movs	r1, #8
 800032e:	438a      	bics	r2, r1
 8000330:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8000332:	230c      	movs	r3, #12
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	2108      	movs	r1, #8
 800033a:	438a      	bics	r2, r1
 800033c:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_LP_8bit)
 800033e:	1cfb      	adds	r3, r7, #3
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d10b      	bne.n	800035e <iis2dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8000346:	2310      	movs	r3, #16
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	2108      	movs	r1, #8
 800034e:	430a      	orrs	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8000352:	230c      	movs	r3, #12
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	2108      	movs	r1, #8
 800035a:	438a      	bics	r2, r1
 800035c:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800035e:	2310      	movs	r3, #16
 8000360:	18fa      	adds	r2, r7, r3
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	2301      	movs	r3, #1
 8000366:	2120      	movs	r1, #32
 8000368:	f7ff ff81 	bl	800026e <iis2dh_write_reg>
 800036c:	0003      	movs	r3, r0
 800036e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d108      	bne.n	8000388 <iis2dh_operating_mode_set+0xc8>
  {
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8000376:	230c      	movs	r3, #12
 8000378:	18fa      	adds	r2, r7, r3
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	2301      	movs	r3, #1
 800037e:	2123      	movs	r1, #35	; 0x23
 8000380:	f7ff ff75 	bl	800026e <iis2dh_write_reg>
 8000384:	0003      	movs	r3, r0
 8000386:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000388:	697b      	ldr	r3, [r7, #20]
}
 800038a:	0018      	movs	r0, r3
 800038c:	46bd      	mov	sp, r7
 800038e:	b006      	add	sp, #24
 8000390:	bd80      	pop	{r7, pc}

08000392 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(const stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 8000392:	b590      	push	{r4, r7, lr}
 8000394:	b085      	sub	sp, #20
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	000a      	movs	r2, r1
 800039c:	1cfb      	adds	r3, r7, #3
 800039e:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80003a0:	2408      	movs	r4, #8
 80003a2:	193a      	adds	r2, r7, r4
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	2301      	movs	r3, #1
 80003a8:	2120      	movs	r1, #32
 80003aa:	f7ff ff37 	bl	800021c <iis2dh_read_reg>
 80003ae:	0003      	movs	r3, r0
 80003b0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d115      	bne.n	80003e4 <iis2dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80003b8:	1cfb      	adds	r3, r7, #3
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	220f      	movs	r2, #15
 80003be:	4013      	ands	r3, r2
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	0110      	lsls	r0, r2, #4
 80003c6:	781a      	ldrb	r2, [r3, #0]
 80003c8:	210f      	movs	r1, #15
 80003ca:	400a      	ands	r2, r1
 80003cc:	1c11      	adds	r1, r2, #0
 80003ce:	1c02      	adds	r2, r0, #0
 80003d0:	430a      	orrs	r2, r1
 80003d2:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80003d4:	193a      	adds	r2, r7, r4
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	2301      	movs	r3, #1
 80003da:	2120      	movs	r1, #32
 80003dc:	f7ff ff47 	bl	800026e <iis2dh_write_reg>
 80003e0:	0003      	movs	r3, r0
 80003e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80003e4:	68fb      	ldr	r3, [r7, #12]
}
 80003e6:	0018      	movs	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b005      	add	sp, #20
 80003ec:	bd90      	pop	{r4, r7, pc}

080003ee <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(const stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 80003ee:	b590      	push	{r4, r7, lr}
 80003f0:	b085      	sub	sp, #20
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
 80003f6:	000a      	movs	r2, r1
 80003f8:	1cfb      	adds	r3, r7, #3
 80003fa:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80003fc:	2408      	movs	r4, #8
 80003fe:	193a      	adds	r2, r7, r4
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	2301      	movs	r3, #1
 8000404:	2123      	movs	r1, #35	; 0x23
 8000406:	f7ff ff09 	bl	800021c <iis2dh_read_reg>
 800040a:	0003      	movs	r3, r0
 800040c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d117      	bne.n	8000444 <iis2dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8000414:	1cfb      	adds	r3, r7, #3
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2203      	movs	r2, #3
 800041a:	4013      	ands	r3, r2
 800041c:	b2da      	uxtb	r2, r3
 800041e:	193b      	adds	r3, r7, r4
 8000420:	2103      	movs	r1, #3
 8000422:	400a      	ands	r2, r1
 8000424:	0110      	lsls	r0, r2, #4
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	2130      	movs	r1, #48	; 0x30
 800042a:	438a      	bics	r2, r1
 800042c:	1c11      	adds	r1, r2, #0
 800042e:	1c02      	adds	r2, r0, #0
 8000430:	430a      	orrs	r2, r1
 8000432:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8000434:	193a      	adds	r2, r7, r4
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	2301      	movs	r3, #1
 800043a:	2123      	movs	r1, #35	; 0x23
 800043c:	f7ff ff17 	bl	800026e <iis2dh_write_reg>
 8000440:	0003      	movs	r3, r0
 8000442:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000444:	68fb      	ldr	r3, [r7, #12]
}
 8000446:	0018      	movs	r0, r3
 8000448:	46bd      	mov	sp, r7
 800044a:	b005      	add	sp, #20
 800044c:	bd90      	pop	{r4, r7, pc}

0800044e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000452:	f000 fa91 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000456:	f000 f810 	bl	800047a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045a:	f000 f895 	bl	8000588 <MX_GPIO_Init>
  MX_SPI1_Init();
 800045e:	f000 f855 	bl	800050c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  sys_init () ;
 8000462:	f000 f9c3 	bl	80007ec <sys_init>
  HAL_Delay ( 4000 ) ;
 8000466:	23fa      	movs	r3, #250	; 0xfa
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fb0a 	bl	8000a84 <HAL_Delay>
  astro_reset () ;
 8000470:	f000 f900 	bl	8000674 <astro_reset>
  HAL_PWREx_EnterSHUTDOWNMode () ;
 8000474:	f000 fdbe 	bl	8000ff4 <HAL_PWREx_EnterSHUTDOWNMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000478:	e7fe      	b.n	8000478 <main+0x2a>

0800047a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047a:	b590      	push	{r4, r7, lr}
 800047c:	b095      	sub	sp, #84	; 0x54
 800047e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000480:	2414      	movs	r4, #20
 8000482:	193b      	adds	r3, r7, r4
 8000484:	0018      	movs	r0, r3
 8000486:	233c      	movs	r3, #60	; 0x3c
 8000488:	001a      	movs	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	f002 f9d6 	bl	800283c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	0018      	movs	r0, r3
 8000494:	2310      	movs	r3, #16
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f002 f9cf 	bl	800283c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 fd66 	bl	8000f74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2202      	movs	r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2280      	movs	r2, #128	; 0x80
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2240      	movs	r2, #64	; 0x40
 80004c0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fdac 	bl	8001028 <HAL_RCC_OscConfig>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004d4:	f000 f993 	bl	80007fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2207      	movs	r2, #7
 80004dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2100      	movs	r1, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 f8f7 	bl	80016e8 <HAL_RCC_ClockConfig>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004fe:	f000 f97e 	bl	80007fe <Error_Handler>
  }
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b015      	add	sp, #84	; 0x54
 8000508:	bd90      	pop	{r4, r7, pc}
	...

0800050c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_SPI1_Init+0x74>)
 8000512:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <MX_SPI1_Init+0x78>)
 8000514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_SPI1_Init+0x74>)
 8000518:	2282      	movs	r2, #130	; 0x82
 800051a:	0052      	lsls	r2, r2, #1
 800051c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_SPI1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_SPI1_Init+0x74>)
 8000526:	22e0      	movs	r2, #224	; 0xe0
 8000528:	00d2      	lsls	r2, r2, #3
 800052a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_SPI1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_SPI1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_SPI1_Init+0x74>)
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	0092      	lsls	r2, r2, #2
 800053e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_SPI1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_SPI1_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_SPI1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <MX_SPI1_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_SPI1_Init+0x74>)
 800055a:	2207      	movs	r2, #7
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_SPI1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_SPI1_Init+0x74>)
 8000566:	2208      	movs	r2, #8
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <MX_SPI1_Init+0x74>)
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fa45 	bl	80019fc <HAL_SPI_Init>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000576:	f000 f942 	bl	80007fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000028 	.word	0x20000028
 8000584:	40013000 	.word	0x40013000

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b089      	sub	sp, #36	; 0x24
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	240c      	movs	r4, #12
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2314      	movs	r3, #20
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f002 f94f 	bl	800283c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_GPIO_Init+0xdc>)
 80005a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a2:	4b30      	ldr	r3, [pc, #192]	; (8000664 <MX_GPIO_Init+0xdc>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	430a      	orrs	r2, r1
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_GPIO_Init+0xdc>)
 80005ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <MX_GPIO_Init+0xdc>)
 80005b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_GPIO_Init+0xdc>)
 80005bc:	2102      	movs	r1, #2
 80005be:	430a      	orrs	r2, r1
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <MX_GPIO_Init+0xdc>)
 80005c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c6:	2202      	movs	r2, #2
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 80005ce:	23a0      	movs	r3, #160	; 0xa0
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	2200      	movs	r2, #0
 80005d4:	2110      	movs	r1, #16
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fcae 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 80005dc:	4922      	ldr	r1, [pc, #136]	; (8000668 <MX_GPIO_Init+0xe0>)
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_GPIO_Init+0xe4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fca8 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2210      	movs	r2, #16
 80005ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2201      	movs	r2, #1
 80005f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 8000600:	193a      	adds	r2, r7, r4
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fb29 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_RST_Pin|GNSS_PWR_SW_Pin;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <MX_GPIO_Init+0xe8>)
 8000612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2201      	movs	r2, #1
 8000618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000626:	193b      	adds	r3, r7, r4
 8000628:	4a10      	ldr	r2, [pc, #64]	; (800066c <MX_GPIO_Init+0xe4>)
 800062a:	0019      	movs	r1, r3
 800062c:	0010      	movs	r0, r2
 800062e:	f000 fb17 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8000632:	0021      	movs	r1, r4
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	0192      	lsls	r2, r2, #6
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2211      	movs	r2, #17
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 800064e:	187b      	adds	r3, r7, r1
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <MX_GPIO_Init+0xe4>)
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 fb03 	bl	8000c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b009      	add	sp, #36	; 0x24
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000
 8000668:	0000a002 	.word	0x0000a002
 800066c:	50000400 	.word	0x50000400
 8000670:	00008002 	.word	0x00008002

08000674 <astro_reset>:

/* USER CODE BEGIN 4 */
void astro_reset ( void )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin, GPIO_PIN_SET ) ;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <astro_reset+0x28>)
 800067a:	2201      	movs	r2, #1
 800067c:	2102      	movs	r1, #2
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fc5a 	bl	8000f38 <HAL_GPIO_WritePin>
	HAL_Delay ( 100 ) ;
 8000684:	2064      	movs	r0, #100	; 0x64
 8000686:	f000 f9fd 	bl	8000a84 <HAL_Delay>
	HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin, GPIO_PIN_RESET ) ;
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <astro_reset+0x28>)
 800068c:	2200      	movs	r2, #0
 800068e:	2102      	movs	r1, #2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fc51 	bl	8000f38 <HAL_GPIO_WritePin>
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	50000400 	.word	0x50000400

080006a0 <acc_init>:
void acc_init ( void )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	my_acc_ctx.write_reg = my_lis2dw12_platform_write ;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <acc_init+0x3c>)
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <acc_init+0x40>)
 80006a8:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_lis2dw12_platform_read ;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <acc_init+0x3c>)
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <acc_init+0x44>)
 80006ae:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <acc_init+0x3c>)
 80006b2:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <acc_init+0x48>)
 80006b4:	60da      	str	r2, [r3, #12]
	iis2dh_full_scale_set ( &my_acc_ctx , IIS2DH_2g ) ;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <acc_init+0x3c>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fe97 	bl	80003ee <iis2dh_full_scale_set>
	iis2dh_operating_mode_set ( &my_acc_ctx , IIS2DH_LP_8bit ) ;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <acc_init+0x3c>)
 80006c2:	2102      	movs	r1, #2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fdfb 	bl	80002c0 <iis2dh_operating_mode_set>
	iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_ODR_10Hz ) ;
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <acc_init+0x3c>)
 80006cc:	2102      	movs	r1, #2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff fe5f 	bl	8000392 <iis2dh_data_rate_set>
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	080006ed 	.word	0x080006ed
 80006e4:	08000757 	.word	0x08000757
 80006e8:	20000028 	.word	0x20000028

080006ec <my_lis2dw12_platform_write>:
// ACC LL Function
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	0008      	movs	r0, r1
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	0019      	movs	r1, r3
 80006fa:	240b      	movs	r4, #11
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	1c02      	adds	r2, r0, #0
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	2508      	movs	r5, #8
 8000704:	197b      	adds	r3, r7, r5
 8000706:	1c0a      	adds	r2, r1, #0
 8000708:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_RESET ) ;
 800070a:	23a0      	movs	r3, #160	; 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fc10 	bl	8000f38 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000718:	2014      	movs	r0, #20
 800071a:	f000 f9b3 	bl	8000a84 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 800071e:	23fa      	movs	r3, #250	; 0xfa
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	1939      	adds	r1, r7, r4
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	2201      	movs	r2, #1
 8000728:	f001 fa20 	bl	8001b6c <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 800072c:	23fa      	movs	r3, #250	; 0xfa
 800072e:	009c      	lsls	r4, r3, #2
 8000730:	197b      	adds	r3, r7, r5
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	6879      	ldr	r1, [r7, #4]
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	0023      	movs	r3, r4
 800073a:	f001 fa17 	bl	8001b6c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_SET) ;
 800073e:	23a0      	movs	r3, #160	; 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2201      	movs	r2, #1
 8000744:	2110      	movs	r1, #16
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fbf6 	bl	8000f38 <HAL_GPIO_WritePin>

	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bdb0      	pop	{r4, r5, r7, pc}

08000756 <my_lis2dw12_platform_read>:

int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8000756:	b5b0      	push	{r4, r5, r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	0008      	movs	r0, r1
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	0019      	movs	r1, r3
 8000764:	240b      	movs	r4, #11
 8000766:	193b      	adds	r3, r7, r4
 8000768:	1c02      	adds	r2, r0, #0
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	2508      	movs	r5, #8
 800076e:	197b      	adds	r3, r7, r5
 8000770:	1c0a      	adds	r2, r1, #0
 8000772:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4252      	negs	r2, r2
 800077c:	4313      	orrs	r3, r2
 800077e:	b2da      	uxtb	r2, r3
 8000780:	193b      	adds	r3, r7, r4
 8000782:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_RESET) ;
 8000784:	23a0      	movs	r3, #160	; 0xa0
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	0018      	movs	r0, r3
 800078e:	f000 fbd3 	bl	8000f38 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000792:	2014      	movs	r0, #20
 8000794:	f000 f976 	bl	8000a84 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8000798:	23fa      	movs	r3, #250	; 0xfa
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	1939      	adds	r1, r7, r4
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	2201      	movs	r2, #1
 80007a2:	f001 f9e3 	bl	8001b6c <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 80007a6:	23fa      	movs	r3, #250	; 0xfa
 80007a8:	009c      	lsls	r4, r3, #2
 80007aa:	197b      	adds	r3, r7, r5
 80007ac:	881a      	ldrh	r2, [r3, #0]
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	0023      	movs	r3, r4
 80007b4:	f001 fb3a 	bl	8001e2c <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_SET) ;
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fbb9 	bl	8000f38 <HAL_GPIO_WritePin>

	return 0;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b004      	add	sp, #16
 80007ce:	bdb0      	pop	{r4, r5, r7, pc}

080007d0 <gnss_init>:
void gnss_init ( void )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GNSS_RST_GPIO_Port , GNSS_RST_Pin, GPIO_PIN_SET ) ;
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	019b      	lsls	r3, r3, #6
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <gnss_init+0x18>)
 80007da:	2201      	movs	r2, #1
 80007dc:	0019      	movs	r1, r3
 80007de:	f000 fbab 	bl	8000f38 <HAL_GPIO_WritePin>
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	50000400 	.word	0x50000400

080007ec <sys_init>:
void sys_init ( void )
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	acc_init () ;
 80007f0:	f7ff ff56 	bl	80006a0 <acc_init>
	gnss_init () ;
 80007f4:	f7ff ffec 	bl	80007d0 <gnss_init>
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000802:	b672      	cpsid	i
}
 8000804:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000806:	e7fe      	b.n	8000806 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_MspInit+0x4c>)
 8000810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_MspInit+0x4c>)
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	641a      	str	r2, [r3, #64]	; 0x40
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_MspInit+0x4c>)
 8000828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_MspInit+0x4c>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0549      	lsls	r1, r1, #21
 8000830:	430a      	orrs	r2, r1
 8000832:	63da      	str	r2, [r3, #60]	; 0x3c
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <HAL_MspInit+0x4c>)
 8000836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	055b      	lsls	r3, r3, #21
 800083c:	4013      	ands	r3, r2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000842:	23c0      	movs	r3, #192	; 0xc0
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	0018      	movs	r0, r3
 8000848:	f000 f940 	bl	8000acc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b08b      	sub	sp, #44	; 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	2414      	movs	r4, #20
 8000862:	193b      	adds	r3, r7, r4
 8000864:	0018      	movs	r0, r3
 8000866:	2314      	movs	r3, #20
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f001 ffe6 	bl	800283c <memset>
  if(hspi->Instance==SPI1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <HAL_SPI_MspInit+0x8c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d130      	bne.n	80008dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_SPI_MspInit+0x90>)
 800087c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <HAL_SPI_MspInit+0x90>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0149      	lsls	r1, r1, #5
 8000884:	430a      	orrs	r2, r1
 8000886:	641a      	str	r2, [r3, #64]	; 0x40
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_SPI_MspInit+0x90>)
 800088a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	015b      	lsls	r3, r3, #5
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_SPI_MspInit+0x90>)
 8000898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_SPI_MspInit+0x90>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_SPI_MspInit+0x90>)
 80008a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SCK_Pin|ACC_MISO_Pin|ACC_MOSI_Pin;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	22e0      	movs	r2, #224	; 0xe0
 80008b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2202      	movs	r2, #2
 80008ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 f9c2 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b00b      	add	sp, #44	; 0x2c
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40013000 	.word	0x40013000
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f89c 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f7ff fff7 	bl	800091a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000952:	f001 ff7b 	bl	800284c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000956:	f7ff fd7a 	bl	800044e <main>

0800095a <LoopForever>:

LoopForever:
  b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000968:	080028f4 	.word	0x080028f4
  ldr r2, =_sbss
 800096c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000970:	200000a0 	.word	0x200000a0

08000974 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_COMP_IRQHandler>
	...

08000978 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_Init+0x3c>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_Init+0x3c>)
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	0049      	lsls	r1, r1, #1
 800098e:	430a      	orrs	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000992:	2003      	movs	r0, #3
 8000994:	f000 f810 	bl	80009b8 <HAL_InitTick>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d003      	beq.n	80009a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e001      	b.n	80009a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff ff30 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40022000 	.word	0x40022000

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_InitTick+0x88>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d02b      	beq.n	8000a28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_InitTick+0x8c>)
 80009d2:	681c      	ldr	r4, [r3, #0]
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_InitTick+0x88>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	0019      	movs	r1, r3
 80009da:	23fa      	movs	r3, #250	; 0xfa
 80009dc:	0098      	lsls	r0, r3, #2
 80009de:	f7ff fb91 	bl	8000104 <__udivsi3>
 80009e2:	0003      	movs	r3, r0
 80009e4:	0019      	movs	r1, r3
 80009e6:	0020      	movs	r0, r4
 80009e8:	f7ff fb8c 	bl	8000104 <__udivsi3>
 80009ec:	0003      	movs	r3, r0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 f929 	bl	8000c46 <HAL_SYSTICK_Config>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d112      	bne.n	8000a1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d80a      	bhi.n	8000a14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2301      	movs	r3, #1
 8000a02:	425b      	negs	r3, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f908 	bl	8000c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_InitTick+0x90>)
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	e00d      	b.n	8000a30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a14:	230f      	movs	r3, #15
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	e008      	b.n	8000a30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a1e:	230f      	movs	r3, #15
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e003      	b.n	8000a30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a28:	230f      	movs	r3, #15
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a30:	230f      	movs	r3, #15
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	781b      	ldrb	r3, [r3, #0]
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b005      	add	sp, #20
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x1c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	001a      	movs	r2, r3
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x20>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	18d2      	adds	r2, r2, r3
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_IncTick+0x20>)
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	2000009c 	.word	0x2000009c

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <HAL_GetTick+0x10>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	2000009c 	.word	0x2000009c

08000a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a8c:	f7ff fff0 	bl	8000a70 <HAL_GetTick>
 8000a90:	0003      	movs	r3, r0
 8000a92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	d005      	beq.n	8000aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_Delay+0x44>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	189b      	adds	r3, r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	f7ff ffe0 	bl	8000a70 <HAL_GetTick>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d8f7      	bhi.n	8000aac <HAL_Delay+0x28>
  {
  }
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000008 	.word	0x20000008

08000acc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	0019      	movs	r1, r3
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40010000 	.word	0x40010000
 8000af4:	fffff9ff 	.word	0xfffff9ff

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	0002      	movs	r2, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b0c:	d828      	bhi.n	8000b60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0e:	4a2f      	ldr	r2, [pc, #188]	; (8000bcc <__NVIC_SetPriority+0xd4>)
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	33c0      	adds	r3, #192	; 0xc0
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	589b      	ldr	r3, [r3, r2]
 8000b1e:	1dfa      	adds	r2, r7, #7
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	0011      	movs	r1, r2
 8000b24:	2203      	movs	r2, #3
 8000b26:	400a      	ands	r2, r1
 8000b28:	00d2      	lsls	r2, r2, #3
 8000b2a:	21ff      	movs	r1, #255	; 0xff
 8000b2c:	4091      	lsls	r1, r2
 8000b2e:	000a      	movs	r2, r1
 8000b30:	43d2      	mvns	r2, r2
 8000b32:	401a      	ands	r2, r3
 8000b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	019b      	lsls	r3, r3, #6
 8000b3a:	22ff      	movs	r2, #255	; 0xff
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	2303      	movs	r3, #3
 8000b46:	4003      	ands	r3, r0
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	481f      	ldr	r0, [pc, #124]	; (8000bcc <__NVIC_SetPriority+0xd4>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	430a      	orrs	r2, r1
 8000b58:	33c0      	adds	r3, #192	; 0xc0
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b5e:	e031      	b.n	8000bc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <__NVIC_SetPriority+0xd8>)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	0019      	movs	r1, r3
 8000b68:	230f      	movs	r3, #15
 8000b6a:	400b      	ands	r3, r1
 8000b6c:	3b08      	subs	r3, #8
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	3306      	adds	r3, #6
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	18d3      	adds	r3, r2, r3
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1dfa      	adds	r2, r7, #7
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	0011      	movs	r1, r2
 8000b80:	2203      	movs	r2, #3
 8000b82:	400a      	ands	r2, r1
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	21ff      	movs	r1, #255	; 0xff
 8000b88:	4091      	lsls	r1, r2
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	43d2      	mvns	r2, r2
 8000b8e:	401a      	ands	r2, r3
 8000b90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	019b      	lsls	r3, r3, #6
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	401a      	ands	r2, r3
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	4003      	ands	r3, r0
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <__NVIC_SetPriority+0xd8>)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	001c      	movs	r4, r3
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	4023      	ands	r3, r4
 8000bb4:	3b08      	subs	r3, #8
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	3306      	adds	r3, #6
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	18c3      	adds	r3, r0, r3
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	601a      	str	r2, [r3, #0]
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b003      	add	sp, #12
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	045b      	lsls	r3, r3, #17
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d301      	bcc.n	8000bec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be8:	2301      	movs	r3, #1
 8000bea:	e010      	b.n	8000c0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <SysTick_Config+0x44>)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff ff7c 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x44>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x44>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	0018      	movs	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	210f      	movs	r1, #15
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	1c02      	adds	r2, r0, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ffbf 	bl	8000bd4 <SysTick_Config>
 8000c56:	0003      	movs	r3, r0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e14d      	b.n	8000f0c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d100      	bne.n	8000c88 <HAL_GPIO_Init+0x28>
 8000c86:	e13e      	b.n	8000f06 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d005      	beq.n	8000ca0 <HAL_GPIO_Init+0x40>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2203      	movs	r2, #3
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	2201      	movs	r2, #1
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2203      	movs	r2, #3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d017      	beq.n	8000d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d123      	bne.n	8000d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	58d3      	ldr	r3, [r2, r3]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	43da      	mvns	r2, r3
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2107      	movs	r1, #7
 8000d76:	400b      	ands	r3, r1
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	6939      	ldr	r1, [r7, #16]
 8000d90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2203      	movs	r2, #3
 8000db0:	401a      	ands	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	23c0      	movs	r3, #192	; 0xc0
 8000dcc:	029b      	lsls	r3, r3, #10
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d100      	bne.n	8000dd4 <HAL_GPIO_Init+0x174>
 8000dd2:	e098      	b.n	8000f06 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dd4:	4a53      	ldr	r2, [pc, #332]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3318      	adds	r3, #24
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	589b      	ldr	r3, [r3, r2]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2203      	movs	r2, #3
 8000de6:	4013      	ands	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	220f      	movs	r2, #15
 8000dec:	409a      	lsls	r2, r3
 8000dee:	0013      	movs	r3, r2
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x1d6>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a48      	ldr	r2, [pc, #288]	; (8000f28 <HAL_GPIO_Init+0x2c8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x1d2>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a47      	ldr	r2, [pc, #284]	; (8000f2c <HAL_GPIO_Init+0x2cc>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x1ce>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a46      	ldr	r2, [pc, #280]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x1ca>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a45      	ldr	r2, [pc, #276]	; (8000f34 <HAL_GPIO_Init+0x2d4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x1c6>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x1d8>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x1d8>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x1d8>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x1d8>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x1d8>
 8000e36:	2300      	movs	r3, #0
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	00d2      	lsls	r2, r2, #3
 8000e40:	4093      	lsls	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e48:	4936      	ldr	r1, [pc, #216]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3318      	adds	r3, #24
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e56:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	035b      	lsls	r3, r3, #13
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43da      	mvns	r2, r3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	039b      	lsls	r3, r3, #14
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000eac:	2384      	movs	r3, #132	; 0x84
 8000eae:	58d3      	ldr	r3, [r2, r3]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43da      	mvns	r2, r3
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	029b      	lsls	r3, r3, #10
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ed0:	4914      	ldr	r1, [pc, #80]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000ed2:	2284      	movs	r2, #132	; 0x84
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	58d3      	ldr	r3, [r2, r3]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	025b      	lsls	r3, r3, #9
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000efe:	4909      	ldr	r1, [pc, #36]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	40da      	lsrs	r2, r3
 8000f14:	1e13      	subs	r3, r2, #0
 8000f16:	d000      	beq.n	8000f1a <HAL_GPIO_Init+0x2ba>
 8000f18:	e6aa      	b.n	8000c70 <HAL_GPIO_Init+0x10>
  }
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b006      	add	sp, #24
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021800 	.word	0x40021800
 8000f28:	50000400 	.word	0x50000400
 8000f2c:	50000800 	.word	0x50000800
 8000f30:	50000c00 	.word	0x50000c00
 8000f34:	50001000 	.word	0x50001000

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	0008      	movs	r0, r1
 8000f42:	0011      	movs	r1, r2
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	1c02      	adds	r2, r0, #0
 8000f48:	801a      	strh	r2, [r3, #0]
 8000f4a:	1c7b      	adds	r3, r7, #1
 8000f4c:	1c0a      	adds	r2, r1, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f50:	1c7b      	adds	r3, r7, #1
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f58:	1cbb      	adds	r3, r7, #2
 8000f5a:	881a      	ldrh	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f60:	e003      	b.n	8000f6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f62:	1cbb      	adds	r3, r7, #2
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	0019      	movs	r1, r3
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d11f      	bne.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4912      	ldr	r1, [pc, #72]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff f8ac 	bl	8000104 <__udivsi3>
 8000fac:	0003      	movs	r3, r0
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fb2:	e008      	b.n	8000fc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	e001      	b.n	8000fc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e009      	b.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d0ed      	beq.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	fffff9ff 	.word	0xfffff9ff
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	000f4240 	.word	0x000f4240

08000ff4 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	4393      	bics	r3, r2
 8001000:	001a      	movs	r2, r3
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001004:	2104      	movs	r1, #4
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001010:	2104      	movs	r1, #4
 8001012:	430a      	orrs	r2, r1
 8001014:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8001016:	bf30      	wfi
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	40007000 	.word	0x40007000
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	f000 fb50 	bl	80016dc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_RCC_OscConfig+0x20>
 8001046:	e07c      	b.n	8001142 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001048:	4bc3      	ldr	r3, [pc, #780]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2238      	movs	r2, #56	; 0x38
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001052:	4bc1      	ldr	r3, [pc, #772]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2203      	movs	r2, #3
 8001058:	4013      	ands	r3, r2
 800105a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b10      	cmp	r3, #16
 8001060:	d102      	bne.n	8001068 <HAL_RCC_OscConfig+0x40>
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d002      	beq.n	800106e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2b08      	cmp	r3, #8
 800106c:	d10b      	bne.n	8001086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	4bba      	ldr	r3, [pc, #744]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	029b      	lsls	r3, r3, #10
 8001076:	4013      	ands	r3, r2
 8001078:	d062      	beq.n	8001140 <HAL_RCC_OscConfig+0x118>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d15e      	bne.n	8001140 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e32a      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	025b      	lsls	r3, r3, #9
 800108e:	429a      	cmp	r2, r3
 8001090:	d107      	bne.n	80010a2 <HAL_RCC_OscConfig+0x7a>
 8001092:	4bb1      	ldr	r3, [pc, #708]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4bb0      	ldr	r3, [pc, #704]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0249      	lsls	r1, r1, #9
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e020      	b.n	80010e4 <HAL_RCC_OscConfig+0xbc>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	23a0      	movs	r3, #160	; 0xa0
 80010a8:	02db      	lsls	r3, r3, #11
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d10e      	bne.n	80010cc <HAL_RCC_OscConfig+0xa4>
 80010ae:	4baa      	ldr	r3, [pc, #680]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4ba9      	ldr	r3, [pc, #676]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	02c9      	lsls	r1, r1, #11
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	4ba6      	ldr	r3, [pc, #664]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4ba5      	ldr	r3, [pc, #660]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	0249      	lsls	r1, r1, #9
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0xbc>
 80010cc:	4ba2      	ldr	r3, [pc, #648]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4ba1      	ldr	r3, [pc, #644]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80010d2:	49a2      	ldr	r1, [pc, #648]	; (800135c <HAL_RCC_OscConfig+0x334>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	4b9f      	ldr	r3, [pc, #636]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b9e      	ldr	r3, [pc, #632]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80010de:	49a0      	ldr	r1, [pc, #640]	; (8001360 <HAL_RCC_OscConfig+0x338>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d014      	beq.n	8001116 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fcc0 	bl	8000a70 <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f6:	f7ff fcbb 	bl	8000a70 <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b64      	cmp	r3, #100	; 0x64
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e2e9      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001108:	4b93      	ldr	r3, [pc, #588]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	4013      	ands	r3, r2
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0xce>
 8001114:	e015      	b.n	8001142 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001116:	f7ff fcab 	bl	8000a70 <HAL_GetTick>
 800111a:	0003      	movs	r3, r0
 800111c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fca6 	bl	8000a70 <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e2d4      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001132:	4b89      	ldr	r3, [pc, #548]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	029b      	lsls	r3, r3, #10
 800113a:	4013      	ands	r3, r2
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0xf8>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2202      	movs	r2, #2
 8001148:	4013      	ands	r3, r2
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x126>
 800114c:	e099      	b.n	8001282 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114e:	4b82      	ldr	r3, [pc, #520]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2238      	movs	r2, #56	; 0x38
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001158:	4b7f      	ldr	r3, [pc, #508]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b10      	cmp	r3, #16
 8001166:	d102      	bne.n	800116e <HAL_RCC_OscConfig+0x146>
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d002      	beq.n	8001174 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d135      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001174:	4b78      	ldr	r3, [pc, #480]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4013      	ands	r3, r2
 800117e:	d005      	beq.n	800118c <HAL_RCC_OscConfig+0x164>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e2a7      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b72      	ldr	r3, [pc, #456]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a74      	ldr	r2, [pc, #464]	; (8001364 <HAL_RCC_OscConfig+0x33c>)
 8001192:	4013      	ands	r3, r2
 8001194:	0019      	movs	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	021a      	lsls	r2, r3, #8
 800119c:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d112      	bne.n	80011ce <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011a8:	4b6b      	ldr	r3, [pc, #428]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a6e      	ldr	r2, [pc, #440]	; (8001368 <HAL_RCC_OscConfig+0x340>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	4b68      	ldr	r3, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011bc:	4b66      	ldr	r3, [pc, #408]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0adb      	lsrs	r3, r3, #11
 80011c2:	2207      	movs	r2, #7
 80011c4:	4013      	ands	r3, r2
 80011c6:	4a69      	ldr	r2, [pc, #420]	; (800136c <HAL_RCC_OscConfig+0x344>)
 80011c8:	40da      	lsrs	r2, r3
 80011ca:	4b69      	ldr	r3, [pc, #420]	; (8001370 <HAL_RCC_OscConfig+0x348>)
 80011cc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011ce:	4b69      	ldr	r3, [pc, #420]	; (8001374 <HAL_RCC_OscConfig+0x34c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fbf0 	bl	80009b8 <HAL_InitTick>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d051      	beq.n	8001280 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e27d      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d030      	beq.n	800124a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011e8:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a5e      	ldr	r2, [pc, #376]	; (8001368 <HAL_RCC_OscConfig+0x340>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691a      	ldr	r2, [r3, #16]
 80011f6:	4b58      	ldr	r3, [pc, #352]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011fc:	4b56      	ldr	r3, [pc, #344]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b55      	ldr	r3, [pc, #340]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	0049      	lsls	r1, r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fc31 	bl	8000a70 <HAL_GetTick>
 800120e:	0003      	movs	r3, r0
 8001210:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fc2c 	bl	8000a70 <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e25a      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001226:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4013      	ands	r3, r2
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b49      	ldr	r3, [pc, #292]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_RCC_OscConfig+0x33c>)
 8001238:	4013      	ands	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	021a      	lsls	r2, r3, #8
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	e01b      	b.n	8001282 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b42      	ldr	r3, [pc, #264]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001250:	4949      	ldr	r1, [pc, #292]	; (8001378 <HAL_RCC_OscConfig+0x350>)
 8001252:	400a      	ands	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fc0b 	bl	8000a70 <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc06 	bl	8000a70 <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e234      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4013      	ands	r3, r2
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x238>
 800127e:	e000      	b.n	8001282 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001280:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2208      	movs	r2, #8
 8001288:	4013      	ands	r3, r2
 800128a:	d047      	beq.n	800131c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2238      	movs	r2, #56	; 0x38
 8001292:	4013      	ands	r3, r2
 8001294:	2b18      	cmp	r3, #24
 8001296:	d10a      	bne.n	80012ae <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d03c      	beq.n	800131c <HAL_RCC_OscConfig+0x2f4>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d138      	bne.n	800131c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e216      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80012b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80012bc:	2101      	movs	r1, #1
 80012be:	430a      	orrs	r2, r1
 80012c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fbd5 	bl	8000a70 <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fbd0 	bl	8000a70 <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1fe      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	2202      	movs	r2, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f1      	beq.n	80012cc <HAL_RCC_OscConfig+0x2a4>
 80012e8:	e018      	b.n	800131c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80012ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	438a      	bics	r2, r1
 80012f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fbbb 	bl	8000a70 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fbb6 	bl	8000a70 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1e4      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	2202      	movs	r2, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d1f1      	bne.n	8001300 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2204      	movs	r2, #4
 8001322:	4013      	ands	r3, r2
 8001324:	d100      	bne.n	8001328 <HAL_RCC_OscConfig+0x300>
 8001326:	e0c7      	b.n	80014b8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001328:	231f      	movs	r3, #31
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2238      	movs	r2, #56	; 0x38
 8001336:	4013      	ands	r3, r2
 8001338:	2b20      	cmp	r3, #32
 800133a:	d11f      	bne.n	800137c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800133e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001340:	2202      	movs	r2, #2
 8001342:	4013      	ands	r3, r2
 8001344:	d100      	bne.n	8001348 <HAL_RCC_OscConfig+0x320>
 8001346:	e0b7      	b.n	80014b8 <HAL_RCC_OscConfig+0x490>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d000      	beq.n	8001352 <HAL_RCC_OscConfig+0x32a>
 8001350:	e0b2      	b.n	80014b8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1c2      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40021000 	.word	0x40021000
 800135c:	fffeffff 	.word	0xfffeffff
 8001360:	fffbffff 	.word	0xfffbffff
 8001364:	ffff80ff 	.word	0xffff80ff
 8001368:	ffffc7ff 	.word	0xffffc7ff
 800136c:	00f42400 	.word	0x00f42400
 8001370:	20000000 	.word	0x20000000
 8001374:	20000004 	.word	0x20000004
 8001378:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800137c:	4bb5      	ldr	r3, [pc, #724]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800137e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	055b      	lsls	r3, r3, #21
 8001384:	4013      	ands	r3, r2
 8001386:	d101      	bne.n	800138c <HAL_RCC_OscConfig+0x364>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x366>
 800138c:	2300      	movs	r3, #0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d011      	beq.n	80013b6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4bb0      	ldr	r3, [pc, #704]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001396:	4baf      	ldr	r3, [pc, #700]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	0549      	lsls	r1, r1, #21
 800139c:	430a      	orrs	r2, r1
 800139e:	63da      	str	r2, [r3, #60]	; 0x3c
 80013a0:	4bac      	ldr	r3, [pc, #688]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80013a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	055b      	lsls	r3, r3, #21
 80013a8:	4013      	ands	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013ae:	231f      	movs	r3, #31
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b6:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <HAL_RCC_OscConfig+0x630>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	d11a      	bne.n	80013f8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013c2:	4ba5      	ldr	r3, [pc, #660]	; (8001658 <HAL_RCC_OscConfig+0x630>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4ba4      	ldr	r3, [pc, #656]	; (8001658 <HAL_RCC_OscConfig+0x630>)
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	0049      	lsls	r1, r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fb4e 	bl	8000a70 <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fb49 	bl	8000a70 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e177      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ec:	4b9a      	ldr	r3, [pc, #616]	; (8001658 <HAL_RCC_OscConfig+0x630>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x3e6>
 8001400:	4b94      	ldr	r3, [pc, #592]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001404:	4b93      	ldr	r3, [pc, #588]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001406:	2101      	movs	r1, #1
 8001408:	430a      	orrs	r2, r1
 800140a:	65da      	str	r2, [r3, #92]	; 0x5c
 800140c:	e01c      	b.n	8001448 <HAL_RCC_OscConfig+0x420>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x408>
 8001416:	4b8f      	ldr	r3, [pc, #572]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001418:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800141a:	4b8e      	ldr	r3, [pc, #568]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800141c:	2104      	movs	r1, #4
 800141e:	430a      	orrs	r2, r1
 8001420:	65da      	str	r2, [r3, #92]	; 0x5c
 8001422:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001426:	4b8b      	ldr	r3, [pc, #556]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001428:	2101      	movs	r1, #1
 800142a:	430a      	orrs	r2, r1
 800142c:	65da      	str	r2, [r3, #92]	; 0x5c
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0x420>
 8001430:	4b88      	ldr	r3, [pc, #544]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001434:	4b87      	ldr	r3, [pc, #540]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001436:	2101      	movs	r1, #1
 8001438:	438a      	bics	r2, r1
 800143a:	65da      	str	r2, [r3, #92]	; 0x5c
 800143c:	4b85      	ldr	r3, [pc, #532]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800143e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001440:	4b84      	ldr	r3, [pc, #528]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001442:	2104      	movs	r1, #4
 8001444:	438a      	bics	r2, r1
 8001446:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d014      	beq.n	800147a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fb0e 	bl	8000a70 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001458:	e009      	b.n	800146e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fb09 	bl	8000a70 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	4a7d      	ldr	r2, [pc, #500]	; (800165c <HAL_RCC_OscConfig+0x634>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e136      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800146e:	4b79      	ldr	r3, [pc, #484]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	2202      	movs	r2, #2
 8001474:	4013      	ands	r3, r2
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x432>
 8001478:	e013      	b.n	80014a2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff faf9 	bl	8000a70 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001482:	e009      	b.n	8001498 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff faf4 	bl	8000a70 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	4a73      	ldr	r2, [pc, #460]	; (800165c <HAL_RCC_OscConfig+0x634>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e121      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001498:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2202      	movs	r2, #2
 800149e:	4013      	ands	r3, r2
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014a2:	231f      	movs	r3, #31
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014ac:	4b69      	ldr	r3, [pc, #420]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80014ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014b0:	4b68      	ldr	r3, [pc, #416]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80014b2:	496b      	ldr	r1, [pc, #428]	; (8001660 <HAL_RCC_OscConfig+0x638>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2220      	movs	r2, #32
 80014be:	4013      	ands	r3, r2
 80014c0:	d039      	beq.n	8001536 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d01b      	beq.n	8001502 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ca:	4b62      	ldr	r3, [pc, #392]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	03c9      	lsls	r1, r1, #15
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff faca 	bl	8000a70 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014e2:	f7ff fac5 	bl	8000a70 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0f3      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014f4:	4b57      	ldr	r3, [pc, #348]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	041b      	lsls	r3, r3, #16
 80014fc:	4013      	ands	r3, r2
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x4ba>
 8001500:	e019      	b.n	8001536 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001502:	4b54      	ldr	r3, [pc, #336]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001508:	4956      	ldr	r1, [pc, #344]	; (8001664 <HAL_RCC_OscConfig+0x63c>)
 800150a:	400a      	ands	r2, r1
 800150c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff faaf 	bl	8000a70 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001518:	f7ff faaa 	bl	8000a70 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0d8      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800152a:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	4013      	ands	r3, r2
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d100      	bne.n	8001540 <HAL_RCC_OscConfig+0x518>
 800153e:	e0cc      	b.n	80016da <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001540:	4b44      	ldr	r3, [pc, #272]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2238      	movs	r2, #56	; 0x38
 8001546:	4013      	ands	r3, r2
 8001548:	2b10      	cmp	r3, #16
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x526>
 800154c:	e07b      	b.n	8001646 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d156      	bne.n	8001604 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800155c:	4942      	ldr	r1, [pc, #264]	; (8001668 <HAL_RCC_OscConfig+0x640>)
 800155e:	400a      	ands	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fa85 	bl	8000a70 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff fa80 	bl	8000a70 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0ae      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	049b      	lsls	r3, r3, #18
 8001586:	4013      	ands	r3, r2
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4a37      	ldr	r2, [pc, #220]	; (800166c <HAL_RCC_OscConfig+0x644>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b6:	431a      	orrs	r2, r3
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0449      	lsls	r1, r1, #17
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	0549      	lsls	r1, r1, #21
 80015d6:	430a      	orrs	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fa49 	bl	8000a70 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fa44 	bl	8000a70 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e072      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	049b      	lsls	r3, r3, #18
 80015fe:	4013      	ands	r3, r2
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x5bc>
 8001602:	e06a      	b.n	80016da <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800160a:	4917      	ldr	r1, [pc, #92]	; (8001668 <HAL_RCC_OscConfig+0x640>)
 800160c:	400a      	ands	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fa2e 	bl	8000a70 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fa29 	bl	8000a70 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e057      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	049b      	lsls	r3, r3, #18
 8001634:	4013      	ands	r3, r2
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_OscConfig+0x62c>)
 800163e:	490c      	ldr	r1, [pc, #48]	; (8001670 <HAL_RCC_OscConfig+0x648>)
 8001640:	400a      	ands	r2, r1
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	e049      	b.n	80016da <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d112      	bne.n	8001674 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e044      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40021000 	.word	0x40021000
 8001658:	40007000 	.word	0x40007000
 800165c:	00001388 	.word	0x00001388
 8001660:	efffffff 	.word	0xefffffff
 8001664:	ffbfffff 	.word	0xffbfffff
 8001668:	feffffff 	.word	0xfeffffff
 800166c:	11c1808c 	.word	0x11c1808c
 8001670:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x6bc>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2203      	movs	r2, #3
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	429a      	cmp	r2, r3
 8001686:	d126      	bne.n	80016d6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2270      	movs	r2, #112	; 0x70
 800168c:	401a      	ands	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d11f      	bne.n	80016d6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	23fe      	movs	r3, #254	; 0xfe
 800169a:	01db      	lsls	r3, r3, #7
 800169c:	401a      	ands	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d116      	bne.n	80016d6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	23f8      	movs	r3, #248	; 0xf8
 80016ac:	039b      	lsls	r3, r3, #14
 80016ae:	401a      	ands	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d10e      	bne.n	80016d6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	23e0      	movs	r3, #224	; 0xe0
 80016bc:	051b      	lsls	r3, r3, #20
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	0f5b      	lsrs	r3, r3, #29
 80016cc:	075a      	lsls	r2, r3, #29
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b008      	add	sp, #32
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0e9      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2207      	movs	r2, #7
 8001702:	4013      	ands	r3, r2
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d91e      	bls.n	8001748 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b73      	ldr	r3, [pc, #460]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2207      	movs	r2, #7
 8001710:	4393      	bics	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	4b70      	ldr	r3, [pc, #448]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800171c:	f7ff f9a8 	bl	8000a70 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001724:	e009      	b.n	800173a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001726:	f7ff f9a3 	bl	8000a70 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	4a6a      	ldr	r2, [pc, #424]	; (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0ca      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2207      	movs	r2, #7
 8001740:	4013      	ands	r3, r2
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d1ee      	bne.n	8001726 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2202      	movs	r2, #2
 800174e:	4013      	ands	r3, r2
 8001750:	d015      	beq.n	800177e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2204      	movs	r2, #4
 8001758:	4013      	ands	r3, r2
 800175a:	d006      	beq.n	800176a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800175c:	4b60      	ldr	r3, [pc, #384]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001762:	21e0      	movs	r1, #224	; 0xe0
 8001764:	01c9      	lsls	r1, r1, #7
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176a:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	4a5d      	ldr	r2, [pc, #372]	; (80018e4 <HAL_RCC_ClockConfig+0x1fc>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2201      	movs	r2, #1
 8001784:	4013      	ands	r3, r2
 8001786:	d057      	beq.n	8001838 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	d12b      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e097      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a8:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	049b      	lsls	r3, r3, #18
 80017b0:	4013      	ands	r3, r2
 80017b2:	d11f      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e08b      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	d113      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e07f      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e074      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e06d      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f4:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2207      	movs	r2, #7
 80017fa:	4393      	bics	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001804:	430a      	orrs	r2, r1
 8001806:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001808:	f7ff f932 	bl	8000a70 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001810:	e009      	b.n	8001826 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001812:	f7ff f92d 	bl	8000a70 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	4a2f      	ldr	r2, [pc, #188]	; (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e054      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2238      	movs	r2, #56	; 0x38
 800182c:	401a      	ands	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	429a      	cmp	r2, r3
 8001836:	d1ec      	bne.n	8001812 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2207      	movs	r2, #7
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d21e      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2207      	movs	r2, #7
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001858:	f7ff f90a 	bl	8000a70 <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001860:	e009      	b.n	8001876 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001862:	f7ff f905 	bl	8000a70 <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e02c      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2207      	movs	r2, #7
 800187c:	4013      	ands	r3, r2
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d1ee      	bne.n	8001862 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2204      	movs	r2, #4
 800188a:	4013      	ands	r3, r2
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <HAL_RCC_ClockConfig+0x200>)
 8001894:	4013      	ands	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018a2:	f000 f829 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018a6:	0001      	movs	r1, r0
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	220f      	movs	r2, #15
 80018b0:	401a      	ands	r2, r3
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_RCC_ClockConfig+0x204>)
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	221f      	movs	r2, #31
 80018ba:	4013      	ands	r3, r2
 80018bc:	000a      	movs	r2, r1
 80018be:	40da      	lsrs	r2, r3
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x208>)
 80018c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_ClockConfig+0x20c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff f875 	bl	80009b8 <HAL_InitTick>
 80018ce:	0003      	movs	r3, r0
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b004      	add	sp, #16
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40022000 	.word	0x40022000
 80018dc:	00001388 	.word	0x00001388
 80018e0:	40021000 	.word	0x40021000
 80018e4:	fffff0ff 	.word	0xfffff0ff
 80018e8:	ffff8fff 	.word	0xffff8fff
 80018ec:	080028ac 	.word	0x080028ac
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fe:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2238      	movs	r2, #56	; 0x38
 8001904:	4013      	ands	r3, r2
 8001906:	d10f      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0adb      	lsrs	r3, r3, #11
 800190e:	2207      	movs	r2, #7
 8001910:	4013      	ands	r3, r2
 8001912:	2201      	movs	r2, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800191a:	6839      	ldr	r1, [r7, #0]
 800191c:	4835      	ldr	r0, [pc, #212]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800191e:	f7fe fbf1 	bl	8000104 <__udivsi3>
 8001922:	0003      	movs	r3, r0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	e05d      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2238      	movs	r2, #56	; 0x38
 800192e:	4013      	ands	r3, r2
 8001930:	2b08      	cmp	r3, #8
 8001932:	d102      	bne.n	800193a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e054      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2238      	movs	r2, #56	; 0x38
 8001940:	4013      	ands	r3, r2
 8001942:	2b10      	cmp	r3, #16
 8001944:	d138      	bne.n	80019b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2203      	movs	r2, #3
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	2207      	movs	r2, #7
 8001958:	4013      	ands	r3, r2
 800195a:	3301      	adds	r3, #1
 800195c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d10d      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	4824      	ldr	r0, [pc, #144]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001968:	f7fe fbcc 	bl	8000104 <__udivsi3>
 800196c:	0003      	movs	r3, r0
 800196e:	0019      	movs	r1, r3
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	227f      	movs	r2, #127	; 0x7f
 8001978:	4013      	ands	r3, r2
 800197a:	434b      	muls	r3, r1
 800197c:	617b      	str	r3, [r7, #20]
        break;
 800197e:	e00d      	b.n	800199c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	481c      	ldr	r0, [pc, #112]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001984:	f7fe fbbe 	bl	8000104 <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	0019      	movs	r1, r3
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	227f      	movs	r2, #127	; 0x7f
 8001994:	4013      	ands	r3, r2
 8001996:	434b      	muls	r3, r1
 8001998:	617b      	str	r3, [r7, #20]
        break;
 800199a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0f5b      	lsrs	r3, r3, #29
 80019a2:	2207      	movs	r2, #7
 80019a4:	4013      	ands	r3, r2
 80019a6:	3301      	adds	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	f7fe fba9 	bl	8000104 <__udivsi3>
 80019b2:	0003      	movs	r3, r0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	e015      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2238      	movs	r2, #56	; 0x38
 80019be:	4013      	ands	r3, r2
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d103      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2238      	movs	r2, #56	; 0x38
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b18      	cmp	r3, #24
 80019d6:	d103      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019d8:	23fa      	movs	r3, #250	; 0xfa
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e001      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019e4:	693b      	ldr	r3, [r7, #16]
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b006      	add	sp, #24
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40021000 	.word	0x40021000
 80019f4:	00f42400 	.word	0x00f42400
 80019f8:	007a1200 	.word	0x007a1200

080019fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0a8      	b.n	8001b60 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2382      	movs	r3, #130	; 0x82
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d009      	beq.n	8001a36 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	61da      	str	r2, [r3, #28]
 8001a28:	e005      	b.n	8001a36 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	225d      	movs	r2, #93	; 0x5d
 8001a40:	5c9b      	ldrb	r3, [r3, r2]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	225c      	movs	r2, #92	; 0x5c
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7fe ff00 	bl	8000858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	225d      	movs	r2, #93	; 0x5d
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2140      	movs	r1, #64	; 0x40
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	23e0      	movs	r3, #224	; 0xe0
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d902      	bls.n	8001a82 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e002      	b.n	8001a88 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	23f0      	movs	r3, #240	; 0xf0
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d008      	beq.n	8001aa6 <HAL_SPI_Init+0xaa>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	23e0      	movs	r3, #224	; 0xe0
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d002      	beq.n	8001aa6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	2382      	movs	r3, #130	; 0x82
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	401a      	ands	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	2384      	movs	r3, #132	; 0x84
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	400b      	ands	r3, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2101      	movs	r1, #1
 8001acc:	400b      	ands	r3, r1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6999      	ldr	r1, [r3, #24]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	400b      	ands	r3, r1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2138      	movs	r1, #56	; 0x38
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	400b      	ands	r3, r1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	0011      	movs	r1, r2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	401a      	ands	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	0c1b      	lsrs	r3, r3, #16
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	2110      	movs	r1, #16
 8001b14:	400b      	ands	r3, r1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	400b      	ands	r3, r1
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68d9      	ldr	r1, [r3, #12]
 8001b26:	23f0      	movs	r3, #240	; 0xf0
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	0011      	movs	r1, r2
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	015b      	lsls	r3, r3, #5
 8001b36:	401a      	ands	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4907      	ldr	r1, [pc, #28]	; (8001b68 <HAL_SPI_Init+0x16c>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	225d      	movs	r2, #93	; 0x5d
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b004      	add	sp, #16
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	fffff7ff 	.word	0xfffff7ff

08001b6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	1dbb      	adds	r3, r7, #6
 8001b7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b7c:	231f      	movs	r3, #31
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	225c      	movs	r2, #92	; 0x5c
 8001b88:	5c9b      	ldrb	r3, [r3, r2]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_SPI_Transmit+0x26>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e147      	b.n	8001e22 <HAL_SPI_Transmit+0x2b6>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	225c      	movs	r2, #92	; 0x5c
 8001b96:	2101      	movs	r1, #1
 8001b98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b9a:	f7fe ff69 	bl	8000a70 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001ba2:	2316      	movs	r3, #22
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	1dba      	adds	r2, r7, #6
 8001ba8:	8812      	ldrh	r2, [r2, #0]
 8001baa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	225d      	movs	r2, #93	; 0x5d
 8001bb0:	5c9b      	ldrb	r3, [r3, r2]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d004      	beq.n	8001bc2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001bb8:	231f      	movs	r3, #31
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bc0:	e128      	b.n	8001e14 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_SPI_Transmit+0x64>
 8001bc8:	1dbb      	adds	r3, r7, #6
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d104      	bne.n	8001bda <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001bd0:	231f      	movs	r3, #31
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bd8:	e11c      	b.n	8001e14 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	225d      	movs	r2, #93	; 0x5d
 8001bde:	2103      	movs	r1, #3
 8001be0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1dba      	adds	r2, r7, #6
 8001bf2:	8812      	ldrh	r2, [r2, #0]
 8001bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1dba      	adds	r2, r7, #6
 8001bfa:	8812      	ldrh	r2, [r2, #0]
 8001bfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2244      	movs	r2, #68	; 0x44
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2246      	movs	r2, #70	; 0x46
 8001c10:	2100      	movs	r1, #0
 8001c12:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d110      	bne.n	8001c4e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2140      	movs	r1, #64	; 0x40
 8001c38:	438a      	bics	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	01c9      	lsls	r1, r1, #7
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b40      	cmp	r3, #64	; 0x40
 8001c5a:	d007      	beq.n	8001c6c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	23e0      	movs	r3, #224	; 0xe0
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d952      	bls.n	8001d1e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_SPI_Transmit+0x11e>
 8001c80:	2316      	movs	r3, #22
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d143      	bne.n	8001d12 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	881a      	ldrh	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	1c9a      	adds	r2, r3, #2
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cae:	e030      	b.n	8001d12 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d112      	bne.n	8001ce4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	881a      	ldrh	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cce:	1c9a      	adds	r2, r3, #2
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ce2:	e016      	b.n	8001d12 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ce4:	f7fe fec4 	bl	8000a70 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d802      	bhi.n	8001cfa <HAL_SPI_Transmit+0x18e>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_SPI_Transmit+0x194>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d108      	bne.n	8001d12 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001d00:	231f      	movs	r3, #31
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2203      	movs	r2, #3
 8001d06:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	225d      	movs	r2, #93	; 0x5d
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	5499      	strb	r1, [r3, r2]
          goto error;
 8001d10:	e080      	b.n	8001e14 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1c9      	bne.n	8001cb0 <HAL_SPI_Transmit+0x144>
 8001d1c:	e053      	b.n	8001dc6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <HAL_SPI_Transmit+0x1c4>
 8001d26:	2316      	movs	r3, #22
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d145      	bne.n	8001dbc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001d56:	e031      	b.n	8001dbc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d113      	bne.n	8001d8e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	330c      	adds	r3, #12
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d8c:	e016      	b.n	8001dbc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d8e:	f7fe fe6f 	bl	8000a70 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d802      	bhi.n	8001da4 <HAL_SPI_Transmit+0x238>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_SPI_Transmit+0x23e>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d108      	bne.n	8001dbc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001daa:	231f      	movs	r3, #31
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2203      	movs	r2, #3
 8001db0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	225d      	movs	r2, #93	; 0x5d
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001dba:	e02b      	b.n	8001e14 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1c8      	bne.n	8001d58 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 fcef 	bl	80027b0 <SPI_EndRxTxTransaction>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001e02:	231f      	movs	r3, #31
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e003      	b.n	8001e14 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	225d      	movs	r2, #93	; 0x5d
 8001e10:	2101      	movs	r1, #1
 8001e12:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	225c      	movs	r2, #92	; 0x5c
 8001e18:	2100      	movs	r1, #0
 8001e1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e1c:	231f      	movs	r3, #31
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	781b      	ldrb	r3, [r3, #0]
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b008      	add	sp, #32
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	1dbb      	adds	r3, r7, #6
 8001e3a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e3c:	2117      	movs	r1, #23
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	225d      	movs	r2, #93	; 0x5d
 8001e48:	5c9b      	ldrb	r3, [r3, r2]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d003      	beq.n	8001e58 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e56:	e12b      	b.n	80020b0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	2382      	movs	r3, #130	; 0x82
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d113      	bne.n	8001e8c <HAL_SPI_Receive+0x60>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10f      	bne.n	8001e8c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	225d      	movs	r2, #93	; 0x5d
 8001e70:	2104      	movs	r1, #4
 8001e72:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e74:	1dbb      	adds	r3, r7, #6
 8001e76:	881c      	ldrh	r4, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	0023      	movs	r3, r4
 8001e84:	f000 f924 	bl	80020d0 <HAL_SPI_TransmitReceive>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	e118      	b.n	80020be <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	225c      	movs	r2, #92	; 0x5c
 8001e90:	5c9b      	ldrb	r3, [r3, r2]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_SPI_Receive+0x6e>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e111      	b.n	80020be <HAL_SPI_Receive+0x292>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	225c      	movs	r2, #92	; 0x5c
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ea2:	f7fe fde5 	bl	8000a70 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_SPI_Receive+0x8c>
 8001eb0:	1dbb      	adds	r3, r7, #6
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001eb8:	2317      	movs	r3, #23
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ec0:	e0f6      	b.n	80020b0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	225d      	movs	r2, #93	; 0x5d
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1dba      	adds	r2, r7, #6
 8001eda:	2144      	movs	r1, #68	; 0x44
 8001edc:	8812      	ldrh	r2, [r2, #0]
 8001ede:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1dba      	adds	r2, r7, #6
 8001ee4:	2146      	movs	r1, #70	; 0x46
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	23e0      	movs	r3, #224	; 0xe0
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d908      	bls.n	8001f26 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	496a      	ldr	r1, [pc, #424]	; (80020c8 <HAL_SPI_Receive+0x29c>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	e008      	b.n	8001f38 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	0149      	lsls	r1, r1, #5
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d10f      	bne.n	8001f64 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2140      	movs	r1, #64	; 0x40
 8001f50:	438a      	bics	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	495b      	ldr	r1, [pc, #364]	; (80020cc <HAL_SPI_Receive+0x2a0>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d007      	beq.n	8001f82 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	23e0      	movs	r3, #224	; 0xe0
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d900      	bls.n	8001f90 <HAL_SPI_Receive+0x164>
 8001f8e:	e071      	b.n	8002074 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f90:	e035      	b.n	8001ffe <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d117      	bne.n	8001fd0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	330c      	adds	r3, #12
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2246      	movs	r2, #70	; 0x46
 8001fc0:	5a9b      	ldrh	r3, [r3, r2]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2246      	movs	r2, #70	; 0x46
 8001fcc:	5299      	strh	r1, [r3, r2]
 8001fce:	e016      	b.n	8001ffe <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fd0:	f7fe fd4e 	bl	8000a70 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d802      	bhi.n	8001fe6 <HAL_SPI_Receive+0x1ba>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_SPI_Receive+0x1c0>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d108      	bne.n	8001ffe <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001fec:	2317      	movs	r3, #23
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	225d      	movs	r2, #93	; 0x5d
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	5499      	strb	r1, [r3, r2]
          goto error;
 8001ffc:	e058      	b.n	80020b0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2246      	movs	r2, #70	; 0x46
 8002002:	5a9b      	ldrh	r3, [r3, r2]
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1c3      	bne.n	8001f92 <HAL_SPI_Receive+0x166>
 800200a:	e039      	b.n	8002080 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	2b01      	cmp	r3, #1
 8002018:	d115      	bne.n	8002046 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	b292      	uxth	r2, r2
 8002026:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	1c9a      	adds	r2, r3, #2
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2246      	movs	r2, #70	; 0x46
 8002036:	5a9b      	ldrh	r3, [r3, r2]
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b299      	uxth	r1, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2246      	movs	r2, #70	; 0x46
 8002042:	5299      	strh	r1, [r3, r2]
 8002044:	e016      	b.n	8002074 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002046:	f7fe fd13 	bl	8000a70 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d802      	bhi.n	800205c <HAL_SPI_Receive+0x230>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	d102      	bne.n	8002062 <HAL_SPI_Receive+0x236>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002062:	2317      	movs	r3, #23
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2203      	movs	r2, #3
 8002068:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	225d      	movs	r2, #93	; 0x5d
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]
          goto error;
 8002072:	e01d      	b.n	80020b0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2246      	movs	r2, #70	; 0x46
 8002078:	5a9b      	ldrh	r3, [r3, r2]
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1c5      	bne.n	800200c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 fb34 	bl	80026f4 <SPI_EndRxTransaction>
 800208c:	1e03      	subs	r3, r0, #0
 800208e:	d002      	beq.n	8002096 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800209e:	2317      	movs	r3, #23
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e003      	b.n	80020b0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	225d      	movs	r2, #93	; 0x5d
 80020ac:	2101      	movs	r1, #1
 80020ae:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	225c      	movs	r2, #92	; 0x5c
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80020b8:	2317      	movs	r3, #23
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b007      	add	sp, #28
 80020c4:	bd90      	pop	{r4, r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	ffffefff 	.word	0xffffefff
 80020cc:	ffffbfff 	.word	0xffffbfff

080020d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	001a      	movs	r2, r3
 80020de:	1cbb      	adds	r3, r7, #2
 80020e0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020e2:	2301      	movs	r3, #1
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020e6:	2323      	movs	r3, #35	; 0x23
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	225c      	movs	r2, #92	; 0x5c
 80020f2:	5c9b      	ldrb	r3, [r3, r2]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_SPI_TransmitReceive+0x2c>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e1c4      	b.n	8002486 <HAL_SPI_TransmitReceive+0x3b6>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	225c      	movs	r2, #92	; 0x5c
 8002100:	2101      	movs	r1, #1
 8002102:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002104:	f7fe fcb4 	bl	8000a70 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800210c:	201b      	movs	r0, #27
 800210e:	183b      	adds	r3, r7, r0
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	215d      	movs	r1, #93	; 0x5d
 8002114:	5c52      	ldrb	r2, [r2, r1]
 8002116:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800211e:	2312      	movs	r3, #18
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	1cba      	adds	r2, r7, #2
 8002124:	8812      	ldrh	r2, [r2, #0]
 8002126:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002128:	183b      	adds	r3, r7, r0
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d011      	beq.n	8002154 <HAL_SPI_TransmitReceive+0x84>
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	2382      	movs	r3, #130	; 0x82
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	429a      	cmp	r2, r3
 8002138:	d107      	bne.n	800214a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <HAL_SPI_TransmitReceive+0x7a>
 8002142:	183b      	adds	r3, r7, r0
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d004      	beq.n	8002154 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800214a:	2323      	movs	r3, #35	; 0x23
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
    goto error;
 8002152:	e191      	b.n	8002478 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_SPI_TransmitReceive+0x98>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_SPI_TransmitReceive+0x98>
 8002160:	1cbb      	adds	r3, r7, #2
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002168:	2323      	movs	r3, #35	; 0x23
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002170:	e182      	b.n	8002478 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	225d      	movs	r2, #93	; 0x5d
 8002176:	5c9b      	ldrb	r3, [r3, r2]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b04      	cmp	r3, #4
 800217c:	d003      	beq.n	8002186 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	225d      	movs	r2, #93	; 0x5d
 8002182:	2105      	movs	r1, #5
 8002184:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1cba      	adds	r2, r7, #2
 8002196:	2146      	movs	r1, #70	; 0x46
 8002198:	8812      	ldrh	r2, [r2, #0]
 800219a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1cba      	adds	r2, r7, #2
 80021a0:	2144      	movs	r1, #68	; 0x44
 80021a2:	8812      	ldrh	r2, [r2, #0]
 80021a4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1cba      	adds	r2, r7, #2
 80021b0:	8812      	ldrh	r2, [r2, #0]
 80021b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1cba      	adds	r2, r7, #2
 80021b8:	8812      	ldrh	r2, [r2, #0]
 80021ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	23e0      	movs	r3, #224	; 0xe0
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d908      	bls.n	80021e6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	49ac      	ldr	r1, [pc, #688]	; (8002490 <HAL_SPI_TransmitReceive+0x3c0>)
 80021e0:	400a      	ands	r2, r1
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	e008      	b.n	80021f8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	0149      	lsls	r1, r1, #5
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	4013      	ands	r3, r2
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d007      	beq.n	8002216 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	23e0      	movs	r3, #224	; 0xe0
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	429a      	cmp	r2, r3
 8002220:	d800      	bhi.n	8002224 <HAL_SPI_TransmitReceive+0x154>
 8002222:	e083      	b.n	800232c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_SPI_TransmitReceive+0x168>
 800222c:	2312      	movs	r3, #18
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d000      	beq.n	8002238 <HAL_SPI_TransmitReceive+0x168>
 8002236:	e06d      	b.n	8002314 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	881a      	ldrh	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	1c9a      	adds	r2, r3, #2
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800225c:	e05a      	b.n	8002314 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	2b02      	cmp	r3, #2
 800226a:	d11b      	bne.n	80022a4 <HAL_SPI_TransmitReceive+0x1d4>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <HAL_SPI_TransmitReceive+0x1d4>
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	2b01      	cmp	r3, #1
 800227a:	d113      	bne.n	80022a4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	1c9a      	adds	r2, r3, #2
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d11c      	bne.n	80022ec <HAL_SPI_TransmitReceive+0x21c>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2246      	movs	r2, #70	; 0x46
 80022b6:	5a9b      	ldrh	r3, [r3, r2]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	b292      	uxth	r2, r2
 80022ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	1c9a      	adds	r2, r3, #2
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2246      	movs	r2, #70	; 0x46
 80022da:	5a9b      	ldrh	r3, [r3, r2]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b299      	uxth	r1, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2246      	movs	r2, #70	; 0x46
 80022e6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022e8:	2301      	movs	r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022ec:	f7fe fbc0 	bl	8000a70 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d80b      	bhi.n	8002314 <HAL_SPI_TransmitReceive+0x244>
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	3301      	adds	r3, #1
 8002300:	d008      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002302:	2323      	movs	r3, #35	; 0x23
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2203      	movs	r2, #3
 8002308:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	225d      	movs	r2, #93	; 0x5d
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]
        goto error;
 8002312:	e0b1      	b.n	8002478 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d19f      	bne.n	800225e <HAL_SPI_TransmitReceive+0x18e>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2246      	movs	r2, #70	; 0x46
 8002322:	5a9b      	ldrh	r3, [r3, r2]
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d199      	bne.n	800225e <HAL_SPI_TransmitReceive+0x18e>
 800232a:	e089      	b.n	8002440 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_SPI_TransmitReceive+0x270>
 8002334:	2312      	movs	r3, #18
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d000      	beq.n	8002340 <HAL_SPI_TransmitReceive+0x270>
 800233e:	e074      	b.n	800242a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	330c      	adds	r3, #12
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002366:	e060      	b.n	800242a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d11c      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x2e0>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d017      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x2e0>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	2b01      	cmp	r3, #1
 8002384:	d114      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	7812      	ldrb	r2, [r2, #0]
 8002392:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d11e      	bne.n	80023fc <HAL_SPI_TransmitReceive+0x32c>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2246      	movs	r2, #70	; 0x46
 80023c2:	5a9b      	ldrh	r3, [r3, r2]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d018      	beq.n	80023fc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	001a      	movs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	7812      	ldrb	r2, [r2, #0]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2246      	movs	r2, #70	; 0x46
 80023ea:	5a9b      	ldrh	r3, [r3, r2]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b299      	uxth	r1, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2246      	movs	r2, #70	; 0x46
 80023f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023fc:	f7fe fb38 	bl	8000a70 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002408:	429a      	cmp	r2, r3
 800240a:	d802      	bhi.n	8002412 <HAL_SPI_TransmitReceive+0x342>
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	3301      	adds	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_SPI_TransmitReceive+0x348>
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	2b00      	cmp	r3, #0
 8002416:	d108      	bne.n	800242a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002418:	2323      	movs	r3, #35	; 0x23
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2203      	movs	r2, #3
 800241e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	225d      	movs	r2, #93	; 0x5d
 8002424:	2101      	movs	r1, #1
 8002426:	5499      	strb	r1, [r3, r2]
        goto error;
 8002428:	e026      	b.n	8002478 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d199      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x298>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2246      	movs	r2, #70	; 0x46
 8002438:	5a9b      	ldrh	r3, [r3, r2]
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d193      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	0018      	movs	r0, r3
 8002448:	f000 f9b2 	bl	80027b0 <SPI_EndRxTxTransaction>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d006      	beq.n	800245e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002450:	2323      	movs	r3, #35	; 0x23
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002466:	2323      	movs	r3, #35	; 0x23
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e003      	b.n	8002478 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	225d      	movs	r2, #93	; 0x5d
 8002474:	2101      	movs	r1, #1
 8002476:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	225c      	movs	r2, #92	; 0x5c
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002480:	2323      	movs	r3, #35	; 0x23
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b00a      	add	sp, #40	; 0x28
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	ffffefff 	.word	0xffffefff

08002494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	1dfb      	adds	r3, r7, #7
 80024a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024a4:	f7fe fae4 	bl	8000a70 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	18d3      	adds	r3, r2, r3
 80024b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024b4:	f7fe fadc 	bl	8000a70 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	015b      	lsls	r3, r3, #5
 80024c2:	0d1b      	lsrs	r3, r3, #20
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	4353      	muls	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ca:	e058      	b.n	800257e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	d055      	beq.n	800257e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024d2:	f7fe facd 	bl	8000a70 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d902      	bls.n	80024e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d142      	bne.n	800256e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	21e0      	movs	r1, #224	; 0xe0
 80024f4:	438a      	bics	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	2382      	movs	r3, #130	; 0x82
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	429a      	cmp	r2, r3
 8002502:	d113      	bne.n	800252c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	429a      	cmp	r2, r3
 800250e:	d005      	beq.n	800251c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	429a      	cmp	r2, r3
 800251a:	d107      	bne.n	800252c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	438a      	bics	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	019b      	lsls	r3, r3, #6
 8002534:	429a      	cmp	r2, r3
 8002536:	d110      	bne.n	800255a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	491a      	ldr	r1, [pc, #104]	; (80025ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002544:	400a      	ands	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	0189      	lsls	r1, r1, #6
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	225d      	movs	r2, #93	; 0x5d
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	225c      	movs	r2, #92	; 0x5c
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e017      	b.n	800259e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3b01      	subs	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	4013      	ands	r3, r2
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	425a      	negs	r2, r3
 800258e:	4153      	adcs	r3, r2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	001a      	movs	r2, r3
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d197      	bne.n	80024cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b008      	add	sp, #32
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	20000000 	.word	0x20000000
 80025ac:	ffffdfff 	.word	0xffffdfff

080025b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80025be:	2317      	movs	r3, #23
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80025c6:	f7fe fa53 	bl	8000a70 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	18d3      	adds	r3, r2, r3
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80025d6:	f7fe fa4b 	bl	8000a70 <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	0013      	movs	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	00da      	lsls	r2, r3, #3
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	0d1b      	lsrs	r3, r3, #20
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	4353      	muls	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80025fc:	e068      	b.n	80026d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	23c0      	movs	r3, #192	; 0xc0
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	429a      	cmp	r2, r3
 8002606:	d10a      	bne.n	800261e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	2117      	movs	r1, #23
 8002616:	187b      	adds	r3, r7, r1
 8002618:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800261a:	187b      	adds	r3, r7, r1
 800261c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	d055      	beq.n	80026d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002624:	f7fe fa24 	bl	8000a70 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	429a      	cmp	r2, r3
 8002632:	d902      	bls.n	800263a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d142      	bne.n	80026c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	21e0      	movs	r1, #224	; 0xe0
 8002646:	438a      	bics	r2, r1
 8002648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	2382      	movs	r3, #130	; 0x82
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	429a      	cmp	r2, r3
 8002654:	d113      	bne.n	800267e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	429a      	cmp	r2, r3
 8002660:	d005      	beq.n	800266e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	429a      	cmp	r2, r3
 800266c:	d107      	bne.n	800267e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2140      	movs	r1, #64	; 0x40
 800267a:	438a      	bics	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	429a      	cmp	r2, r3
 8002688:	d110      	bne.n	80026ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4916      	ldr	r1, [pc, #88]	; (80026f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002696:	400a      	ands	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0189      	lsls	r1, r1, #6
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	225d      	movs	r2, #93	; 0x5d
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	225c      	movs	r2, #92	; 0x5c
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e010      	b.n	80026e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d18e      	bne.n	80025fe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b00a      	add	sp, #40	; 0x28
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000000 	.word	0x20000000
 80026f0:	ffffdfff 	.word	0xffffdfff

080026f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	2382      	movs	r3, #130	; 0x82
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	429a      	cmp	r2, r3
 800270a:	d113      	bne.n	8002734 <SPI_EndRxTransaction+0x40>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	429a      	cmp	r2, r3
 8002716:	d005      	beq.n	8002724 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2140      	movs	r1, #64	; 0x40
 8002730:	438a      	bics	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	0013      	movs	r3, r2
 800273e:	2200      	movs	r2, #0
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	f7ff fea7 	bl	8002494 <SPI_WaitFlagStateUntilTimeout>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d007      	beq.n	800275a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	2220      	movs	r2, #32
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e026      	b.n	80027a8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	2382      	movs	r3, #130	; 0x82
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	429a      	cmp	r2, r3
 8002764:	d11f      	bne.n	80027a6 <SPI_EndRxTransaction+0xb2>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	429a      	cmp	r2, r3
 8002770:	d005      	beq.n	800277e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	429a      	cmp	r2, r3
 800277c:	d113      	bne.n	80027a6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	23c0      	movs	r3, #192	; 0xc0
 8002782:	00d9      	lsls	r1, r3, #3
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	0013      	movs	r3, r2
 800278c:	2200      	movs	r2, #0
 800278e:	f7ff ff0f 	bl	80025b0 <SPI_WaitFifoStateUntilTimeout>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d007      	beq.n	80027a6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	2220      	movs	r2, #32
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e000      	b.n	80027a8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	23c0      	movs	r3, #192	; 0xc0
 80027c0:	0159      	lsls	r1, r3, #5
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	0013      	movs	r3, r2
 80027ca:	2200      	movs	r2, #0
 80027cc:	f7ff fef0 	bl	80025b0 <SPI_WaitFifoStateUntilTimeout>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d007      	beq.n	80027e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	2220      	movs	r2, #32
 80027da:	431a      	orrs	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e027      	b.n	8002834 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	0013      	movs	r3, r2
 80027ee:	2200      	movs	r2, #0
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	f7ff fe4f 	bl	8002494 <SPI_WaitFlagStateUntilTimeout>
 80027f6:	1e03      	subs	r3, r0, #0
 80027f8:	d007      	beq.n	800280a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fe:	2220      	movs	r2, #32
 8002800:	431a      	orrs	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e014      	b.n	8002834 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	23c0      	movs	r3, #192	; 0xc0
 800280e:	00d9      	lsls	r1, r3, #3
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	0013      	movs	r3, r2
 8002818:	2200      	movs	r2, #0
 800281a:	f7ff fec9 	bl	80025b0 <SPI_WaitFifoStateUntilTimeout>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d007      	beq.n	8002832 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002826:	2220      	movs	r2, #32
 8002828:	431a      	orrs	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e000      	b.n	8002834 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b004      	add	sp, #16
 800283a:	bd80      	pop	{r7, pc}

0800283c <memset>:
 800283c:	0003      	movs	r3, r0
 800283e:	1882      	adds	r2, r0, r2
 8002840:	4293      	cmp	r3, r2
 8002842:	d100      	bne.n	8002846 <memset+0xa>
 8002844:	4770      	bx	lr
 8002846:	7019      	strb	r1, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	e7f9      	b.n	8002840 <memset+0x4>

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	2600      	movs	r6, #0
 8002850:	4c0c      	ldr	r4, [pc, #48]	; (8002884 <__libc_init_array+0x38>)
 8002852:	4d0d      	ldr	r5, [pc, #52]	; (8002888 <__libc_init_array+0x3c>)
 8002854:	1b64      	subs	r4, r4, r5
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	42a6      	cmp	r6, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	2600      	movs	r6, #0
 800285e:	f000 f819 	bl	8002894 <_init>
 8002862:	4c0a      	ldr	r4, [pc, #40]	; (800288c <__libc_init_array+0x40>)
 8002864:	4d0a      	ldr	r5, [pc, #40]	; (8002890 <__libc_init_array+0x44>)
 8002866:	1b64      	subs	r4, r4, r5
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	42a6      	cmp	r6, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	00b3      	lsls	r3, r6, #2
 8002872:	58eb      	ldr	r3, [r5, r3]
 8002874:	4798      	blx	r3
 8002876:	3601      	adds	r6, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	00b3      	lsls	r3, r6, #2
 800287c:	58eb      	ldr	r3, [r5, r3]
 800287e:	4798      	blx	r3
 8002880:	3601      	adds	r6, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	080028ec 	.word	0x080028ec
 8002888:	080028ec 	.word	0x080028ec
 800288c:	080028f0 	.word	0x080028f0
 8002890:	080028ec 	.word	0x080028ec

08002894 <_init>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr

080028a0 <_fini>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr
