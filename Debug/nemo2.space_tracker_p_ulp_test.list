
nemo2.space_tracker_p_ulp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001934  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e94  08008e94  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e9c  08008e9c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e9c  08008e9c  00018e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ea0  08008ea0  00018ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000005c  08008f00  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08008f00  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188ea  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f33  00000000  00000000  000389b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  0003b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001277  00000000  00000000  0003d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001efcc  00000000  00000000  0003e2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b34  00000000  00000000  0005d2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8b15  00000000  00000000  00076ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bf0  00000000  00000000  0013f8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001454e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007548 	.word	0x08007548

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08007548 	.word	0x08007548

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8d8 	bl	8000628 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8d3 	bl	8000628 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b0e4      	sub	sp, #400	; 0x190
 8000644:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000646:	24c8      	movs	r4, #200	; 0xc8
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	23c6      	movs	r3, #198	; 0xc6
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f006 faf3 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <astronode_send_cfg_sr+0x64>)
 8000658:	25c8      	movs	r5, #200	; 0xc8
 800065a:	006d      	lsls	r5, r5, #1
 800065c:	195b      	adds	r3, r3, r5
 800065e:	19db      	adds	r3, r3, r7
 8000660:	0018      	movs	r0, r3
 8000662:	23c6      	movs	r3, #198	; 0xc6
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f006 fae8 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2210      	movs	r2, #16
 8000670:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8000672:	003a      	movs	r2, r7
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0011      	movs	r1, r2
 8000678:	0018      	movs	r0, r3
 800067a:	f000 ff79 	bl	8001570 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <astronode_send_cfg_sr+0x64>)
 8000680:	195b      	adds	r3, r3, r5
 8000682:	19db      	adds	r3, r3, r7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b90      	cmp	r3, #144	; 0x90
 8000688:	d104      	bne.n	8000694 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <astronode_send_cfg_sr+0x68>)
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fef1 	bl	8002474 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8000692:	e003      	b.n	800069c <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <astronode_send_cfg_sr+0x6c>)
 8000696:	0018      	movs	r0, r3
 8000698:	f001 feec 	bl	8002474 <send_debug_logs>
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b064      	add	sp, #400	; 0x190
 80006a2:	bdb0      	pop	{r4, r5, r7, pc}
 80006a4:	fffffe70 	.word	0xfffffe70
 80006a8:	08007970 	.word	0x08007970
 80006ac:	080079a4 	.word	0x080079a4

080006b0 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	b0e7      	sub	sp, #412	; 0x19c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	0005      	movs	r5, r0
 80006b8:	000c      	movs	r4, r1
 80006ba:	0010      	movs	r0, r2
 80006bc:	0019      	movs	r1, r3
 80006be:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <astronode_send_cfg_wr+0x13c>)
 80006c0:	26cc      	movs	r6, #204	; 0xcc
 80006c2:	0076      	lsls	r6, r6, #1
 80006c4:	199b      	adds	r3, r3, r6
 80006c6:	19db      	adds	r3, r3, r7
 80006c8:	1c2a      	adds	r2, r5, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <astronode_send_cfg_wr+0x140>)
 80006ce:	0035      	movs	r5, r6
 80006d0:	195b      	adds	r3, r3, r5
 80006d2:	19db      	adds	r3, r3, r7
 80006d4:	1c22      	adds	r2, r4, #0
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <astronode_send_cfg_wr+0x144>)
 80006da:	002c      	movs	r4, r5
 80006dc:	191b      	adds	r3, r3, r4
 80006de:	19db      	adds	r3, r3, r7
 80006e0:	1c02      	adds	r2, r0, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <astronode_send_cfg_wr+0x148>)
 80006e6:	191b      	adds	r3, r3, r4
 80006e8:	19db      	adds	r3, r3, r7
 80006ea:	1c0a      	adds	r2, r1, #0
 80006ec:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80006ee:	25d0      	movs	r5, #208	; 0xd0
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	0018      	movs	r0, r3
 80006f4:	23c6      	movs	r3, #198	; 0xc6
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f006 fa9f 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 80006fe:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <astronode_send_cfg_wr+0x14c>)
 8000700:	191b      	adds	r3, r3, r4
 8000702:	19db      	adds	r3, r3, r7
 8000704:	0018      	movs	r0, r3
 8000706:	23c6      	movs	r3, #198	; 0xc6
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f006 fa96 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8000710:	0029      	movs	r1, r5
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2205      	movs	r2, #5
 8000716:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8000718:	4b34      	ldr	r3, [pc, #208]	; (80007ec <astronode_send_cfg_wr+0x13c>)
 800071a:	191b      	adds	r3, r3, r4
 800071c:	19db      	adds	r3, r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	569a      	ldrsb	r2, [r3, r2]
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <astronode_send_cfg_wr+0x140>)
 8000724:	191b      	adds	r3, r3, r4
 8000726:	19db      	adds	r3, r3, r7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8000732:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <astronode_send_cfg_wr+0x144>)
 8000734:	191b      	adds	r3, r3, r4
 8000736:	19db      	adds	r3, r3, r7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <astronode_send_cfg_wr+0x148>)
 8000744:	191b      	adds	r3, r3, r4
 8000746:	19db      	adds	r3, r3, r7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b25b      	sxtb	r3, r3
 8000752:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8000754:	187b      	adds	r3, r7, r1
 8000756:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8000758:	23d4      	movs	r3, #212	; 0xd4
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2508      	movs	r5, #8
 800075e:	195b      	adds	r3, r3, r5
 8000760:	19db      	adds	r3, r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	569a      	ldrsb	r2, [r3, r2]
 8000766:	23d6      	movs	r3, #214	; 0xd6
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	195b      	adds	r3, r3, r5
 800076c:	19db      	adds	r3, r3, r7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b25b      	sxtb	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8000778:	23d8      	movs	r3, #216	; 0xd8
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	195b      	adds	r3, r3, r5
 800077e:	19db      	adds	r3, r3, r7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800078a:	23da      	movs	r3, #218	; 0xda
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	195b      	adds	r3, r3, r5
 8000790:	19db      	adds	r3, r3, r7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b25b      	sxtb	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b25b      	sxtb	r3, r3
 800079c:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80007a2:	0008      	movs	r0, r1
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	22c4      	movs	r2, #196	; 0xc4
 80007a8:	2103      	movs	r1, #3
 80007aa:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80007ac:	002b      	movs	r3, r5
 80007ae:	18fa      	adds	r2, r7, r3
 80007b0:	183b      	adds	r3, r7, r0
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fedb 	bl	8001570 <astronode_transport_send_receive>
 80007ba:	0003      	movs	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10f      	bne.n	80007e0 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <astronode_send_cfg_wr+0x14c>)
 80007c2:	191b      	adds	r3, r3, r4
 80007c4:	19db      	adds	r3, r3, r7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b85      	cmp	r3, #133	; 0x85
 80007ca:	d105      	bne.n	80007d8 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <astronode_send_cfg_wr+0x150>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fe50 	bl	8002474 <send_debug_logs>
            return true ;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e004      	b.n	80007e2 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <astronode_send_cfg_wr+0x154>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fe4a 	bl	8002474 <send_debug_logs>
        }
    }
    return false ;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b067      	add	sp, #412	; 0x19c
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	fffffe6f 	.word	0xfffffe6f
 80007f0:	fffffe6e 	.word	0xfffffe6e
 80007f4:	fffffe6d 	.word	0xfffffe6d
 80007f8:	fffffe6c 	.word	0xfffffe6c
 80007fc:	fffffe70 	.word	0xfffffe70
 8000800:	080079d8 	.word	0x080079d8
 8000804:	08007a04 	.word	0x08007a04

08000808 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	b0ed      	sub	sp, #436	; 0x1b4
 800080c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800080e:	21c8      	movs	r1, #200	; 0xc8
 8000810:	2318      	movs	r3, #24
 8000812:	18cb      	adds	r3, r1, r3
 8000814:	19db      	adds	r3, r3, r7
 8000816:	0018      	movs	r0, r3
 8000818:	23c6      	movs	r3, #198	; 0xc6
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f006 fa0d 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000822:	4b4a      	ldr	r3, [pc, #296]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000824:	26cc      	movs	r6, #204	; 0xcc
 8000826:	0076      	lsls	r6, r6, #1
 8000828:	199b      	adds	r3, r3, r6
 800082a:	2218      	movs	r2, #24
 800082c:	4694      	mov	ip, r2
 800082e:	44bc      	add	ip, r7
 8000830:	4463      	add	r3, ip
 8000832:	0018      	movs	r0, r3
 8000834:	23c6      	movs	r3, #198	; 0xc6
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f006 f9ff 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800083e:	21c8      	movs	r1, #200	; 0xc8
 8000840:	2318      	movs	r3, #24
 8000842:	18cb      	adds	r3, r1, r3
 8000844:	19db      	adds	r3, r3, r7
 8000846:	2219      	movs	r2, #25
 8000848:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800084a:	2318      	movs	r3, #24
 800084c:	18fa      	adds	r2, r7, r3
 800084e:	2318      	movs	r3, #24
 8000850:	18cb      	adds	r3, r1, r3
 8000852:	19db      	adds	r3, r3, r7
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fe8a 	bl	8001570 <astronode_transport_send_receive>
 800085c:	0003      	movs	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d16f      	bne.n	8000942 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000864:	0032      	movs	r2, r6
 8000866:	189b      	adds	r3, r3, r2
 8000868:	2118      	movs	r1, #24
 800086a:	468c      	mov	ip, r1
 800086c:	44bc      	add	ip, r7
 800086e:	4463      	add	r3, ip
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b99      	cmp	r3, #153	; 0x99
 8000874:	d161      	bne.n	800093a <astronode_send_mgi_rr+0x132>
        {
 8000876:	466b      	mov	r3, sp
 8000878:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <astronode_send_mgi_rr+0x144>)
 800087c:	189b      	adds	r3, r3, r2
 800087e:	2218      	movs	r2, #24
 8000880:	4694      	mov	ip, r2
 8000882:	44bc      	add	ip, r7
 8000884:	4463      	add	r3, ip
 8000886:	22c4      	movs	r2, #196	; 0xc4
 8000888:	5a9b      	ldrh	r3, [r3, r2]
 800088a:	001a      	movs	r2, r3
 800088c:	3a01      	subs	r2, #1
 800088e:	21ca      	movs	r1, #202	; 0xca
 8000890:	0049      	lsls	r1, r1, #1
 8000892:	2018      	movs	r0, #24
 8000894:	1809      	adds	r1, r1, r0
 8000896:	19c9      	adds	r1, r1, r7
 8000898:	600a      	str	r2, [r1, #0]
 800089a:	001c      	movs	r4, r3
 800089c:	2200      	movs	r2, #0
 800089e:	0015      	movs	r5, r2
 80008a0:	0020      	movs	r0, r4
 80008a2:	0029      	movs	r1, r5
 80008a4:	0004      	movs	r4, r0
 80008a6:	0f62      	lsrs	r2, r4, #29
 80008a8:	000c      	movs	r4, r1
 80008aa:	00e4      	lsls	r4, r4, #3
 80008ac:	617c      	str	r4, [r7, #20]
 80008ae:	697c      	ldr	r4, [r7, #20]
 80008b0:	4314      	orrs	r4, r2
 80008b2:	617c      	str	r4, [r7, #20]
 80008b4:	0001      	movs	r1, r0
 80008b6:	00c9      	lsls	r1, r1, #3
 80008b8:	6139      	str	r1, [r7, #16]
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	0004      	movs	r4, r0
 80008c6:	0f62      	lsrs	r2, r4, #29
 80008c8:	000c      	movs	r4, r1
 80008ca:	00e4      	lsls	r4, r4, #3
 80008cc:	60fc      	str	r4, [r7, #12]
 80008ce:	68fc      	ldr	r4, [r7, #12]
 80008d0:	4314      	orrs	r4, r2
 80008d2:	60fc      	str	r4, [r7, #12]
 80008d4:	0001      	movs	r1, r0
 80008d6:	00ca      	lsls	r2, r1, #3
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	3307      	adds	r3, #7
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4669      	mov	r1, sp
 80008e2:	1acb      	subs	r3, r1, r3
 80008e4:	469d      	mov	sp, r3
 80008e6:	466b      	mov	r3, sp
 80008e8:	3300      	adds	r3, #0
 80008ea:	24c8      	movs	r4, #200	; 0xc8
 80008ec:	0064      	lsls	r4, r4, #1
 80008ee:	2218      	movs	r2, #24
 80008f0:	18a2      	adds	r2, r4, r2
 80008f2:	19d1      	adds	r1, r2, r7
 80008f4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <astronode_send_mgi_rr+0x148>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fdbb 	bl	8002474 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000900:	22cc      	movs	r2, #204	; 0xcc
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	189b      	adds	r3, r3, r2
 8000906:	2218      	movs	r2, #24
 8000908:	4694      	mov	ip, r2
 800090a:	44bc      	add	ip, r7
 800090c:	4463      	add	r3, ip
 800090e:	22c4      	movs	r2, #196	; 0xc4
 8000910:	5a9b      	ldrh	r3, [r3, r2]
 8000912:	0019      	movs	r1, r3
 8000914:	2318      	movs	r3, #24
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	3301      	adds	r3, #1
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <astronode_send_mgi_rr+0x14c>)
 800091c:	2018      	movs	r0, #24
 800091e:	1820      	adds	r0, r4, r0
 8000920:	19c0      	adds	r0, r0, r7
 8000922:	6800      	ldr	r0, [r0, #0]
 8000924:	f006 f936 	bl	8006b94 <sniprintf>
            send_debug_logs(guid);
 8000928:	2318      	movs	r3, #24
 800092a:	18e3      	adds	r3, r4, r3
 800092c:	19db      	adds	r3, r3, r7
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0018      	movs	r0, r3
 8000932:	f001 fd9f 	bl	8002474 <send_debug_logs>
 8000936:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8000938:	e003      	b.n	8000942 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <astronode_send_mgi_rr+0x150>)
 800093c:	0018      	movs	r0, r3
 800093e:	f001 fd99 	bl	8002474 <send_debug_logs>
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b06d      	add	sp, #436	; 0x1b4
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	fffffe68 	.word	0xfffffe68
 8000950:	08007a90 	.word	0x08007a90
 8000954:	08007aa0 	.word	0x08007aa0
 8000958:	08007aa4 	.word	0x08007aa4

0800095c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	b0ed      	sub	sp, #436	; 0x1b4
 8000960:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000962:	21c8      	movs	r1, #200	; 0xc8
 8000964:	2318      	movs	r3, #24
 8000966:	18cb      	adds	r3, r1, r3
 8000968:	19db      	adds	r3, r3, r7
 800096a:	0018      	movs	r0, r3
 800096c:	23c6      	movs	r3, #198	; 0xc6
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f006 f963 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000976:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 8000978:	26cc      	movs	r6, #204	; 0xcc
 800097a:	0076      	lsls	r6, r6, #1
 800097c:	199b      	adds	r3, r3, r6
 800097e:	2218      	movs	r2, #24
 8000980:	4694      	mov	ip, r2
 8000982:	44bc      	add	ip, r7
 8000984:	4463      	add	r3, ip
 8000986:	0018      	movs	r0, r3
 8000988:	23c6      	movs	r3, #198	; 0xc6
 800098a:	001a      	movs	r2, r3
 800098c:	2100      	movs	r1, #0
 800098e:	f006 f955 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8000992:	21c8      	movs	r1, #200	; 0xc8
 8000994:	2318      	movs	r3, #24
 8000996:	18cb      	adds	r3, r1, r3
 8000998:	19db      	adds	r3, r3, r7
 800099a:	221a      	movs	r2, #26
 800099c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800099e:	2318      	movs	r3, #24
 80009a0:	18fa      	adds	r2, r7, r3
 80009a2:	2318      	movs	r3, #24
 80009a4:	18cb      	adds	r3, r1, r3
 80009a6:	19db      	adds	r3, r3, r7
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fde0 	bl	8001570 <astronode_transport_send_receive>
 80009b0:	0003      	movs	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d16f      	bne.n	8000a96 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 80009b8:	0032      	movs	r2, r6
 80009ba:	189b      	adds	r3, r3, r2
 80009bc:	2118      	movs	r1, #24
 80009be:	468c      	mov	ip, r1
 80009c0:	44bc      	add	ip, r7
 80009c2:	4463      	add	r3, ip
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b9a      	cmp	r3, #154	; 0x9a
 80009c8:	d161      	bne.n	8000a8e <astronode_send_msn_rr+0x132>
        {
 80009ca:	466b      	mov	r3, sp
 80009cc:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 80009d0:	189b      	adds	r3, r3, r2
 80009d2:	2218      	movs	r2, #24
 80009d4:	4694      	mov	ip, r2
 80009d6:	44bc      	add	ip, r7
 80009d8:	4463      	add	r3, ip
 80009da:	22c4      	movs	r2, #196	; 0xc4
 80009dc:	5a9b      	ldrh	r3, [r3, r2]
 80009de:	001a      	movs	r2, r3
 80009e0:	3a01      	subs	r2, #1
 80009e2:	21ca      	movs	r1, #202	; 0xca
 80009e4:	0049      	lsls	r1, r1, #1
 80009e6:	2018      	movs	r0, #24
 80009e8:	1809      	adds	r1, r1, r0
 80009ea:	19c9      	adds	r1, r1, r7
 80009ec:	600a      	str	r2, [r1, #0]
 80009ee:	001c      	movs	r4, r3
 80009f0:	2200      	movs	r2, #0
 80009f2:	0015      	movs	r5, r2
 80009f4:	0020      	movs	r0, r4
 80009f6:	0029      	movs	r1, r5
 80009f8:	0004      	movs	r4, r0
 80009fa:	0f62      	lsrs	r2, r4, #29
 80009fc:	000c      	movs	r4, r1
 80009fe:	00e4      	lsls	r4, r4, #3
 8000a00:	617c      	str	r4, [r7, #20]
 8000a02:	697c      	ldr	r4, [r7, #20]
 8000a04:	4314      	orrs	r4, r2
 8000a06:	617c      	str	r4, [r7, #20]
 8000a08:	0001      	movs	r1, r0
 8000a0a:	00c9      	lsls	r1, r1, #3
 8000a0c:	6139      	str	r1, [r7, #16]
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	0004      	movs	r4, r0
 8000a1a:	0f62      	lsrs	r2, r4, #29
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	00e4      	lsls	r4, r4, #3
 8000a20:	60fc      	str	r4, [r7, #12]
 8000a22:	68fc      	ldr	r4, [r7, #12]
 8000a24:	4314      	orrs	r4, r2
 8000a26:	60fc      	str	r4, [r7, #12]
 8000a28:	0001      	movs	r1, r0
 8000a2a:	00ca      	lsls	r2, r1, #3
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	3307      	adds	r3, #7
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	4669      	mov	r1, sp
 8000a36:	1acb      	subs	r3, r1, r3
 8000a38:	469d      	mov	sp, r3
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	3300      	adds	r3, #0
 8000a3e:	24c8      	movs	r4, #200	; 0xc8
 8000a40:	0064      	lsls	r4, r4, #1
 8000a42:	2218      	movs	r2, #24
 8000a44:	18a2      	adds	r2, r4, r2
 8000a46:	19d1      	adds	r1, r2, r7
 8000a48:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <astronode_send_msn_rr+0x148>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 fd11 	bl	8002474 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 8000a54:	22cc      	movs	r2, #204	; 0xcc
 8000a56:	0052      	lsls	r2, r2, #1
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	44bc      	add	ip, r7
 8000a60:	4463      	add	r3, ip
 8000a62:	22c4      	movs	r2, #196	; 0xc4
 8000a64:	5a9b      	ldrh	r3, [r3, r2]
 8000a66:	0019      	movs	r1, r3
 8000a68:	2318      	movs	r3, #24
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <astronode_send_msn_rr+0x14c>)
 8000a70:	2018      	movs	r0, #24
 8000a72:	1820      	adds	r0, r4, r0
 8000a74:	19c0      	adds	r0, r0, r7
 8000a76:	6800      	ldr	r0, [r0, #0]
 8000a78:	f006 f88c 	bl	8006b94 <sniprintf>
            send_debug_logs(serial_number);
 8000a7c:	2318      	movs	r3, #24
 8000a7e:	18e3      	adds	r3, r4, r3
 8000a80:	19db      	adds	r3, r3, r7
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fcf5 	bl	8002474 <send_debug_logs>
 8000a8a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8000a8c:	e003      	b.n	8000a96 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <astronode_send_msn_rr+0x150>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 fcef 	bl	8002474 <send_debug_logs>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b06d      	add	sp, #436	; 0x1b4
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	fffffe68 	.word	0xfffffe68
 8000aa4:	08007ac0 	.word	0x08007ac0
 8000aa8:	08007aa0 	.word	0x08007aa0
 8000aac:	08007adc 	.word	0x08007adc

08000ab0 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b0e4      	sub	sp, #400	; 0x190
 8000ab4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ab6:	24c8      	movs	r4, #200	; 0xc8
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	0018      	movs	r0, r3
 8000abc:	23c6      	movs	r3, #198	; 0xc6
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f006 f8bb 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000ac8:	25c8      	movs	r5, #200	; 0xc8
 8000aca:	006d      	lsls	r5, r5, #1
 8000acc:	195b      	adds	r3, r3, r5
 8000ace:	19db      	adds	r3, r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	23c6      	movs	r3, #198	; 0xc6
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f006 f8b0 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2265      	movs	r2, #101	; 0x65
 8000ae0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fd41 	bl	8001570 <astronode_transport_send_receive>
 8000aee:	0003      	movs	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d147      	bne.n	8000b84 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000af6:	195b      	adds	r3, r3, r5
 8000af8:	19db      	adds	r3, r3, r7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2be5      	cmp	r3, #229	; 0xe5
 8000afe:	d141      	bne.n	8000b84 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b02:	195b      	adds	r3, r3, r5
 8000b04:	19db      	adds	r3, r3, r7
 8000b06:	785b      	ldrb	r3, [r3, #1]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d006      	beq.n	8000b1e <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <astronode_send_evt_rr+0xe0>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <astronode_send_evt_rr+0xe4>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 fcab 	bl	8002474 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b20:	22c8      	movs	r2, #200	; 0xc8
 8000b22:	0052      	lsls	r2, r2, #1
 8000b24:	189b      	adds	r3, r3, r2
 8000b26:	19db      	adds	r3, r3, r7
 8000b28:	785b      	ldrb	r3, [r3, #1]
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d006      	beq.n	8000b40 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <astronode_send_evt_rr+0xe8>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <astronode_send_evt_rr+0xec>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 fc9a 	bl	8002474 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b42:	22c8      	movs	r2, #200	; 0xc8
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	189b      	adds	r3, r3, r2
 8000b48:	19db      	adds	r3, r3, r7
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2304      	movs	r3, #4
 8000b50:	4013      	ands	r3, r2
 8000b52:	d006      	beq.n	8000b62 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <astronode_send_evt_rr+0xf0>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <astronode_send_evt_rr+0xf4>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 fc89 	bl	8002474 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b64:	22c8      	movs	r2, #200	; 0xc8
 8000b66:	0052      	lsls	r2, r2, #1
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	19db      	adds	r3, r3, r7
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2308      	movs	r3, #8
 8000b72:	4013      	ands	r3, r2
 8000b74:	d006      	beq.n	8000b84 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <astronode_send_evt_rr+0xf8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <astronode_send_evt_rr+0xfc>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fc78 	bl	8002474 <send_debug_logs>
            }

        }
    }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b064      	add	sp, #400	; 0x190
 8000b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8c:	fffffe70 	.word	0xfffffe70
 8000b90:	20000078 	.word	0x20000078
 8000b94:	08007b84 	.word	0x08007b84
 8000b98:	20000079 	.word	0x20000079
 8000b9c:	08007ba8 	.word	0x08007ba8
 8000ba0:	2000007a 	.word	0x2000007a
 8000ba4:	08007bc0 	.word	0x08007bc0
 8000ba8:	2000007b 	.word	0x2000007b
 8000bac:	08007bd4 	.word	0x08007bd4

08000bb0 <astronode_send_pld_fr>:
    }
    return false ;
}

void astronode_send_pld_fr(void)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b0e4      	sub	sp, #400	; 0x190
 8000bb4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000bb6:	24c8      	movs	r4, #200	; 0xc8
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	23c6      	movs	r3, #198	; 0xc6
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f006 f83b 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <astronode_send_pld_fr+0x6c>)
 8000bc8:	25c8      	movs	r5, #200	; 0xc8
 8000bca:	006d      	lsls	r5, r5, #1
 8000bcc:	195b      	adds	r3, r3, r5
 8000bce:	19db      	adds	r3, r3, r7
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	23c6      	movs	r3, #198	; 0xc6
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f006 f830 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2227      	movs	r2, #39	; 0x27
 8000be0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000be2:	003a      	movs	r2, r7
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 fcc1 	bl	8001570 <astronode_transport_send_receive>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10e      	bne.n	8000c12 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <astronode_send_pld_fr+0x6c>)
 8000bf6:	195b      	adds	r3, r3, r5
 8000bf8:	19db      	adds	r3, r3, r7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2ba7      	cmp	r3, #167	; 0xa7
 8000bfe:	d104      	bne.n	8000c0a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <astronode_send_pld_fr+0x70>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f001 fc36 	bl	8002474 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8000c08:	e003      	b.n	8000c12 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <astronode_send_pld_fr+0x74>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 fc31 	bl	8002474 <send_debug_logs>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b064      	add	sp, #400	; 0x190
 8000c18:	bdb0      	pop	{r4, r5, r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	fffffe70 	.word	0xfffffe70
 8000c20:	08007cfc 	.word	0x08007cfc
 8000c24:	08007d34 	.word	0x08007d34

08000c28 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b0e4      	sub	sp, #400	; 0x190
 8000c2c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000c2e:	24c8      	movs	r4, #200	; 0xc8
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	0018      	movs	r0, r3
 8000c34:	23c6      	movs	r3, #198	; 0xc6
 8000c36:	001a      	movs	r2, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f005 ffff 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <astronode_send_res_cr+0x70>)
 8000c40:	25c8      	movs	r5, #200	; 0xc8
 8000c42:	006d      	lsls	r5, r5, #1
 8000c44:	195b      	adds	r3, r3, r5
 8000c46:	19db      	adds	r3, r3, r7
 8000c48:	0018      	movs	r0, r3
 8000c4a:	23c6      	movs	r3, #198	; 0xc6
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f005 fff4 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2255      	movs	r2, #85	; 0x55
 8000c58:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000c5a:	003a      	movs	r2, r7
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fc85 	bl	8001570 <astronode_transport_send_receive>
 8000c66:	0003      	movs	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d111      	bne.n	8000c90 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <astronode_send_res_cr+0x70>)
 8000c6e:	195b      	adds	r3, r3, r5
 8000c70:	19db      	adds	r3, r3, r7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2bd5      	cmp	r3, #213	; 0xd5
 8000c76:	d107      	bne.n	8000c88 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <astronode_send_res_cr+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <astronode_send_res_cr+0x78>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fbf7 	bl	8002474 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8000c86:	e003      	b.n	8000c90 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <astronode_send_res_cr+0x7c>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f001 fbf2 	bl	8002474 <send_debug_logs>
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b064      	add	sp, #400	; 0x190
 8000c96:	bdb0      	pop	{r4, r5, r7, pc}
 8000c98:	fffffe70 	.word	0xfffffe70
 8000c9c:	20000079 	.word	0x20000079
 8000ca0:	08007d70 	.word	0x08007d70
 8000ca4:	08007da4 	.word	0x08007da4

08000ca8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b0fa      	sub	sp, #488	; 0x1e8
 8000cac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8000cae:	258e      	movs	r5, #142	; 0x8e
 8000cb0:	006d      	lsls	r5, r5, #1
 8000cb2:	197b      	adds	r3, r7, r5
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	23c6      	movs	r3, #198	; 0xc6
 8000cb8:	001a      	movs	r2, r3
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f005 ffbe 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0} ;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000cc2:	24f4      	movs	r4, #244	; 0xf4
 8000cc4:	0064      	lsls	r4, r4, #1
 8000cc6:	191b      	adds	r3, r3, r4
 8000cc8:	19db      	adds	r3, r3, r7
 8000cca:	0018      	movs	r0, r3
 8000ccc:	23c6      	movs	r3, #198	; 0xc6
 8000cce:	001a      	movs	r2, r3
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f005 ffb3 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8000cd6:	197b      	adds	r3, r7, r5
 8000cd8:	2217      	movs	r2, #23
 8000cda:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8000cdc:	2354      	movs	r3, #84	; 0x54
 8000cde:	18fa      	adds	r2, r7, r3
 8000ce0:	197b      	adds	r3, r7, r5
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fc43 	bl	8001570 <astronode_transport_send_receive>
 8000cea:	0003      	movs	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d133      	bne.n	8000d58 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	185b      	adds	r3, r3, r1
 8000cf6:	19db      	adds	r3, r3, r7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b97      	cmp	r3, #151	; 0x97
 8000cfc:	d128      	bne.n	8000d50 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d00:	185b      	adds	r3, r3, r1
 8000d02:	19db      	adds	r3, r3, r7
 8000d04:	785b      	ldrb	r3, [r3, #1]
 8000d06:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d0a:	185b      	adds	r3, r3, r1
 8000d0c:	19db      	adds	r3, r3, r7
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d16:	185b      	adds	r3, r3, r1
 8000d18:	19db      	adds	r3, r3, r7
 8000d1a:	78db      	ldrb	r3, [r3, #3]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d22:	185b      	adds	r3, r3, r1
 8000d24:	19db      	adds	r3, r3, r7
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	061b      	lsls	r3, r3, #24
 8000d2a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8000d2c:	24f2      	movs	r4, #242	; 0xf2
 8000d2e:	0064      	lsls	r4, r4, #1
 8000d30:	193a      	adds	r2, r7, r4
 8000d32:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	490b      	ldr	r1, [pc, #44]	; (8000d68 <astronode_send_rtc_rr+0xc0>)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f005 ff5d 	bl	8006bfc <siprintf>
            send_debug_logs ( str ) ;
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 fb95 	bl	8002474 <send_debug_logs>
            return rtc_time ;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	e004      	b.n	8000d5a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <astronode_send_rtc_rr+0xc4>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 fb8e 	bl	8002474 <send_debug_logs>
        }
    }
    return 0 ;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b07a      	add	sp, #488	; 0x1e8
 8000d60:	bdb0      	pop	{r4, r5, r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	fffffe6c 	.word	0xfffffe6c
 8000d68:	08007dd0 	.word	0x08007dd0
 8000d6c:	08007e10 	.word	0x08007e10

08000d70 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b0f8      	sub	sp, #480	; 0x1e0
 8000d74:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000d76:	258c      	movs	r5, #140	; 0x8c
 8000d78:	006d      	lsls	r5, r5, #1
 8000d7a:	197b      	adds	r3, r7, r5
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	23c6      	movs	r3, #198	; 0xc6
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f005 ff5a 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000d8a:	24f0      	movs	r4, #240	; 0xf0
 8000d8c:	0064      	lsls	r4, r4, #1
 8000d8e:	191b      	adds	r3, r3, r4
 8000d90:	19db      	adds	r3, r3, r7
 8000d92:	0018      	movs	r0, r3
 8000d94:	23c6      	movs	r3, #198	; 0xc6
 8000d96:	001a      	movs	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f005 ff4f 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8000d9e:	197b      	adds	r3, r7, r5
 8000da0:	2245      	movs	r2, #69	; 0x45
 8000da2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000da4:	2350      	movs	r3, #80	; 0x50
 8000da6:	18fa      	adds	r2, r7, r3
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fbdf 	bl	8001570 <astronode_transport_send_receive>
 8000db2:	0003      	movs	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d126      	bne.n	8000e06 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dba:	191b      	adds	r3, r3, r4
 8000dbc:	19db      	adds	r3, r3, r7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2bc5      	cmp	r3, #197	; 0xc5
 8000dc2:	d11c      	bne.n	8000dfe <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dc6:	191b      	adds	r3, r3, r4
 8000dc8:	19db      	adds	r3, r3, r7
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dd0:	191b      	adds	r3, r3, r4
 8000dd2:	19db      	adds	r3, r3, r7
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	20ef      	movs	r0, #239	; 0xef
 8000dde:	0040      	lsls	r0, r0, #1
 8000de0:	183b      	adds	r3, r7, r0
 8000de2:	188a      	adds	r2, r1, r2
 8000de4:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	490a      	ldr	r1, [pc, #40]	; (8000e14 <astronode_send_sak_rr+0xa4>)
 8000dec:	003b      	movs	r3, r7
 8000dee:	0018      	movs	r0, r3
 8000df0:	f005 ff04 	bl	8006bfc <siprintf>
            send_debug_logs(str);
 8000df4:	003b      	movs	r3, r7
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 fb3c 	bl	8002474 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8000dfc:	e003      	b.n	8000e06 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <astronode_send_sak_rr+0xa8>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 fb37 	bl	8002474 <send_debug_logs>
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b078      	add	sp, #480	; 0x1e0
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	fffffe70 	.word	0xfffffe70
 8000e14:	08007e2c 	.word	0x08007e2c
 8000e18:	08007e58 	.word	0x08007e58

08000e1c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b0e4      	sub	sp, #400	; 0x190
 8000e20:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000e22:	24c8      	movs	r4, #200	; 0xc8
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	0018      	movs	r0, r3
 8000e28:	23c6      	movs	r3, #198	; 0xc6
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f005 ff05 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <astronode_send_sak_cr+0x70>)
 8000e34:	25c8      	movs	r5, #200	; 0xc8
 8000e36:	006d      	lsls	r5, r5, #1
 8000e38:	195b      	adds	r3, r3, r5
 8000e3a:	19db      	adds	r3, r3, r7
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	23c6      	movs	r3, #198	; 0xc6
 8000e40:	001a      	movs	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f005 fefa 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	2246      	movs	r2, #70	; 0x46
 8000e4c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000e4e:	003a      	movs	r2, r7
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 fb8b 	bl	8001570 <astronode_transport_send_receive>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d111      	bne.n	8000e84 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <astronode_send_sak_cr+0x70>)
 8000e62:	195b      	adds	r3, r3, r5
 8000e64:	19db      	adds	r3, r3, r7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2bc6      	cmp	r3, #198	; 0xc6
 8000e6a:	d107      	bne.n	8000e7c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <astronode_send_sak_cr+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <astronode_send_sak_cr+0x78>)
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 fafd 	bl	8002474 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8000e7a:	e003      	b.n	8000e84 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <astronode_send_sak_cr+0x7c>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 faf8 	bl	8002474 <send_debug_logs>
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b064      	add	sp, #400	; 0x190
 8000e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8c:	fffffe70 	.word	0xfffffe70
 8000e90:	20000078 	.word	0x20000078
 8000e94:	08007e8c 	.word	0x08007e8c
 8000e98:	08007eb4 	.word	0x08007eb4

08000e9c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	b0ed      	sub	sp, #436	; 0x1b4
 8000ea0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ea2:	21c8      	movs	r1, #200	; 0xc8
 8000ea4:	2318      	movs	r3, #24
 8000ea6:	18cb      	adds	r3, r1, r3
 8000ea8:	19db      	adds	r3, r3, r7
 8000eaa:	0018      	movs	r0, r3
 8000eac:	23c6      	movs	r3, #198	; 0xc6
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f005 fec3 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8000eb6:	4b4a      	ldr	r3, [pc, #296]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000eb8:	26cc      	movs	r6, #204	; 0xcc
 8000eba:	0076      	lsls	r6, r6, #1
 8000ebc:	199b      	adds	r3, r3, r6
 8000ebe:	2218      	movs	r2, #24
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	44bc      	add	ip, r7
 8000ec4:	4463      	add	r3, ip
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	23c6      	movs	r3, #198	; 0xc6
 8000eca:	001a      	movs	r2, r3
 8000ecc:	2100      	movs	r1, #0
 8000ece:	f005 feb5 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8000ed2:	21c8      	movs	r1, #200	; 0xc8
 8000ed4:	2318      	movs	r3, #24
 8000ed6:	18cb      	adds	r3, r1, r3
 8000ed8:	19db      	adds	r3, r3, r7
 8000eda:	221b      	movs	r2, #27
 8000edc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000ede:	2318      	movs	r3, #24
 8000ee0:	18fa      	adds	r2, r7, r3
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	18cb      	adds	r3, r1, r3
 8000ee6:	19db      	adds	r3, r3, r7
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fb40 	bl	8001570 <astronode_transport_send_receive>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d16f      	bne.n	8000fd6 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000ef8:	0032      	movs	r2, r6
 8000efa:	189b      	adds	r3, r3, r2
 8000efc:	2118      	movs	r1, #24
 8000efe:	468c      	mov	ip, r1
 8000f00:	44bc      	add	ip, r7
 8000f02:	4463      	add	r3, ip
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b9b      	cmp	r3, #155	; 0x9b
 8000f08:	d161      	bne.n	8000fce <astronode_send_mpn_rr+0x132>
        {
 8000f0a:	466b      	mov	r3, sp
 8000f0c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000f10:	189b      	adds	r3, r3, r2
 8000f12:	2218      	movs	r2, #24
 8000f14:	4694      	mov	ip, r2
 8000f16:	44bc      	add	ip, r7
 8000f18:	4463      	add	r3, ip
 8000f1a:	22c4      	movs	r2, #196	; 0xc4
 8000f1c:	5a9b      	ldrh	r3, [r3, r2]
 8000f1e:	001a      	movs	r2, r3
 8000f20:	3a01      	subs	r2, #1
 8000f22:	21ca      	movs	r1, #202	; 0xca
 8000f24:	0049      	lsls	r1, r1, #1
 8000f26:	2018      	movs	r0, #24
 8000f28:	1809      	adds	r1, r1, r0
 8000f2a:	19c9      	adds	r1, r1, r7
 8000f2c:	600a      	str	r2, [r1, #0]
 8000f2e:	001c      	movs	r4, r3
 8000f30:	2200      	movs	r2, #0
 8000f32:	0015      	movs	r5, r2
 8000f34:	0020      	movs	r0, r4
 8000f36:	0029      	movs	r1, r5
 8000f38:	0004      	movs	r4, r0
 8000f3a:	0f62      	lsrs	r2, r4, #29
 8000f3c:	000c      	movs	r4, r1
 8000f3e:	00e4      	lsls	r4, r4, #3
 8000f40:	617c      	str	r4, [r7, #20]
 8000f42:	697c      	ldr	r4, [r7, #20]
 8000f44:	4314      	orrs	r4, r2
 8000f46:	617c      	str	r4, [r7, #20]
 8000f48:	0001      	movs	r1, r0
 8000f4a:	00c9      	lsls	r1, r1, #3
 8000f4c:	6139      	str	r1, [r7, #16]
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	0004      	movs	r4, r0
 8000f5a:	0f62      	lsrs	r2, r4, #29
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	00e4      	lsls	r4, r4, #3
 8000f60:	60fc      	str	r4, [r7, #12]
 8000f62:	68fc      	ldr	r4, [r7, #12]
 8000f64:	4314      	orrs	r4, r2
 8000f66:	60fc      	str	r4, [r7, #12]
 8000f68:	0001      	movs	r1, r0
 8000f6a:	00ca      	lsls	r2, r1, #3
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	3307      	adds	r3, #7
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4669      	mov	r1, sp
 8000f76:	1acb      	subs	r3, r1, r3
 8000f78:	469d      	mov	sp, r3
 8000f7a:	466b      	mov	r3, sp
 8000f7c:	3300      	adds	r3, #0
 8000f7e:	24c8      	movs	r4, #200	; 0xc8
 8000f80:	0064      	lsls	r4, r4, #1
 8000f82:	2218      	movs	r2, #24
 8000f84:	18a2      	adds	r2, r4, r2
 8000f86:	19d1      	adds	r1, r2, r7
 8000f88:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <astronode_send_mpn_rr+0x148>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 fa71 	bl	8002474 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000f94:	22cc      	movs	r2, #204	; 0xcc
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	189b      	adds	r3, r3, r2
 8000f9a:	2218      	movs	r2, #24
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	44bc      	add	ip, r7
 8000fa0:	4463      	add	r3, ip
 8000fa2:	22c4      	movs	r2, #196	; 0xc4
 8000fa4:	5a9b      	ldrh	r3, [r3, r2]
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	2318      	movs	r3, #24
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <astronode_send_mpn_rr+0x14c>)
 8000fb0:	2018      	movs	r0, #24
 8000fb2:	1820      	adds	r0, r4, r0
 8000fb4:	19c0      	adds	r0, r0, r7
 8000fb6:	6800      	ldr	r0, [r0, #0]
 8000fb8:	f005 fdec 	bl	8006b94 <sniprintf>
            send_debug_logs(product_number);
 8000fbc:	2318      	movs	r3, #24
 8000fbe:	18e3      	adds	r3, r4, r3
 8000fc0:	19db      	adds	r3, r3, r7
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 fa55 	bl	8002474 <send_debug_logs>
 8000fca:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8000fcc:	e003      	b.n	8000fd6 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <astronode_send_mpn_rr+0x150>)
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 fa4f 	bl	8002474 <send_debug_logs>
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b06d      	add	sp, #436	; 0x1b4
 8000fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	fffffe68 	.word	0xfffffe68
 8000fe4:	08007f7c 	.word	0x08007f7c
 8000fe8:	08007aa0 	.word	0x08007aa0
 8000fec:	08007adc 	.word	0x08007adc

08000ff0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b0e4      	sub	sp, #400	; 0x190
 8000ff4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ff6:	24c8      	movs	r4, #200	; 0xc8
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	23c6      	movs	r3, #198	; 0xc6
 8000ffe:	001a      	movs	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	f005 fe1b 	bl	8006c3c <memset>
    astronode_app_msg_t answer = {0};
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <astronode_send_cmd_cr+0x70>)
 8001008:	25c8      	movs	r5, #200	; 0xc8
 800100a:	006d      	lsls	r5, r5, #1
 800100c:	195b      	adds	r3, r3, r5
 800100e:	19db      	adds	r3, r3, r7
 8001010:	0018      	movs	r0, r3
 8001012:	23c6      	movs	r3, #198	; 0xc6
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f005 fe10 	bl	8006c3c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2248      	movs	r2, #72	; 0x48
 8001020:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001022:	003a      	movs	r2, r7
 8001024:	193b      	adds	r3, r7, r4
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f000 faa1 	bl	8001570 <astronode_transport_send_receive>
 800102e:	0003      	movs	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d111      	bne.n	8001058 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <astronode_send_cmd_cr+0x70>)
 8001036:	195b      	adds	r3, r3, r5
 8001038:	19db      	adds	r3, r3, r7
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2bc8      	cmp	r3, #200	; 0xc8
 800103e:	d107      	bne.n	8001050 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <astronode_send_cmd_cr+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <astronode_send_cmd_cr+0x78>)
 8001048:	0018      	movs	r0, r3
 800104a:	f001 fa13 	bl	8002474 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800104e:	e003      	b.n	8001058 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <astronode_send_cmd_cr+0x7c>)
 8001052:	0018      	movs	r0, r3
 8001054:	f001 fa0e 	bl	8002474 <send_debug_logs>
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b064      	add	sp, #400	; 0x190
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	fffffe70 	.word	0xfffffe70
 8001064:	2000007a 	.word	0x2000007a
 8001068:	080083cc 	.word	0x080083cc
 800106c:	080083f0 	.word	0x080083f0

08001070 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <is_sak_available+0x10>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	20000078 	.word	0x20000078

08001084 <is_astronode_reset>:

bool is_astronode_reset()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <is_astronode_reset+0x10>)
 800108a:	781b      	ldrb	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000079 	.word	0x20000079

08001098 <is_command_available>:

bool is_command_available()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    return g_is_command_available;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <is_command_available+0x10>)
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	2000007a 	.word	0x2000007a

080010ac <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b2f      	cmp	r3, #47	; 0x2f
 80010c0:	d90b      	bls.n	80010da <ascii_to_value+0x2e>
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b39      	cmp	r3, #57	; 0x39
 80010c8:	d807      	bhi.n	80010da <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b30      	subs	r3, #48	; 0x30
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
        return true;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e010      	b.n	80010fc <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b40      	cmp	r3, #64	; 0x40
 80010e0:	d90b      	bls.n	80010fa <ascii_to_value+0x4e>
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b46      	cmp	r3, #70	; 0x46
 80010e8:	d807      	bhi.n	80010fa <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	3b37      	subs	r3, #55	; 0x37
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	701a      	strb	r2, [r3, #0]
        return true;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <ascii_to_value+0x50>
    }
    else
    {
        return false;
 80010fa:	2300      	movs	r3, #0
    }
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800110e:	250e      	movs	r5, #14
 8001110:	197b      	adds	r3, r7, r5
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8001116:	197b      	adds	r3, r7, r5
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	197a      	adds	r2, r7, r5
 800111c:	1c59      	adds	r1, r3, #1
 800111e:	8011      	strh	r1, [r2, #0]
 8001120:	001a      	movs	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	189b      	adds	r3, r3, r2
 8001126:	2202      	movs	r2, #2
 8001128:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	260a      	movs	r6, #10
 800112e:	19bc      	adds	r4, r7, r6
 8001130:	4a44      	ldr	r2, [pc, #272]	; (8001244 <astronode_create_request_transport+0x140>)
 8001132:	2101      	movs	r1, #1
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fa7d 	bl	8001634 <calculate_crc>
 800113a:	0003      	movs	r3, r0
 800113c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	1c58      	adds	r0, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	22c4      	movs	r2, #196	; 0xc4
 8001146:	5a99      	ldrh	r1, [r3, r2]
 8001148:	19bc      	adds	r4, r7, r6
 800114a:	19bb      	adds	r3, r7, r6
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	001a      	movs	r2, r3
 8001150:	f000 fa70 	bl	8001634 <calculate_crc>
 8001154:	0003      	movs	r3, r0
 8001156:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8001158:	19bb      	adds	r3, r7, r6
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	0031      	movs	r1, r6
 8001162:	19bb      	adds	r3, r7, r6
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21a      	sxth	r2, r3
 8001170:	187b      	adds	r3, r7, r1
 8001172:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7818      	ldrb	r0, [r3, #0]
 8001178:	197b      	adds	r3, r7, r5
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	0019      	movs	r1, r3
 8001182:	f000 fbeb 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 8001186:	197b      	adds	r3, r7, r5
 8001188:	197a      	adds	r2, r7, r5
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	3202      	adds	r2, #2
 800118e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001190:	230c      	movs	r3, #12
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
 8001198:	e017      	b.n	80011ca <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 800119a:	240c      	movs	r4, #12
 800119c:	193b      	adds	r3, r7, r4
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	18d3      	adds	r3, r2, r3
 80011a4:	7858      	ldrb	r0, [r3, #1]
 80011a6:	250e      	movs	r5, #14
 80011a8:	197b      	adds	r3, r7, r5
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	0019      	movs	r1, r3
 80011b2:	f000 fbd3 	bl	800195c <uint8_to_ascii_buffer>
        index += 2;
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	197a      	adds	r2, r7, r5
 80011ba:	8812      	ldrh	r2, [r2, #0]
 80011bc:	3202      	adds	r2, #2
 80011be:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	3201      	adds	r2, #1
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	22c4      	movs	r2, #196	; 0xc4
 80011ce:	5a9b      	ldrh	r3, [r3, r2]
 80011d0:	220c      	movs	r2, #12
 80011d2:	18ba      	adds	r2, r7, r2
 80011d4:	8812      	ldrh	r2, [r2, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3df      	bcc.n	800119a <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80011da:	250a      	movs	r5, #10
 80011dc:	197b      	adds	r3, r7, r5
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	240e      	movs	r4, #14
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	18d3      	adds	r3, r2, r3
 80011f0:	0019      	movs	r1, r3
 80011f2:	f000 fbb3 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 80011f6:	0021      	movs	r1, r4
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	187a      	adds	r2, r7, r1
 80011fc:	8812      	ldrh	r2, [r2, #0]
 80011fe:	3202      	adds	r2, #2
 8001200:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8001202:	197b      	adds	r3, r7, r5
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b2d8      	uxtb	r0, r3
 8001208:	000c      	movs	r4, r1
 800120a:	187b      	adds	r3, r7, r1
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	18d3      	adds	r3, r2, r3
 8001212:	0019      	movs	r1, r3
 8001214:	f000 fba2 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 8001218:	0020      	movs	r0, r4
 800121a:	183b      	adds	r3, r7, r0
 800121c:	183a      	adds	r2, r7, r0
 800121e:	8812      	ldrh	r2, [r2, #0]
 8001220:	3202      	adds	r2, #2
 8001222:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8001224:	183b      	adds	r3, r7, r0
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	183a      	adds	r2, r7, r0
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	8011      	strh	r1, [r2, #0]
 800122e:	001a      	movs	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	189b      	adds	r3, r3, r2
 8001234:	2203      	movs	r2, #3
 8001236:	701a      	strb	r2, [r3, #0]

    return index;
 8001238:	183b      	adds	r3, r7, r0
 800123a:	881b      	ldrh	r3, [r3, #0]
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b005      	add	sp, #20
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	0000ffff 	.word	0x0000ffff

08001248 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	230a      	movs	r3, #10
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	1c0a      	adds	r2, r1, #0
 8001258:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d005      	beq.n	800126e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8001262:	4bbd      	ldr	r3, [pc, #756]	; (8001558 <astronode_decode_answer_transport+0x310>)
 8001264:	0018      	movs	r0, r3
 8001266:	f001 f905 	bl	8002474 <send_debug_logs>
        return RS_FAILURE;
 800126a:	2300      	movs	r3, #0
 800126c:	e170      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800126e:	210a      	movs	r1, #10
 8001270:	187b      	adds	r3, r7, r1
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	2201      	movs	r2, #1
 8001276:	4013      	ands	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <astronode_decode_answer_transport+0x3e>
 800127e:	187b      	adds	r3, r7, r1
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d805      	bhi.n	8001292 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8001286:	4bb5      	ldr	r3, [pc, #724]	; (800155c <astronode_decode_answer_transport+0x314>)
 8001288:	0018      	movs	r0, r3
 800128a:	f001 f8f3 	bl	8002474 <send_debug_logs>
        return RS_FAILURE;
 800128e:	2300      	movs	r3, #0
 8001290:	e15e      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8001292:	230a      	movs	r3, #10
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	3b08      	subs	r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	da00      	bge.n	80012a0 <astronode_decode_answer_transport+0x58>
 800129e:	3301      	adds	r3, #1
 80012a0:	105b      	asrs	r3, r3, #1
 80012a2:	b299      	uxth	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	22c4      	movs	r2, #196	; 0xc4
 80012a8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80012aa:	230a      	movs	r3, #10
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d005      	beq.n	80012c8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80012bc:	4ba8      	ldr	r3, [pc, #672]	; (8001560 <astronode_decode_answer_transport+0x318>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f001 f8d8 	bl	8002474 <send_debug_logs>
        return RS_FAILURE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e143      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80012c8:	2117      	movs	r1, #23
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80012d0:	2416      	movs	r4, #22
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	187a      	adds	r2, r7, r1
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff fee2 	bl	80010ac <ascii_to_value>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	2301      	movs	r3, #1
 80012ee:	4053      	eors	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10e      	bne.n	8001314 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3302      	adds	r3, #2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	193a      	adds	r2, r7, r4
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff fed3 	bl	80010ac <ascii_to_value>
 8001306:	0003      	movs	r3, r0
 8001308:	001a      	movs	r2, r3
 800130a:	2301      	movs	r3, #1
 800130c:	4053      	eors	r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001314:	4b93      	ldr	r3, [pc, #588]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001316:	0018      	movs	r0, r3
 8001318:	f001 f8ac 	bl	8002474 <send_debug_logs>
        return RS_FAILURE;
 800131c:	2300      	movs	r3, #0
 800131e:	e117      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8001320:	2317      	movs	r3, #23
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	b2da      	uxtb	r2, r3
 800132a:	2316      	movs	r3, #22
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001338:	231e      	movs	r3, #30
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2203      	movs	r2, #3
 800133e:	801a      	strh	r2, [r3, #0]
 8001340:	231c      	movs	r3, #28
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2200      	movs	r2, #0
 8001346:	801a      	strh	r2, [r3, #0]
 8001348:	e045      	b.n	80013d6 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800134a:	241e      	movs	r4, #30
 800134c:	193b      	adds	r3, r7, r4
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	18d3      	adds	r3, r2, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2217      	movs	r2, #23
 8001358:	18ba      	adds	r2, r7, r2
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fea5 	bl	80010ac <ascii_to_value>
 8001362:	0003      	movs	r3, r0
 8001364:	001a      	movs	r2, r3
 8001366:	2301      	movs	r3, #1
 8001368:	4053      	eors	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d112      	bne.n	8001396 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8001370:	193b      	adds	r3, r7, r4
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2216      	movs	r2, #22
 800137e:	18ba      	adds	r2, r7, r2
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fe92 	bl	80010ac <ascii_to_value>
 8001388:	0003      	movs	r3, r0
 800138a:	001a      	movs	r2, r3
 800138c:	2301      	movs	r3, #1
 800138e:	4053      	eors	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001398:	0018      	movs	r0, r3
 800139a:	f001 f86b 	bl	8002474 <send_debug_logs>
            return RS_FAILURE;
 800139e:	2300      	movs	r3, #0
 80013a0:	e0d6      	b.n	8001550 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80013a2:	2317      	movs	r3, #23
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b2d9      	uxtb	r1, r3
 80013ac:	2316      	movs	r3, #22
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	201c      	movs	r0, #28
 80013b4:	183b      	adds	r3, r7, r0
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	1838      	adds	r0, r7, r0
 80013ba:	1c5c      	adds	r4, r3, #1
 80013bc:	8004      	strh	r4, [r0, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	188b      	adds	r3, r1, r2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	181b      	adds	r3, r3, r0
 80013c8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80013ca:	221e      	movs	r2, #30
 80013cc:	18bb      	adds	r3, r7, r2
 80013ce:	18ba      	adds	r2, r7, r2
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	3202      	adds	r2, #2
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	231e      	movs	r3, #30
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	260a      	movs	r6, #10
 80013de:	19bb      	adds	r3, r7, r6
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	3b05      	subs	r3, #5
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbb0      	blt.n	800134a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	251a      	movs	r5, #26
 80013ec:	197c      	adds	r4, r7, r5
 80013ee:	4a5e      	ldr	r2, [pc, #376]	; (8001568 <astronode_decode_answer_transport+0x320>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 f91e 	bl	8001634 <calculate_crc>
 80013f8:	0003      	movs	r3, r0
 80013fa:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1c58      	adds	r0, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	22c4      	movs	r2, #196	; 0xc4
 8001404:	5a99      	ldrh	r1, [r3, r2]
 8001406:	197c      	adds	r4, r7, r5
 8001408:	197b      	adds	r3, r7, r5
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	001a      	movs	r2, r3
 800140e:	f000 f911 	bl	8001634 <calculate_crc>
 8001412:	0003      	movs	r3, r0
 8001414:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8001416:	197b      	adds	r3, r7, r5
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	0029      	movs	r1, r5
 8001420:	197b      	adds	r3, r7, r5
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	187b      	adds	r3, r7, r1
 8001430:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8001432:	19bb      	adds	r3, r7, r6
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	3b05      	subs	r3, #5
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2217      	movs	r2, #23
 8001440:	18ba      	adds	r2, r7, r2
 8001442:	0011      	movs	r1, r2
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff fe31 	bl	80010ac <ascii_to_value>
 800144a:	0003      	movs	r3, r0
 800144c:	001a      	movs	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	4053      	eors	r3, r2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d112      	bne.n	800147e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8001458:	19bb      	adds	r3, r7, r6
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	3b04      	subs	r3, #4
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	18d3      	adds	r3, r2, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2216      	movs	r2, #22
 8001466:	18ba      	adds	r2, r7, r2
 8001468:	0011      	movs	r1, r2
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff fe1e 	bl	80010ac <ascii_to_value>
 8001470:	0003      	movs	r3, r0
 8001472:	001a      	movs	r2, r3
 8001474:	2301      	movs	r3, #1
 8001476:	4053      	eors	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001480:	0018      	movs	r0, r3
 8001482:	f000 fff7 	bl	8002474 <send_debug_logs>
        return RS_FAILURE;
 8001486:	2300      	movs	r3, #0
 8001488:	e062      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800148a:	2017      	movs	r0, #23
 800148c:	183b      	adds	r3, r7, r0
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	b299      	uxth	r1, r3
 8001496:	2416      	movs	r4, #22
 8001498:	193b      	adds	r3, r7, r4
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	2318      	movs	r3, #24
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	188a      	adds	r2, r1, r2
 80014a8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80014aa:	250a      	movs	r5, #10
 80014ac:	197b      	adds	r3, r7, r5
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	183a      	adds	r2, r7, r0
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fdf5 	bl	80010ac <ascii_to_value>
 80014c2:	0003      	movs	r3, r0
 80014c4:	001a      	movs	r2, r3
 80014c6:	2301      	movs	r3, #1
 80014c8:	4053      	eors	r3, r2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d111      	bne.n	80014f4 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80014d0:	197b      	adds	r3, r7, r5
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	3b02      	subs	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	193a      	adds	r2, r7, r4
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fde3 	bl	80010ac <ascii_to_value>
 80014e6:	0003      	movs	r3, r0
 80014e8:	001a      	movs	r2, r3
 80014ea:	2301      	movs	r3, #1
 80014ec:	4053      	eors	r3, r2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 ffbc 	bl	8002474 <send_debug_logs>
        return RS_FAILURE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e027      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	b29a      	uxth	r2, r3
 800150c:	2316      	movs	r3, #22
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	18d3      	adds	r3, r2, r3
 8001516:	b299      	uxth	r1, r3
 8001518:	2018      	movs	r0, #24
 800151a:	183b      	adds	r3, r7, r0
 800151c:	183a      	adds	r2, r7, r0
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	188a      	adds	r2, r1, r2
 8001522:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8001524:	183a      	adds	r2, r7, r0
 8001526:	231a      	movs	r3, #26
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d005      	beq.n	800153e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <astronode_decode_answer_transport+0x324>)
 8001534:	0018      	movs	r0, r3
 8001536:	f000 ff9d 	bl	8002474 <send_debug_logs>
        return RS_FAILURE;
 800153a:	2300      	movs	r3, #0
 800153c:	e008      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d103      	bne.n	800154e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f8c3 	bl	80016d4 <check_for_error>
    }

    return RS_SUCCESS;
 800154e:	2301      	movs	r3, #1
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b009      	add	sp, #36	; 0x24
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001558:	08008560 	.word	0x08008560
 800155c:	080085b0 	.word	0x080085b0
 8001560:	08008600 	.word	0x08008600
 8001564:	08008650 	.word	0x08008650
 8001568:	0000ffff 	.word	0x0000ffff
 800156c:	0800869c 	.word	0x0800869c

08001570 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	4c2b      	ldr	r4, [pc, #172]	; (8001620 <astronode_transport_send_receive+0xb0>)
 8001574:	44a5      	add	sp, r4
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <astronode_transport_send_receive+0xb4>)
 800157e:	25ca      	movs	r5, #202	; 0xca
 8001580:	00ad      	lsls	r5, r5, #2
 8001582:	195b      	adds	r3, r3, r5
 8001584:	19db      	adds	r3, r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	22c4      	movs	r2, #196	; 0xc4
 800158e:	0052      	lsls	r2, r2, #1
 8001590:	2100      	movs	r1, #0
 8001592:	0018      	movs	r0, r3
 8001594:	f005 fb52 	bl	8006c3c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <astronode_transport_send_receive+0xb8>)
 800159a:	195b      	adds	r3, r3, r5
 800159c:	19db      	adds	r3, r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	3304      	adds	r3, #4
 80015a4:	22c4      	movs	r2, #196	; 0xc4
 80015a6:	0052      	lsls	r2, r2, #1
 80015a8:	2100      	movs	r1, #0
 80015aa:	0018      	movs	r0, r3
 80015ac:	f005 fb46 	bl	8006c3c <memset>
    uint16_t answer_length =  0;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <astronode_transport_send_receive+0xbc>)
 80015b2:	195b      	adds	r3, r3, r5
 80015b4:	19db      	adds	r3, r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80015ba:	4e1d      	ldr	r6, [pc, #116]	; (8001630 <astronode_transport_send_receive+0xc0>)
 80015bc:	19bc      	adds	r4, r7, r6
 80015be:	23cc      	movs	r3, #204	; 0xcc
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	18fa      	adds	r2, r7, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff fd9b 	bl	8001104 <astronode_create_request_transport>
 80015ce:	0003      	movs	r3, r0
 80015d0:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80015d2:	19bb      	adds	r3, r7, r6
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	23cc      	movs	r3, #204	; 0xcc
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	0011      	movs	r1, r2
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 ff92 	bl	8002508 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80015e4:	230a      	movs	r3, #10
 80015e6:	18fa      	adds	r2, r7, r3
 80015e8:	240c      	movs	r4, #12
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	0011      	movs	r1, r2
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 f92c 	bl	800184c <receive_astronode_answer>
 80015f4:	0003      	movs	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10a      	bne.n	8001610 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <astronode_transport_send_receive+0xbc>)
 80015fc:	195b      	adds	r3, r3, r5
 80015fe:	19db      	adds	r3, r3, r7
 8001600:	8819      	ldrh	r1, [r3, #0]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	193b      	adds	r3, r7, r4
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fe1e 	bl	8001248 <astronode_decode_answer_transport>
 800160c:	0003      	movs	r3, r0
 800160e:	e000      	b.n	8001612 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8001610:	2300      	movs	r3, #0
    }
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	23cb      	movs	r3, #203	; 0xcb
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	449d      	add	sp, r3
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	fffffcd4 	.word	0xfffffcd4
 8001624:	fffffe70 	.word	0xfffffe70
 8001628:	fffffce4 	.word	0xfffffce4
 800162c:	fffffce2 	.word	0xfffffce2
 8001630:	00000326 	.word	0x00000326

08001634 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	0008      	movs	r0, r1
 800163e:	0011      	movs	r1, r2
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	1c02      	adds	r2, r0, #0
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	003b      	movs	r3, r7
 8001648:	1c0a      	adds	r2, r1, #0
 800164a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800164c:	230e      	movs	r3, #14
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	003a      	movs	r2, r7
 8001652:	8812      	ldrh	r2, [r2, #0]
 8001654:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8001656:	e02e      	b.n	80016b6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8001658:	240e      	movs	r4, #14
 800165a:	193b      	adds	r3, r7, r4
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b299      	uxth	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b29a      	uxth	r2, r3
 800166c:	200c      	movs	r0, #12
 800166e:	183b      	adds	r3, r7, r0
 8001670:	404a      	eors	r2, r1
 8001672:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8001674:	183b      	adds	r3, r7, r0
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	b299      	uxth	r1, r3
 800167c:	183b      	adds	r3, r7, r0
 800167e:	183a      	adds	r2, r7, r0
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	404a      	eors	r2, r1
 8001684:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8001686:	0021      	movs	r1, r4
 8001688:	187b      	adds	r3, r7, r1
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	183b      	adds	r3, r7, r0
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	031b      	lsls	r3, r3, #12
 8001696:	b21b      	sxth	r3, r3
 8001698:	4053      	eors	r3, r2
 800169a:	b21a      	sxth	r2, r3
 800169c:	183b      	adds	r3, r7, r0
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4053      	eors	r3, r2
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	2000      	movs	r0, #0
 80016ac:	5e1b      	ldrsh	r3, [r3, r0]
 80016ae:	4053      	eors	r3, r2
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	1cba      	adds	r2, r7, #2
 80016bc:	1e59      	subs	r1, r3, #1
 80016be:	8011      	strh	r1, [r2, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1c9      	bne.n	8001658 <calculate_crc+0x24>
    }
    return crc;
 80016c4:	230e      	movs	r3, #14
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	881b      	ldrh	r3, [r3, #0]
}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b005      	add	sp, #20
 80016d0:	bd90      	pop	{r4, r7, pc}
	...

080016d4 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	b299      	uxth	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	200e      	movs	r0, #14
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	188a      	adds	r2, r1, r2
 80016f2:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80016f4:	183b      	adds	r3, r7, r0
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	4a40      	ldr	r2, [pc, #256]	; (80017fc <check_for_error+0x128>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d100      	bne.n	8001700 <check_for_error+0x2c>
 80016fe:	e06f      	b.n	80017e0 <check_for_error+0x10c>
 8001700:	4a3e      	ldr	r2, [pc, #248]	; (80017fc <check_for_error+0x128>)
 8001702:	4293      	cmp	r3, r2
 8001704:	dd00      	ble.n	8001708 <check_for_error+0x34>
 8001706:	e070      	b.n	80017ea <check_for_error+0x116>
 8001708:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <check_for_error+0x12c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d100      	bne.n	8001710 <check_for_error+0x3c>
 800170e:	e062      	b.n	80017d6 <check_for_error+0x102>
 8001710:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <check_for_error+0x12c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	dd00      	ble.n	8001718 <check_for_error+0x44>
 8001716:	e068      	b.n	80017ea <check_for_error+0x116>
 8001718:	4a3a      	ldr	r2, [pc, #232]	; (8001804 <check_for_error+0x130>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d056      	beq.n	80017cc <check_for_error+0xf8>
 800171e:	4a39      	ldr	r2, [pc, #228]	; (8001804 <check_for_error+0x130>)
 8001720:	4293      	cmp	r3, r2
 8001722:	dd00      	ble.n	8001726 <check_for_error+0x52>
 8001724:	e061      	b.n	80017ea <check_for_error+0x116>
 8001726:	4a38      	ldr	r2, [pc, #224]	; (8001808 <check_for_error+0x134>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04a      	beq.n	80017c2 <check_for_error+0xee>
 800172c:	4a36      	ldr	r2, [pc, #216]	; (8001808 <check_for_error+0x134>)
 800172e:	4293      	cmp	r3, r2
 8001730:	dc5b      	bgt.n	80017ea <check_for_error+0x116>
 8001732:	4a36      	ldr	r2, [pc, #216]	; (800180c <check_for_error+0x138>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d03f      	beq.n	80017b8 <check_for_error+0xe4>
 8001738:	4a34      	ldr	r2, [pc, #208]	; (800180c <check_for_error+0x138>)
 800173a:	4293      	cmp	r3, r2
 800173c:	dc55      	bgt.n	80017ea <check_for_error+0x116>
 800173e:	4a34      	ldr	r2, [pc, #208]	; (8001810 <check_for_error+0x13c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d034      	beq.n	80017ae <check_for_error+0xda>
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <check_for_error+0x13c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	dc4f      	bgt.n	80017ea <check_for_error+0x116>
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <check_for_error+0x140>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d029      	beq.n	80017a4 <check_for_error+0xd0>
 8001750:	4a30      	ldr	r2, [pc, #192]	; (8001814 <check_for_error+0x140>)
 8001752:	4293      	cmp	r3, r2
 8001754:	dc49      	bgt.n	80017ea <check_for_error+0x116>
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <check_for_error+0x144>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d01e      	beq.n	800179a <check_for_error+0xc6>
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <check_for_error+0x144>)
 800175e:	4293      	cmp	r3, r2
 8001760:	dc43      	bgt.n	80017ea <check_for_error+0x116>
 8001762:	2222      	movs	r2, #34	; 0x22
 8001764:	32ff      	adds	r2, #255	; 0xff
 8001766:	4293      	cmp	r3, r2
 8001768:	d012      	beq.n	8001790 <check_for_error+0xbc>
 800176a:	2291      	movs	r2, #145	; 0x91
 800176c:	0052      	lsls	r2, r2, #1
 800176e:	4293      	cmp	r3, r2
 8001770:	da3b      	bge.n	80017ea <check_for_error+0x116>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d002      	beq.n	800177c <check_for_error+0xa8>
 8001776:	2b11      	cmp	r3, #17
 8001778:	d005      	beq.n	8001786 <check_for_error+0xb2>
 800177a:	e036      	b.n	80017ea <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <check_for_error+0x148>)
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fe78 	bl	8002474 <send_debug_logs>
            break;
 8001784:	e036      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <check_for_error+0x14c>)
 8001788:	0018      	movs	r0, r3
 800178a:	f000 fe73 	bl	8002474 <send_debug_logs>
            break;
 800178e:	e031      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <check_for_error+0x150>)
 8001792:	0018      	movs	r0, r3
 8001794:	f000 fe6e 	bl	8002474 <send_debug_logs>
            break;
 8001798:	e02c      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <check_for_error+0x154>)
 800179c:	0018      	movs	r0, r3
 800179e:	f000 fe69 	bl	8002474 <send_debug_logs>
            break;
 80017a2:	e027      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <check_for_error+0x158>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 fe64 	bl	8002474 <send_debug_logs>
            break;
 80017ac:	e022      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <check_for_error+0x15c>)
 80017b0:	0018      	movs	r0, r3
 80017b2:	f000 fe5f 	bl	8002474 <send_debug_logs>
            break;
 80017b6:	e01d      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <check_for_error+0x160>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 fe5a 	bl	8002474 <send_debug_logs>
            break;
 80017c0:	e018      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <check_for_error+0x164>)
 80017c4:	0018      	movs	r0, r3
 80017c6:	f000 fe55 	bl	8002474 <send_debug_logs>
            break;
 80017ca:	e013      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <check_for_error+0x168>)
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 fe50 	bl	8002474 <send_debug_logs>
            break;
 80017d4:	e00e      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <check_for_error+0x16c>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fe4b 	bl	8002474 <send_debug_logs>
            break;
 80017de:	e009      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <check_for_error+0x170>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fe46 	bl	8002474 <send_debug_logs>
            break;
 80017e8:	e004      	b.n	80017f4 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <check_for_error+0x174>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 fe41 	bl	8002474 <send_debug_logs>
            break;
 80017f2:	46c0      	nop			; (mov r8, r8)
    }
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b004      	add	sp, #16
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	00004601 	.word	0x00004601
 8001800:	00004501 	.word	0x00004501
 8001804:	00003501 	.word	0x00003501
 8001808:	00002601 	.word	0x00002601
 800180c:	00002511 	.word	0x00002511
 8001810:	00002501 	.word	0x00002501
 8001814:	00000611 	.word	0x00000611
 8001818:	00000601 	.word	0x00000601
 800181c:	080086e0 	.word	0x080086e0
 8001820:	0800872c 	.word	0x0800872c
 8001824:	08008790 	.word	0x08008790
 8001828:	080087c8 	.word	0x080087c8
 800182c:	0800886c 	.word	0x0800886c
 8001830:	080088d4 	.word	0x080088d4
 8001834:	08008934 	.word	0x08008934
 8001838:	080089c0 	.word	0x080089c0
 800183c:	08008a20 	.word	0x08008a20
 8001840:	08008acc 	.word	0x08008acc
 8001844:	08008b18 	.word	0x08008b18
 8001848:	08008b60 	.word	0x08008b60

0800184c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8001856:	230f      	movs	r3, #15
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800185e:	2316      	movs	r3, #22
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2200      	movs	r2, #0
 8001864:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8001866:	f000 fe6d 	bl	8002544 <get_systick>
 800186a:	0003      	movs	r3, r0
 800186c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800186e:	2315      	movs	r3, #21
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8001876:	e054      	b.n	8001922 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8001878:	4a34      	ldr	r2, [pc, #208]	; (800194c <receive_astronode_answer+0x100>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f000 fe68 	bl	8002554 <is_systick_timeout_over>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d005      	beq.n	8001894 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <receive_astronode_answer+0x104>)
 800188a:	0018      	movs	r0, r3
 800188c:	f000 fdf2 	bl	8002474 <send_debug_logs>
            return RS_FAILURE;
 8001890:	2300      	movs	r3, #0
 8001892:	e057      	b.n	8001944 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8001894:	250f      	movs	r5, #15
 8001896:	197b      	adds	r3, r7, r5
 8001898:	0018      	movs	r0, r3
 800189a:	f000 fe71 	bl	8002580 <is_astronode_character_received>
 800189e:	0003      	movs	r3, r0
 80018a0:	0019      	movs	r1, r3
 80018a2:	2016      	movs	r0, #22
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	183a      	adds	r2, r7, r0
 80018a8:	8812      	ldrh	r2, [r2, #0]
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	2415      	movs	r4, #21
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	193a      	adds	r2, r7, r4
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	2900      	cmp	r1, #0
 80018b8:	d033      	beq.n	8001922 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80018ba:	197b      	adds	r3, r7, r5
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d105      	bne.n	80018ce <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
                length = 0;
 80018c8:	183b      	adds	r3, r7, r0
 80018ca:	2200      	movs	r2, #0
 80018cc:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80018ce:	2116      	movs	r1, #22
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	18d3      	adds	r3, r2, r3
 80018d8:	220f      	movs	r2, #15
 80018da:	18ba      	adds	r2, r7, r2
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	701a      	strb	r2, [r3, #0]
            length++;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	3201      	adds	r2, #1
 80018e8:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2bb2      	cmp	r3, #178	; 0xb2
 80018f0:	d905      	bls.n	80018fe <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <receive_astronode_answer+0x108>)
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 fdbd 	bl	8002474 <send_debug_logs>
                return RS_FAILURE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e022      	b.n	8001944 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80018fe:	230f      	movs	r3, #15
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d10c      	bne.n	8001922 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8001908:	2216      	movs	r2, #22
 800190a:	18bb      	adds	r3, r7, r2
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d907      	bls.n	8001922 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	18ba      	adds	r2, r7, r2
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800191a:	2315      	movs	r3, #21
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8001922:	2315      	movs	r3, #21
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4053      	eors	r3, r2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1a2      	bne.n	8001878 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <receive_astronode_answer+0x10c>)
 8001934:	0018      	movs	r0, r3
 8001936:	f000 fd9d 	bl	8002474 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0018      	movs	r0, r3
 800193e:	f000 fd99 	bl	8002474 <send_debug_logs>

    return RS_SUCCESS;
 8001942:	2301      	movs	r3, #1
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	000005dc 	.word	0x000005dc
 8001950:	08008b84 	.word	0x08008b84
 8001954:	08008ba8 	.word	0x08008ba8
 8001958:	08008bf4 	.word	0x08008bf4

0800195c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	0002      	movs	r2, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	b2db      	uxtb	r3, r3
 8001972:	001a      	movs	r2, r3
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <uint8_to_ascii_buffer+0x3c>)
 8001976:	5c9a      	ldrb	r2, [r3, r2]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800197c:	1dfb      	adds	r3, r7, #7
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	220f      	movs	r2, #15
 8001982:	401a      	ands	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <uint8_to_ascii_buffer+0x3c>)
 800198a:	5c8a      	ldrb	r2, [r1, r2]
 800198c:	701a      	strb	r2, [r3, #0]
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	08008dc8 	.word	0x08008dc8

0800199c <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	0008      	movs	r0, r1
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	0019      	movs	r1, r3
 80019aa:	230b      	movs	r3, #11
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	1c02      	adds	r2, r0, #0
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	2308      	movs	r3, #8
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	1c0a      	adds	r2, r1, #0
 80019b8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <iis2dh_read_reg+0x2a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	425b      	negs	r3, r3
 80019c4:	e00f      	b.n	80019e6 <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685c      	ldr	r4, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	68d8      	ldr	r0, [r3, #12]
 80019ce:	2308      	movs	r3, #8
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	881d      	ldrh	r5, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	230b      	movs	r3, #11
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	7819      	ldrb	r1, [r3, #0]
 80019dc:	002b      	movs	r3, r5
 80019de:	47a0      	blx	r4
 80019e0:	0003      	movs	r3, r0
 80019e2:	617b      	str	r3, [r7, #20]

  return ret;
 80019e4:	697b      	ldr	r3, [r7, #20]
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b006      	add	sp, #24
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}

080019ee <iis2dh_write_reg>:
  *
  */
int32_t __weak iis2dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80019ee:	b5b0      	push	{r4, r5, r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	0008      	movs	r0, r1
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	0019      	movs	r1, r3
 80019fc:	230b      	movs	r3, #11
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	1c02      	adds	r2, r0, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	2308      	movs	r3, #8
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	1c0a      	adds	r2, r1, #0
 8001a0a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <iis2dh_write_reg+0x2a>
 8001a12:	2301      	movs	r3, #1
 8001a14:	425b      	negs	r3, r3
 8001a16:	e00f      	b.n	8001a38 <iis2dh_write_reg+0x4a>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68d8      	ldr	r0, [r3, #12]
 8001a20:	2308      	movs	r3, #8
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	881d      	ldrh	r5, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	230b      	movs	r3, #11
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	7819      	ldrb	r1, [r3, #0]
 8001a2e:	002b      	movs	r3, r5
 8001a30:	47a0      	blx	r4
 8001a32:	0003      	movs	r3, r0
 8001a34:	617b      	str	r3, [r7, #20]

  return ret;
 8001a36:	697b      	ldr	r3, [r7, #20]
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}

08001a40 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	000a      	movs	r2, r1
 8001a4a:	1cfb      	adds	r3, r7, #3
 8001a4c:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001a4e:	2310      	movs	r3, #16
 8001a50:	18fa      	adds	r2, r7, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	2301      	movs	r3, #1
 8001a56:	2120      	movs	r1, #32
 8001a58:	f7ff ffa0 	bl	800199c <iis2dh_read_reg>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <iis2dh_operating_mode_set+0x38>
  {
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001a66:	230c      	movs	r3, #12
 8001a68:	18fa      	adds	r2, r7, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	2123      	movs	r1, #35	; 0x23
 8001a70:	f7ff ff94 	bl	800199c <iis2dh_read_reg>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d138      	bne.n	8001af0 <iis2dh_operating_mode_set+0xb0>
  {
    if (val == IIS2DH_HR_12bit)
 8001a7e:	1cfb      	adds	r3, r7, #3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10b      	bne.n	8001a9e <iis2dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8001a86:	2310      	movs	r3, #16
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	438a      	bics	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8001a92:	230c      	movs	r3, #12
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	2108      	movs	r1, #8
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_NM_10bit)
 8001a9e:	1cfb      	adds	r3, r7, #3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10b      	bne.n	8001abe <iis2dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	2108      	movs	r1, #8
 8001aae:	438a      	bics	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	2108      	movs	r1, #8
 8001aba:	438a      	bics	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_LP_8bit)
 8001abe:	1cfb      	adds	r3, r7, #3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d10b      	bne.n	8001ade <iis2dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	2108      	movs	r1, #8
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	2108      	movs	r1, #8
 8001ada:	438a      	bics	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001ade:	2310      	movs	r3, #16
 8001ae0:	18fa      	adds	r2, r7, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	f7ff ff81 	bl	80019ee <iis2dh_write_reg>
 8001aec:	0003      	movs	r3, r0
 8001aee:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <iis2dh_operating_mode_set+0xc8>
  {
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001af6:	230c      	movs	r3, #12
 8001af8:	18fa      	adds	r2, r7, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	2301      	movs	r3, #1
 8001afe:	2123      	movs	r1, #35	; 0x23
 8001b00:	f7ff ff75 	bl	80019ee <iis2dh_write_reg>
 8001b04:	0003      	movs	r3, r0
 8001b06:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001b08:	697b      	ldr	r3, [r7, #20]
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b006      	add	sp, #24
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(const stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 8001b12:	b590      	push	{r4, r7, lr}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	1cfb      	adds	r3, r7, #3
 8001b1e:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b20:	2408      	movs	r4, #8
 8001b22:	193a      	adds	r2, r7, r4
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2120      	movs	r1, #32
 8001b2a:	f7ff ff37 	bl	800199c <iis2dh_read_reg>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d115      	bne.n	8001b64 <iis2dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8001b38:	1cfb      	adds	r3, r7, #3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	4013      	ands	r3, r2
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	0110      	lsls	r0, r2, #4
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	210f      	movs	r1, #15
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	1c11      	adds	r1, r2, #0
 8001b4e:	1c02      	adds	r2, r0, #0
 8001b50:	430a      	orrs	r2, r1
 8001b52:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b54:	193a      	adds	r2, r7, r4
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	f7ff ff47 	bl	80019ee <iis2dh_write_reg>
 8001b60:	0003      	movs	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b64:	68fb      	ldr	r3, [r7, #12]
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b005      	add	sp, #20
 8001b6c:	bd90      	pop	{r4, r7, pc}

08001b6e <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(const stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 8001b6e:	b590      	push	{r4, r7, lr}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	000a      	movs	r2, r1
 8001b78:	1cfb      	adds	r3, r7, #3
 8001b7a:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001b7c:	2408      	movs	r4, #8
 8001b7e:	193a      	adds	r2, r7, r4
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	2301      	movs	r3, #1
 8001b84:	2123      	movs	r1, #35	; 0x23
 8001b86:	f7ff ff09 	bl	800199c <iis2dh_read_reg>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d117      	bne.n	8001bc4 <iis2dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001b94:	1cfb      	adds	r3, r7, #3
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	0110      	lsls	r0, r2, #4
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	2130      	movs	r1, #48	; 0x30
 8001baa:	438a      	bics	r2, r1
 8001bac:	1c11      	adds	r1, r2, #0
 8001bae:	1c02      	adds	r2, r0, #0
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001bb4:	193a      	adds	r2, r7, r4
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2123      	movs	r1, #35	; 0x23
 8001bbc:	f7ff ff17 	bl	80019ee <iis2dh_write_reg>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b005      	add	sp, #20
 8001bcc:	bd90      	pop	{r4, r7, pc}

08001bce <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	210f      	movs	r1, #15
 8001be0:	f7ff fedc 	bl	800199c <iis2dh_read_reg>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]

  return ret;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <iis2dh_fifo_mode_set>:
  * @param  val      change the values of fm in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_fifo_mode_set(const stmdev_ctx_t *ctx, iis2dh_fm_t val)
{
 8001bf2:	b590      	push	{r4, r7, lr}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	000a      	movs	r2, r1
 8001bfc:	1cfb      	adds	r3, r7, #3
 8001bfe:	701a      	strb	r2, [r3, #0]
  iis2dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_FIFO_CTRL_REG,
 8001c00:	2408      	movs	r4, #8
 8001c02:	193a      	adds	r2, r7, r4
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	2301      	movs	r3, #1
 8001c08:	212e      	movs	r1, #46	; 0x2e
 8001c0a:	f7ff fec7 	bl	800199c <iis2dh_read_reg>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d115      	bne.n	8001c44 <iis2dh_fifo_mode_set+0x52>
  {
    fifo_ctrl_reg.fm = (uint8_t)val;
 8001c18:	1cfb      	adds	r3, r7, #3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	0190      	lsls	r0, r2, #6
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	213f      	movs	r1, #63	; 0x3f
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	1c11      	adds	r1, r2, #0
 8001c2e:	1c02      	adds	r2, r0, #0
 8001c30:	430a      	orrs	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_FIFO_CTRL_REG,
 8001c34:	193a      	adds	r2, r7, r4
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	212e      	movs	r1, #46	; 0x2e
 8001c3c:	f7ff fed7 	bl	80019ee <iis2dh_write_reg>
 8001c40:	0003      	movs	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 8001c44:	68fb      	ldr	r3, [r7, #12]
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b005      	add	sp, #20
 8001c4c:	bd90      	pop	{r4, r7, pc}
	...

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c54:	f000 ffcc 	bl	8002bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c58:	f000 f83c 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5c:	f000 fa48 	bl	80020f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c60:	f000 f8fa 	bl	8001e58 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c64:	f000 f974 	bl	8001f50 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c68:	f000 f9c0 	bl	8001fec <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001c6c:	f000 f932 	bl	8001ed4 <MX_TIM6_Init>
  MX_RTC_Init();
 8001c70:	f000 f886 	bl	8001d80 <MX_RTC_Init>
  MX_USART5_UART_Init();
 8001c74:	f000 fa08 	bl	8002088 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( "Hello ULP Test" ) ;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <main+0x78>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 fbfa 	bl	8002474 <send_debug_logs>
  sys_init () ;
 8001c80:	f000 fcf4 	bl	800266c <sys_init>

  HAL_Delay ( 5000 ) ;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <main+0x7c>)
 8001c86:	0018      	movs	r0, r3
 8001c88:	f001 f838 	bl	8002cfc <HAL_Delay>
  //HAL_UART_DeInit ( &huart2 ) ;
  //HAL_UART_DeInit ( &huart3 ) ;
  //HAL_Delay ( 1000 ) ;
  //HAL_PWREx_EnterSHUTDOWNMode () ;

  gnss_sw_off () ;
 8001c8c:	f000 fbd6 	bl	800243c <gnss_sw_off>
  //my_astro_deinit () ;
  __HAL_RCC_GPIOC_CLK_DISABLE () ;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <main+0x80>)
 8001c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <main+0x80>)
 8001c96:	2104      	movs	r1, #4
 8001c98:	438a      	bics	r2, r1
 8001c9a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_DISABLE () ;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <main+0x80>)
 8001c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <main+0x80>)
 8001ca2:	2108      	movs	r1, #8
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOF_CLK_DISABLE () ;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <main+0x80>)
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <main+0x80>)
 8001cae:	2120      	movs	r1, #32
 8001cb0:	438a      	bics	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_SuspendTick () ;
 8001cb4:	f001 f846 	bl	8002d44 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	01db      	lsls	r3, r3, #7
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f001 fba4 	bl	800340c <HAL_PWR_EnterSTOPMode>
  //HAL_ResumeTick () ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <main+0x74>
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	08008c20 	.word	0x08008c20
 8001ccc:	00001388 	.word	0x00001388
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b095      	sub	sp, #84	; 0x54
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	2414      	movs	r4, #20
 8001cdc:	193b      	adds	r3, r7, r4
 8001cde:	0018      	movs	r0, r3
 8001ce0:	233c      	movs	r3, #60	; 0x3c
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f004 ffa9 	bl	8006c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	0018      	movs	r0, r3
 8001cee:	2310      	movs	r3, #16
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	f004 ffa2 	bl	8006c3c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f001 fbbd 	bl	800347c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d02:	f001 fb75 	bl	80033f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <SystemClock_Config+0xa8>)
 8001d08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <SystemClock_Config+0xa8>)
 8001d0c:	2118      	movs	r1, #24
 8001d0e:	438a      	bics	r2, r1
 8001d10:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	2206      	movs	r2, #6
 8001d16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	0052      	lsls	r2, r2, #1
 8001d24:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d2c:	193b      	adds	r3, r7, r4
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d32:	193b      	adds	r3, r7, r4
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f001 fbea 	bl	8003514 <HAL_RCC_OscConfig>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001d44:	f000 fc9b 	bl	800267e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2100      	movs	r1, #0
 8001d64:	0018      	movs	r0, r3
 8001d66:	f001 ff35 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8001d6a:	1e03      	subs	r3, r0, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d6e:	f000 fc86 	bl	800267e <Error_Handler>
  }
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b015      	add	sp, #84	; 0x54
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40021000 	.word	0x40021000

08001d80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	0018      	movs	r0, r3
 8001d8a:	2314      	movs	r3, #20
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f004 ff54 	bl	8006c3c <memset>
  RTC_DateTypeDef sDate = {0};
 8001d94:	003b      	movs	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001d9c:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <MX_RTC_Init+0xd4>)
 8001d9e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001da8:	227f      	movs	r2, #127	; 0x7f
 8001daa:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001dae:	22ff      	movs	r2, #255	; 0xff
 8001db0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001db2:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	05d2      	lsls	r2, r2, #23
 8001dca:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f002 fae3 	bl	80043a0 <HAL_RTC_Init>
 8001dda:	1e03      	subs	r3, r0, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001dde:	f000 fc4e 	bl	800267e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2200      	movs	r2, #0
 8001dec:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e06:	1d39      	adds	r1, r7, #4
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f002 fb69 	bl	80044e4 <HAL_RTC_SetTime>
 8001e12:	1e03      	subs	r3, r0, #0
 8001e14:	d001      	beq.n	8001e1a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001e16:	f000 fc32 	bl	800267e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e1a:	003b      	movs	r3, r7
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e20:	003b      	movs	r3, r7
 8001e22:	2201      	movs	r2, #1
 8001e24:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001e26:	003b      	movs	r3, r7
 8001e28:	2201      	movs	r2, #1
 8001e2a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001e2c:	003b      	movs	r3, r7
 8001e2e:	2200      	movs	r2, #0
 8001e30:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e32:	0039      	movs	r1, r7
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_RTC_Init+0xd0>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f002 fbfb 	bl	8004634 <HAL_RTC_SetDate>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d001      	beq.n	8001e46 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001e42:	f000 fc1c 	bl	800267e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b006      	add	sp, #24
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	2000007c 	.word	0x2000007c
 8001e54:	40002800 	.word	0x40002800

08001e58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <MX_SPI1_Init+0x78>)
 8001e60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e64:	2282      	movs	r2, #130	; 0x82
 8001e66:	0052      	lsls	r2, r2, #1
 8001e68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e72:	22e0      	movs	r2, #224	; 0xe0
 8001e74:	00d2      	lsls	r2, r2, #3
 8001e76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <MX_SPI1_Init+0x74>)
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f002 fd21 	bl	8004900 <HAL_SPI_Init>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ec2:	f000 fbdc 	bl	800267e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200000a8 	.word	0x200000a8
 8001ed0:	40013000 	.word	0x40013000

08001ed4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	0018      	movs	r0, r3
 8001ede:	230c      	movs	r3, #12
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f004 feaa 	bl	8006c3c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_TIM6_Init+0x6c>)
 8001eea:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <MX_TIM6_Init+0x70>)
 8001eec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <MX_TIM6_Init+0x6c>)
 8001ef0:	4a15      	ldr	r2, [pc, #84]	; (8001f48 <MX_TIM6_Init+0x74>)
 8001ef2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_TIM6_Init+0x6c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_TIM6_Init+0x6c>)
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <MX_TIM6_Init+0x78>)
 8001efe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_TIM6_Init+0x6c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_TIM6_Init+0x6c>)
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f003 fc19 	bl	8005740 <HAL_TIM_Base_Init>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001f12:	f000 fbb4 	bl	800267e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f22:	1d3a      	adds	r2, r7, #4
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_TIM6_Init+0x6c>)
 8001f26:	0011      	movs	r1, r2
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f003 fcf9 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	1e03      	subs	r3, r0, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001f32:	f000 fba4 	bl	800267e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b004      	add	sp, #16
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	2000010c 	.word	0x2000010c
 8001f44:	40001000 	.word	0x40001000
 8001f48:	00003e7f 	.word	0x00003e7f
 8001f4c:	000003e7 	.word	0x000003e7

08001f50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f56:	4a24      	ldr	r2, [pc, #144]	; (8001fe8 <MX_USART2_UART_Init+0x98>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f5c:	22e1      	movs	r2, #225	; 0xe1
 8001f5e:	0252      	lsls	r2, r2, #9
 8001f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f003 fd36 	bl	8005a0c <HAL_UART_Init>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fa4:	f000 fb6b 	bl	800267e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001faa:	2100      	movs	r1, #0
 8001fac:	0018      	movs	r0, r3
 8001fae:	f004 fd11 	bl	80069d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fb6:	f000 fb62 	bl	800267e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f004 fd48 	bl	8006a54 <HAL_UARTEx_SetRxFifoThreshold>
 8001fc4:	1e03      	subs	r3, r0, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001fc8:	f000 fb59 	bl	800267e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <MX_USART2_UART_Init+0x94>)
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f004 fcc6 	bl	8006960 <HAL_UARTEx_DisableFifoMode>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001fd8:	f000 fb51 	bl	800267e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	20000158 	.word	0x20000158
 8001fe8:	40004400 	.word	0x40004400

08001fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8001ff2:	4a24      	ldr	r2, [pc, #144]	; (8002084 <MX_USART3_UART_Init+0x98>)
 8001ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8001ff8:	2296      	movs	r2, #150	; 0x96
 8001ffa:	0192      	lsls	r2, r2, #6
 8001ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_USART3_UART_Init+0x94>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_USART3_UART_Init+0x94>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <MX_USART3_UART_Init+0x94>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002036:	0018      	movs	r0, r3
 8002038:	f003 fce8 	bl	8005a0c <HAL_UART_Init>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d001      	beq.n	8002044 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002040:	f000 fb1d 	bl	800267e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002046:	2100      	movs	r1, #0
 8002048:	0018      	movs	r0, r3
 800204a:	f004 fcc3 	bl	80069d4 <HAL_UARTEx_SetTxFifoThreshold>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d001      	beq.n	8002056 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002052:	f000 fb14 	bl	800267e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_USART3_UART_Init+0x94>)
 8002058:	2100      	movs	r1, #0
 800205a:	0018      	movs	r0, r3
 800205c:	f004 fcfa 	bl	8006a54 <HAL_UARTEx_SetRxFifoThreshold>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d001      	beq.n	8002068 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002064:	f000 fb0b 	bl	800267e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <MX_USART3_UART_Init+0x94>)
 800206a:	0018      	movs	r0, r3
 800206c:	f004 fc78 	bl	8006960 <HAL_UARTEx_DisableFifoMode>
 8002070:	1e03      	subs	r3, r0, #0
 8002072:	d001      	beq.n	8002078 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002074:	f000 fb03 	bl	800267e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	200001ec 	.word	0x200001ec
 8002084:	40004800 	.word	0x40004800

08002088 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 800208e:	4a17      	ldr	r2, [pc, #92]	; (80020ec <MX_USART5_UART_Init+0x64>)
 8002090:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 8002094:	2296      	movs	r2, #150	; 0x96
 8002096:	0192      	lsls	r2, r2, #6
 8002098:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <MX_USART5_UART_Init+0x60>)
 80020d2:	0018      	movs	r0, r3
 80020d4:	f003 fc9a 	bl	8005a0c <HAL_UART_Init>
 80020d8:	1e03      	subs	r3, r0, #0
 80020da:	d001      	beq.n	80020e0 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80020dc:	f000 facf 	bl	800267e <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	20000280 	.word	0x20000280
 80020ec:	40005000 	.word	0x40005000

080020f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b08b      	sub	sp, #44	; 0x2c
 80020f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	2414      	movs	r4, #20
 80020f8:	193b      	adds	r3, r7, r4
 80020fa:	0018      	movs	r0, r3
 80020fc:	2314      	movs	r3, #20
 80020fe:	001a      	movs	r2, r3
 8002100:	2100      	movs	r1, #0
 8002102:	f004 fd9b 	bl	8006c3c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002106:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <MX_GPIO_Init+0x1cc>)
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <MX_GPIO_Init+0x1cc>)
 800210c:	2104      	movs	r1, #4
 800210e:	430a      	orrs	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <MX_GPIO_Init+0x1cc>)
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	2204      	movs	r2, #4
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <MX_GPIO_Init+0x1cc>)
 8002120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002122:	4b66      	ldr	r3, [pc, #408]	; (80022bc <MX_GPIO_Init+0x1cc>)
 8002124:	2101      	movs	r1, #1
 8002126:	430a      	orrs	r2, r1
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
 800212a:	4b64      	ldr	r3, [pc, #400]	; (80022bc <MX_GPIO_Init+0x1cc>)
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212e:	2201      	movs	r2, #1
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b61      	ldr	r3, [pc, #388]	; (80022bc <MX_GPIO_Init+0x1cc>)
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	4b60      	ldr	r3, [pc, #384]	; (80022bc <MX_GPIO_Init+0x1cc>)
 800213c:	2102      	movs	r1, #2
 800213e:	430a      	orrs	r2, r1
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
 8002142:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <MX_GPIO_Init+0x1cc>)
 8002144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <MX_GPIO_Init+0x1cc>)
 8002150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002152:	4b5a      	ldr	r3, [pc, #360]	; (80022bc <MX_GPIO_Init+0x1cc>)
 8002154:	2108      	movs	r1, #8
 8002156:	430a      	orrs	r2, r1
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <MX_GPIO_Init+0x1cc>)
 800215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215e:	2208      	movs	r2, #8
 8002160:	4013      	ands	r3, r2
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 8002166:	23a0      	movs	r3, #160	; 0xa0
 8002168:	05db      	lsls	r3, r3, #23
 800216a:	2200      	movs	r2, #0
 800216c:	2110      	movs	r1, #16
 800216e:	0018      	movs	r0, r3
 8002170:	f001 f921 	bl	80033b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL1_Pin|RF_SW_CTL2_Pin
 8002174:	4952      	ldr	r1, [pc, #328]	; (80022c0 <MX_GPIO_Init+0x1d0>)
 8002176:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <MX_GPIO_Init+0x1d4>)
 8002178:	2200      	movs	r2, #0
 800217a:	0018      	movs	r0, r3
 800217c:	f001 f91b 	bl	80033b6 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, GPIO_PIN_SET);
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	019b      	lsls	r3, r3, #6
 8002184:	484f      	ldr	r0, [pc, #316]	; (80022c4 <MX_GPIO_Init+0x1d4>)
 8002186:	2201      	movs	r2, #1
 8002188:	0019      	movs	r1, r3
 800218a:	f001 f914 	bl	80033b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|LDB_Pin, GPIO_PIN_RESET);
 800218e:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <MX_GPIO_Init+0x1d8>)
 8002190:	2200      	movs	r2, #0
 8002192:	2103      	movs	r1, #3
 8002194:	0018      	movs	r0, r3
 8002196:	f001 f90e 	bl	80033b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT_Pin;
 800219a:	193b      	adds	r3, r7, r4
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	2288      	movs	r2, #136	; 0x88
 80021a4:	0352      	lsls	r2, r2, #13
 80021a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	193b      	adds	r3, r7, r4
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT_GPIO_Port, &GPIO_InitStruct);
 80021ae:	193a      	adds	r2, r7, r4
 80021b0:	23a0      	movs	r3, #160	; 0xa0
 80021b2:	05db      	lsls	r3, r3, #23
 80021b4:	0011      	movs	r1, r2
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 fe9c 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_INT2_Pin ALS_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin|ALS_Pin;
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	2281      	movs	r2, #129	; 0x81
 80021c0:	0052      	lsls	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	2200      	movs	r2, #0
 80021c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	193a      	adds	r2, r7, r4
 80021d2:	23a0      	movs	r3, #160	; 0xa0
 80021d4:	05db      	lsls	r3, r3, #23
 80021d6:	0011      	movs	r1, r2
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 fe8b 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	2210      	movs	r2, #16
 80021e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e4:	193b      	adds	r3, r7, r4
 80021e6:	2201      	movs	r2, #1
 80021e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 80021f6:	193a      	adds	r2, r7, r4
 80021f8:	23a0      	movs	r3, #160	; 0xa0
 80021fa:	05db      	lsls	r3, r3, #23
 80021fc:	0011      	movs	r1, r2
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fe78 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL1_Pin RF_SW_CTL2_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL1_Pin|RF_SW_CTL2_Pin
 8002204:	193b      	adds	r3, r7, r4
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <MX_GPIO_Init+0x1d0>)
 8002208:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220a:	193b      	adds	r3, r7, r4
 800220c:	2201      	movs	r2, #1
 800220e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	193b      	adds	r3, r7, r4
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221c:	193b      	adds	r3, r7, r4
 800221e:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <MX_GPIO_Init+0x1d4>)
 8002220:	0019      	movs	r1, r3
 8002222:	0010      	movs	r0, r2
 8002224:	f000 fe66 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin ASTRO_ANT_USE_Pin GNSS_FIX3D_Pin GNSS_JAM_Pin
                           GNSS_GEOF_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|ASTRO_ANT_USE_Pin|GNSS_FIX3D_Pin|GNSS_JAM_Pin
 8002228:	193b      	adds	r3, r7, r4
 800222a:	4a28      	ldr	r2, [pc, #160]	; (80022cc <MX_GPIO_Init+0x1dc>)
 800222c:	601a      	str	r2, [r3, #0]
                          |GNSS_GEOF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	2200      	movs	r2, #0
 8002232:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	193b      	adds	r3, r7, r4
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	193b      	adds	r3, r7, r4
 800223c:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <MX_GPIO_Init+0x1d4>)
 800223e:	0019      	movs	r1, r3
 8002240:	0010      	movs	r0, r2
 8002242:	f000 fe57 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002246:	0021      	movs	r1, r4
 8002248:	187b      	adds	r3, r7, r1
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	0192      	lsls	r2, r2, #6
 800224e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002250:	000c      	movs	r4, r1
 8002252:	193b      	adds	r3, r7, r4
 8002254:	2211      	movs	r2, #17
 8002256:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	193b      	adds	r3, r7, r4
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	193b      	adds	r3, r7, r4
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002264:	193b      	adds	r3, r7, r4
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <MX_GPIO_Init+0x1d4>)
 8002268:	0019      	movs	r1, r3
 800226a:	0010      	movs	r0, r2
 800226c:	f000 fe42 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 LDB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LDB_Pin;
 8002270:	193b      	adds	r3, r7, r4
 8002272:	2203      	movs	r2, #3
 8002274:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	193b      	adds	r3, r7, r4
 8002278:	2201      	movs	r2, #1
 800227a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	193b      	adds	r3, r7, r4
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002288:	193b      	adds	r3, r7, r4
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <MX_GPIO_Init+0x1d8>)
 800228c:	0019      	movs	r1, r3
 800228e:	0010      	movs	r0, r2
 8002290:	f000 fe30 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 SW2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SW2_Pin;
 8002294:	0021      	movs	r1, r4
 8002296:	187b      	adds	r3, r7, r1
 8002298:	220c      	movs	r2, #12
 800229a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	187b      	adds	r3, r7, r1
 800229e:	2200      	movs	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <MX_GPIO_Init+0x1d8>)
 80022ac:	0019      	movs	r1, r3
 80022ae:	0010      	movs	r0, r2
 80022b0:	f000 fe20 	bl	8002ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b00b      	add	sp, #44	; 0x2c
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	00008c03 	.word	0x00008c03
 80022c4:	50000400 	.word	0x50000400
 80022c8:	50000c00 	.word	0x50000c00
 80022cc:	000040e4 	.word	0x000040e4

080022d0 <acc_init>:

/* USER CODE BEGIN 4 */

void acc_init ( void )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
	uint8_t id = 0 ;
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]

	my_acc_ctx.write_reg = my_st_acc_platform_write ;
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <acc_init+0x70>)
 80022de:	4a19      	ldr	r2, [pc, #100]	; (8002344 <acc_init+0x74>)
 80022e0:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_st_acc_platform_read ;
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <acc_init+0x70>)
 80022e4:	4a18      	ldr	r2, [pc, #96]	; (8002348 <acc_init+0x78>)
 80022e6:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <acc_init+0x70>)
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <acc_init+0x7c>)
 80022ec:	60da      	str	r2, [r3, #12]

	iis2dh_device_id_get ( &my_acc_ctx , &id ) ;
 80022ee:	1dfa      	adds	r2, r7, #7
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <acc_init+0x70>)
 80022f2:	0011      	movs	r1, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7ff fc6a 	bl	8001bce <iis2dh_device_id_get>
	sprintf ( dbg_payload , "IIS2DH_ID id = %u, my_acc_id = %u" , 0x33U , (uint16_t) id ) ;
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4914      	ldr	r1, [pc, #80]	; (8002350 <acc_init+0x80>)
 8002300:	4814      	ldr	r0, [pc, #80]	; (8002354 <acc_init+0x84>)
 8002302:	2233      	movs	r2, #51	; 0x33
 8002304:	f004 fc7a 	bl	8006bfc <siprintf>
	send_debug_logs ( dbg_payload ) ;
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <acc_init+0x84>)
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f8b2 	bl	8002474 <send_debug_logs>

	//  Configuration: 2g, LP and 25Hz gives 4 uA of ACC power consumption
	iis2dh_full_scale_set ( &my_acc_ctx , IIS2DH_2g ) ; // FS bits [ 2 g - 16 g ]
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <acc_init+0x70>)
 8002312:	2100      	movs	r1, #0
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff fc2a 	bl	8001b6e <iis2dh_full_scale_set>
	iis2dh_operating_mode_set ( &my_acc_ctx , IIS2DH_LP_8bit ) ; // [ High Resolution , Normal Mode , Low Power]
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <acc_init+0x70>)
 800231c:	2102      	movs	r1, #2
 800231e:	0018      	movs	r0, r3
 8002320:	f7ff fb8e 	bl	8001a40 <iis2dh_operating_mode_set>
	iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_ODR_10Hz ) ; // Below 25Hz it will be hard to calculate free-fall
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <acc_init+0x70>)
 8002326:	2102      	movs	r1, #2
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff fbf2 	bl	8001b12 <iis2dh_data_rate_set>
	//iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_POWER_DOWN ) ; // Below 25Hz it will be hard to calculate free-fall
	iis2dh_fifo_mode_set ( &my_acc_ctx , IIS2DH_FIFO_MODE ) ; // FIFO mode allows consistent power saving for the system, since the host processor does not need to	continuously poll data from the sensor, but it can wake up only when needed and burst the significant data out from the FIFO.
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <acc_init+0x70>)
 8002330:	2101      	movs	r1, #1
 8002332:	0018      	movs	r0, r3
 8002334:	f7ff fc5d 	bl	8001bf2 <iis2dh_fifo_mode_set>
	//iis2dh_int1_pin_notification_mode_set ( &my_acc_ctx , IIS2DH_INT2_LATCHED ) ;
	//iis2dh_int2_pin_notification_mode_set ( &my_acc_ctx , IIS2DH_INT2_LATCHED ) ;

	// The IIS2DH may also be configured to generate an inertial wake-up and free-fall interrupt signal according to a programmed acceleration event along the enabled axes. Both free-fall and wake-up can be available simultaneously on two different pins.

}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000410 	.word	0x20000410
 8002344:	08002359 	.word	0x08002359
 8002348:	080023c3 	.word	0x080023c3
 800234c:	200000a8 	.word	0x200000a8
 8002350:	08008c30 	.word	0x08008c30
 8002354:	20000314 	.word	0x20000314

08002358 <my_st_acc_platform_write>:
// ACC LL Function
int32_t my_st_acc_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	0008      	movs	r0, r1
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	0019      	movs	r1, r3
 8002366:	240b      	movs	r4, #11
 8002368:	193b      	adds	r3, r7, r4
 800236a:	1c02      	adds	r2, r0, #0
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	2508      	movs	r5, #8
 8002370:	197b      	adds	r3, r7, r5
 8002372:	1c0a      	adds	r2, r1, #0
 8002374:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_RESET ) ;
 8002376:	23a0      	movs	r3, #160	; 0xa0
 8002378:	05db      	lsls	r3, r3, #23
 800237a:	2200      	movs	r2, #0
 800237c:	2110      	movs	r1, #16
 800237e:	0018      	movs	r0, r3
 8002380:	f001 f819 	bl	80033b6 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8002384:	2014      	movs	r0, #20
 8002386:	f000 fcb9 	bl	8002cfc <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 800238a:	23fa      	movs	r3, #250	; 0xfa
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	1939      	adds	r1, r7, r4
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f002 fb6c 	bl	8004a70 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8002398:	23fa      	movs	r3, #250	; 0xfa
 800239a:	009c      	lsls	r4, r3, #2
 800239c:	197b      	adds	r3, r7, r5
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	0023      	movs	r3, r4
 80023a6:	f002 fb63 	bl	8004a70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_SET) ;
 80023aa:	23a0      	movs	r3, #160	; 0xa0
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	2201      	movs	r2, #1
 80023b0:	2110      	movs	r1, #16
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 ffff 	bl	80033b6 <HAL_GPIO_WritePin>

	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bdb0      	pop	{r4, r5, r7, pc}

080023c2 <my_st_acc_platform_read>:

int32_t my_st_acc_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 80023c2:	b5b0      	push	{r4, r5, r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	0008      	movs	r0, r1
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	0019      	movs	r1, r3
 80023d0:	240b      	movs	r4, #11
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	1c02      	adds	r2, r0, #0
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	2508      	movs	r5, #8
 80023da:	197b      	adds	r3, r7, r5
 80023dc:	1c0a      	adds	r2, r1, #0
 80023de:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 80023e0:	193b      	adds	r3, r7, r4
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	4252      	negs	r2, r2
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	193b      	adds	r3, r7, r4
 80023ee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_RESET) ;
 80023f0:	23a0      	movs	r3, #160	; 0xa0
 80023f2:	05db      	lsls	r3, r3, #23
 80023f4:	2200      	movs	r2, #0
 80023f6:	2110      	movs	r1, #16
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 ffdc 	bl	80033b6 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80023fe:	2014      	movs	r0, #20
 8002400:	f000 fc7c 	bl	8002cfc <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8002404:	23fa      	movs	r3, #250	; 0xfa
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	1939      	adds	r1, r7, r4
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f002 fb2f 	bl	8004a70 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8002412:	23fa      	movs	r3, #250	; 0xfa
 8002414:	009c      	lsls	r4, r3, #2
 8002416:	197b      	adds	r3, r7, r5
 8002418:	881a      	ldrh	r2, [r3, #0]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	0023      	movs	r3, r4
 8002420:	f002 fc86 	bl	8004d30 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_SET) ;
 8002424:	23a0      	movs	r3, #160	; 0xa0
 8002426:	05db      	lsls	r3, r3, #23
 8002428:	2201      	movs	r2, #1
 800242a:	2110      	movs	r1, #16
 800242c:	0018      	movs	r0, r3
 800242e:	f000 ffc2 	bl	80033b6 <HAL_GPIO_WritePin>

	return 0;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b004      	add	sp, #16
 800243a:	bdb0      	pop	{r4, r5, r7, pc}

0800243c <gnss_sw_off>:
void gnss_init ( void )
{
	HAL_GPIO_WritePin ( GNSS_RST_GPIO_Port , GNSS_RST_Pin, GPIO_PIN_SET ) ;
}
void gnss_sw_off ( void )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	4809      	ldr	r0, [pc, #36]	; (800246c <gnss_sw_off+0x30>)
 8002446:	2200      	movs	r2, #0
 8002448:	0019      	movs	r1, r3
 800244a:	f000 ffb4 	bl	80033b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_RST_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	019b      	lsls	r3, r3, #6
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <gnss_sw_off+0x30>)
 8002454:	2200      	movs	r2, #0
 8002456:	0019      	movs	r1, r3
 8002458:	f000 ffad 	bl	80033b6 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( &huart5 ) ;
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <gnss_sw_off+0x34>)
 800245e:	0018      	movs	r0, r3
 8002460:	f003 fb2a 	bl	8005ab8 <HAL_UART_DeInit>
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	50000400 	.word	0x50000400
 8002470:	20000280 	.word	0x20000280

08002474 <send_debug_logs>:
// ASTRO
void send_debug_logs ( char* p_tx_buffer )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f7fd fe40 	bl	8000104 <strlen>
 8002484:	0003      	movs	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]

    if ( length > 250 )
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2bfa      	cmp	r3, #250	; 0xfa
 800248c:	d908      	bls.n	80024a0 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &huart2 , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800248e:	23fa      	movs	r3, #250	; 0xfa
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	490d      	ldr	r1, [pc, #52]	; (80024c8 <send_debug_logs+0x54>)
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <send_debug_logs+0x58>)
 8002496:	222a      	movs	r2, #42	; 0x2a
 8002498:	f003 fb4e 	bl	8005b38 <HAL_UART_Transmit>
        length = 250 ;
 800249c:	23fa      	movs	r3, #250	; 0xfa
 800249e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &huart2 , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	23fa      	movs	r3, #250	; 0xfa
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4808      	ldr	r0, [pc, #32]	; (80024cc <send_debug_logs+0x58>)
 80024ac:	f003 fb44 	bl	8005b38 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &huart2 , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80024b0:	23fa      	movs	r3, #250	; 0xfa
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4906      	ldr	r1, [pc, #24]	; (80024d0 <send_debug_logs+0x5c>)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <send_debug_logs+0x58>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	f003 fb3d 	bl	8005b38 <HAL_UART_Transmit>
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b004      	add	sp, #16
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	08008c54 	.word	0x08008c54
 80024cc:	20000158 	.word	0x20000158
 80024d0:	08008c80 	.word	0x08008c80

080024d4 <my_astronode_reset>:
void my_astronode_reset ( void )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <my_astronode_reset+0x30>)
 80024da:	2201      	movs	r2, #1
 80024dc:	2102      	movs	r1, #2
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 ff69 	bl	80033b6 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80024e4:	2001      	movs	r0, #1
 80024e6:	f000 fc09 	bl	8002cfc <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <my_astronode_reset+0x30>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	2102      	movs	r1, #2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 ff60 	bl	80033b6 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80024f6:	20fa      	movs	r0, #250	; 0xfa
 80024f8:	f000 fc00 	bl	8002cfc <HAL_Delay>
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	50000400 	.word	0x50000400

08002508 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <send_astronode_request+0x34>)
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff ffad 	bl	8002474 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff ffa9 	bl	8002474 <send_debug_logs>
    HAL_UART_Transmit ( &huart3 , p_tx_buffer , length , 1000 ) ;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b29a      	uxth	r2, r3
 8002526:	23fa      	movs	r3, #250	; 0xfa
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4804      	ldr	r0, [pc, #16]	; (8002540 <send_astronode_request+0x38>)
 800252e:	f003 fb03 	bl	8005b38 <HAL_UART_Transmit>
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	08008c84 	.word	0x08008c84
 8002540:	200001ec 	.word	0x200001ec

08002544 <get_systick>:
uint32_t get_systick ( void )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002548:	f000 fbce 	bl	8002ce8 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	000a      	movs	r2, r1
 800255e:	1cbb      	adds	r3, r7, #2
 8002560:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002562:	f7ff ffef 	bl	8002544 <get_systick>
 8002566:	0002      	movs	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	1cba      	adds	r2, r7, #2
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	419b      	sbcs	r3, r3
 8002574:	425b      	negs	r3, r3
 8002576:	b2db      	uxtb	r3, r3
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &huart3 , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <is_astronode_character_received+0x24>)
 800258c:	2364      	movs	r3, #100	; 0x64
 800258e:	2201      	movs	r2, #1
 8002590:	f003 fb76 	bl	8005c80 <HAL_UART_Receive>
 8002594:	0003      	movs	r3, r0
 8002596:	425a      	negs	r2, r3
 8002598:	4153      	adcs	r3, r2
 800259a:	b2db      	uxtb	r3, r3
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200001ec 	.word	0x200001ec

080025a8 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <my_astro_evt_pin+0x20>)
 80025ae:	2104      	movs	r1, #4
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 fee3 	bl	800337c <HAL_GPIO_ReadPin>
 80025b6:	0003      	movs	r3, r0
 80025b8:	3b01      	subs	r3, #1
 80025ba:	425a      	negs	r2, r3
 80025bc:	4153      	adcs	r3, r2
 80025be:	b2db      	uxtb	r3, r3
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	50000400 	.word	0x50000400

080025cc <my_astro_init>:
void my_astro_init ( void )
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80025d2:	1dfb      	adds	r3, r7, #7
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 80025d8:	e012      	b.n	8002600 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 80025da:	f7ff ff7b 	bl	80024d4 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80025de:	1dfc      	adds	r4, r7, #7
 80025e0:	2300      	movs	r3, #0
 80025e2:	9303      	str	r3, [sp, #12]
 80025e4:	2301      	movs	r3, #1
 80025e6:	9302      	str	r3, [sp, #8]
 80025e8:	2301      	movs	r3, #1
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	2301      	movs	r3, #1
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2300      	movs	r3, #0
 80025f2:	2201      	movs	r2, #1
 80025f4:	2101      	movs	r1, #1
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7fe f85a 	bl	80006b0 <astronode_send_cfg_wr>
 80025fc:	0003      	movs	r3, r0
 80025fe:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	4053      	eors	r3, r2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e5      	bne.n	80025da <my_astro_init+0xe>
	}

	if ( cfg_wr )
 800260e:	1dfb      	adds	r3, r7, #7
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <my_astro_init+0x7c>
	{
		astronode_send_rtc_rr () ;
 8002616:	f7fe fb47 	bl	8000ca8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800261a:	f7fe f811 	bl	8000640 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800261e:	f7fe fc3d 	bl	8000e9c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8002622:	f7fe f99b 	bl	800095c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8002626:	f7fe f8ef 	bl	8000808 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ; // The module's entire payload queue can be cleared with the Payload Free Request PLD_FR.
 800262a:	f7fe fac1 	bl	8000bb0 <astronode_send_pld_fr>
	}
	while ( my_astro_evt_pin () )
 800262e:	e00b      	b.n	8002648 <my_astro_init+0x7c>
  {
	  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <my_astro_init+0x90>)
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <my_astro_init+0x94>)
 8002634:	490b      	ldr	r1, [pc, #44]	; (8002664 <my_astro_init+0x98>)
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <my_astro_init+0x9c>)
 8002638:	f004 fae0 	bl	8006bfc <siprintf>
	  send_debug_logs ( dbg_payload ) ;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <my_astro_init+0x9c>)
 800263e:	0018      	movs	r0, r3
 8002640:	f7ff ff18 	bl	8002474 <send_debug_logs>
	  my_astro_handle_evt () ;
 8002644:	f000 f820 	bl	8002688 <my_astro_handle_evt>
	while ( my_astro_evt_pin () )
 8002648:	f7ff ffae 	bl	80025a8 <my_astro_evt_pin>
 800264c:	1e03      	subs	r3, r0, #0
 800264e:	d1ef      	bne.n	8002630 <my_astro_init+0x64>
  }
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b003      	add	sp, #12
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	000002c3 	.word	0x000002c3
 8002660:	08008ca8 	.word	0x08008ca8
 8002664:	08008cbc 	.word	0x08008cbc
 8002668:	20000314 	.word	0x20000314

0800266c <sys_init>:
	HAL_UART_DeInit ( &huart3 ) ;
}


void sys_init ( void )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	acc_init () ;
 8002670:	f7ff fe2e 	bl	80022d0 <acc_init>
	my_astro_init () ;
 8002674:	f7ff ffaa 	bl	80025cc <my_astro_init>
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002682:	b672      	cpsid	i
}
 8002684:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002686:	e7fe      	b.n	8002686 <Error_Handler+0x8>

08002688 <my_astro_handle_evt>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_handle_evt ( void )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <my_astro_handle_evt+0x58>)
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff fef0 	bl	8002474 <send_debug_logs>
	astronode_send_evt_rr () ;
 8002694:	f7fe fa0c 	bl	8000ab0 <astronode_send_evt_rr>
	if (is_sak_available () )
 8002698:	f7fe fcea 	bl	8001070 <is_sak_available>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d007      	beq.n	80026b0 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 80026a0:	f7fe fb66 	bl	8000d70 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 80026a4:	f7fe fbba 	bl	8000e1c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <my_astro_handle_evt+0x5c>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7ff fee2 	bl	8002474 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 80026b0:	f7fe fce8 	bl	8001084 <is_astronode_reset>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d005      	beq.n	80026c4 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <my_astro_handle_evt+0x60>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff feda 	bl	8002474 <send_debug_logs>
	  astronode_send_res_cr () ;
 80026c0:	f7fe fab2 	bl	8000c28 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80026c4:	f7fe fce8 	bl	8001098 <is_command_available>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d005      	beq.n	80026d8 <my_astro_handle_evt+0x50>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <my_astro_handle_evt+0x64>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff fed0 	bl	8002474 <send_debug_logs>
	  astronode_send_cmd_cr () ;
 80026d4:	f7fe fc8c 	bl	8000ff0 <astronode_send_cmd_cr>
	}
	return true ;
 80026d8:	2301      	movs	r3, #1
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	08008cd4 	.word	0x08008cd4
 80026e4:	08008d08 	.word	0x08008d08
 80026e8:	08008d4c 	.word	0x08008d4c
 80026ec:	08008d88 	.word	0x08008d88

080026f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_MspInit+0x4c>)
 80026f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_MspInit+0x4c>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	430a      	orrs	r2, r1
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_MspInit+0x4c>)
 8002710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_MspInit+0x4c>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0549      	lsls	r1, r1, #21
 8002718:	430a      	orrs	r2, r1
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_MspInit+0x4c>)
 800271e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	4013      	ands	r3, r2
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800272a:	23c0      	movs	r3, #192	; 0xc0
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	0018      	movs	r0, r3
 8002730:	f000 fb16 	bl	8002d60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000

08002740 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b097      	sub	sp, #92	; 0x5c
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002748:	240c      	movs	r4, #12
 800274a:	193b      	adds	r3, r7, r4
 800274c:	0018      	movs	r0, r3
 800274e:	234c      	movs	r3, #76	; 0x4c
 8002750:	001a      	movs	r2, r3
 8002752:	2100      	movs	r1, #0
 8002754:	f004 fa72 	bl	8006c3c <memset>
  if(hrtc->Instance==RTC)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <HAL_RTC_MspInit+0x74>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d124      	bne.n	80027ac <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002762:	193b      	adds	r3, r7, r4
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	0292      	lsls	r2, r2, #10
 8002768:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800276a:	193b      	adds	r3, r7, r4
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	0052      	lsls	r2, r2, #1
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002772:	193b      	adds	r3, r7, r4
 8002774:	0018      	movs	r0, r3
 8002776:	f001 fbd7 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d001      	beq.n	8002782 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800277e:	f7ff ff7e 	bl	800267e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RTC_MspInit+0x78>)
 8002784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_RTC_MspInit+0x78>)
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	0209      	lsls	r1, r1, #8
 800278c:	430a      	orrs	r2, r1
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RTC_MspInit+0x78>)
 8002792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_RTC_MspInit+0x78>)
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	00c9      	lsls	r1, r1, #3
 800279a:	430a      	orrs	r2, r1
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RTC_MspInit+0x78>)
 80027a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4013      	ands	r3, r2
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b017      	add	sp, #92	; 0x5c
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	40002800 	.word	0x40002800
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b08b      	sub	sp, #44	; 0x2c
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	2414      	movs	r4, #20
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	0018      	movs	r0, r3
 80027ca:	2314      	movs	r3, #20
 80027cc:	001a      	movs	r2, r3
 80027ce:	2100      	movs	r1, #0
 80027d0:	f004 fa34 	bl	8006c3c <memset>
  if(hspi->Instance==SPI1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <HAL_SPI_MspInit+0x8c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d130      	bne.n	8002840 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_SPI_MspInit+0x90>)
 80027e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_SPI_MspInit+0x90>)
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	0149      	lsls	r1, r1, #5
 80027e8:	430a      	orrs	r2, r1
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_SPI_MspInit+0x90>)
 80027ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	015b      	lsls	r3, r3, #5
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_SPI_MspInit+0x90>)
 80027fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_SPI_MspInit+0x90>)
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_SPI_MspInit+0x90>)
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2201      	movs	r2, #1
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SCK_Pin|ACC_MISO_Pin|ACC_MOSI_Pin;
 8002812:	0021      	movs	r1, r4
 8002814:	187b      	adds	r3, r7, r1
 8002816:	22e0      	movs	r2, #224	; 0xe0
 8002818:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2202      	movs	r2, #2
 800281e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	187a      	adds	r2, r7, r1
 8002834:	23a0      	movs	r3, #160	; 0xa0
 8002836:	05db      	lsls	r3, r3, #23
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fb5a 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b00b      	add	sp, #44	; 0x2c
 8002846:	bd90      	pop	{r4, r7, pc}
 8002848:	40013000 	.word	0x40013000
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_TIM_Base_MspInit+0x34>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10b      	bne.n	800287a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_TIM_Base_MspInit+0x38>)
 8002864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_TIM_Base_MspInit+0x38>)
 8002868:	2110      	movs	r1, #16
 800286a:	430a      	orrs	r2, r1
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_TIM_Base_MspInit+0x38>)
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	2210      	movs	r2, #16
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40001000 	.word	0x40001000
 8002888:	40021000 	.word	0x40021000

0800288c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b0a1      	sub	sp, #132	; 0x84
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	236c      	movs	r3, #108	; 0x6c
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	0018      	movs	r0, r3
 800289a:	2314      	movs	r3, #20
 800289c:	001a      	movs	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	f004 f9cc 	bl	8006c3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a4:	2420      	movs	r4, #32
 80028a6:	193b      	adds	r3, r7, r4
 80028a8:	0018      	movs	r0, r3
 80028aa:	234c      	movs	r3, #76	; 0x4c
 80028ac:	001a      	movs	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f004 f9c4 	bl	8006c3c <memset>
  if(huart->Instance==USART2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <HAL_UART_MspInit+0x1b0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d13f      	bne.n	800293e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028be:	193b      	adds	r3, r7, r4
 80028c0:	2202      	movs	r2, #2
 80028c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	0018      	movs	r0, r3
 80028ce:	f001 fb2b 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d001      	beq.n	80028da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028d6:	f7ff fed2 	bl	800267e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028da:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80028dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028de:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	0289      	lsls	r1, r1, #10
 80028e4:	430a      	orrs	r2, r1
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028e8:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80028ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	029b      	lsls	r3, r3, #10
 80028f0:	4013      	ands	r3, r2
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	4b52      	ldr	r3, [pc, #328]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80028f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
 8002902:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	2201      	movs	r2, #1
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 800290e:	216c      	movs	r1, #108	; 0x6c
 8002910:	187b      	adds	r3, r7, r1
 8002912:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <HAL_UART_MspInit+0x1b8>)
 8002914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2202      	movs	r2, #2
 800291a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2201      	movs	r2, #1
 800292c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	187a      	adds	r2, r7, r1
 8002930:	23a0      	movs	r3, #160	; 0xa0
 8002932:	05db      	lsls	r3, r3, #23
 8002934:	0011      	movs	r1, r2
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fadc 	bl	8002ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800293c:	e07a      	b.n	8002a34 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a41      	ldr	r2, [pc, #260]	; (8002a48 <HAL_UART_MspInit+0x1bc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d140      	bne.n	80029ca <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002948:	2120      	movs	r1, #32
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2204      	movs	r2, #4
 800294e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002956:	187b      	adds	r3, r7, r1
 8002958:	0018      	movs	r0, r3
 800295a:	f001 fae5 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d001      	beq.n	8002966 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8002962:	f7ff fe8c 	bl	800267e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 8002968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296a:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	02c9      	lsls	r1, r1, #11
 8002970:	430a      	orrs	r2, r1
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 8002976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	02db      	lsls	r3, r3, #11
 800297c:	4013      	ands	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 8002984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 8002988:	2102      	movs	r1, #2
 800298a:	430a      	orrs	r2, r1
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	2202      	movs	r2, #2
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800299a:	216c      	movs	r1, #108	; 0x6c
 800299c:	187b      	adds	r3, r7, r1
 800299e:	22c0      	movs	r2, #192	; 0xc0
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	2202      	movs	r2, #2
 80029a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	2204      	movs	r2, #4
 80029ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <HAL_UART_MspInit+0x1c0>)
 80029c0:	0019      	movs	r1, r3
 80029c2:	0010      	movs	r0, r2
 80029c4:	f000 fa96 	bl	8002ef4 <HAL_GPIO_Init>
}
 80029c8:	e034      	b.n	8002a34 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <HAL_UART_MspInit+0x1c4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d12f      	bne.n	8002a34 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80029d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	0049      	lsls	r1, r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80029e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80029f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80029f6:	2102      	movs	r1, #2
 80029f8:	430a      	orrs	r2, r1
 80029fa:	635a      	str	r2, [r3, #52]	; 0x34
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_UART_MspInit+0x1b4>)
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8002a08:	216c      	movs	r1, #108	; 0x6c
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2218      	movs	r2, #24
 8002a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	2202      	movs	r2, #2
 8002a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2203      	movs	r2, #3
 8002a26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <HAL_UART_MspInit+0x1c0>)
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	0010      	movs	r0, r2
 8002a30:	f000 fa60 	bl	8002ef4 <HAL_GPIO_Init>
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b021      	add	sp, #132	; 0x84
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	40004400 	.word	0x40004400
 8002a40:	40021000 	.word	0x40021000
 8002a44:	00008004 	.word	0x00008004
 8002a48:	40004800 	.word	0x40004800
 8002a4c:	50000400 	.word	0x50000400
 8002a50:	40005000 	.word	0x40005000

08002a54 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <HAL_UART_MspDeInit+0x7c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10d      	bne.n	8002a82 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_UART_MspDeInit+0x80>)
 8002a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_UART_MspDeInit+0x80>)
 8002a6c:	491a      	ldr	r1, [pc, #104]	; (8002ad8 <HAL_UART_MspDeInit+0x84>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_UART_MspDeInit+0x88>)
 8002a74:	23a0      	movs	r3, #160	; 0xa0
 8002a76:	05db      	lsls	r3, r3, #23
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 fba6 	bl	80031cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8002a80:	e022      	b.n	8002ac8 <HAL_UART_MspDeInit+0x74>
  else if(huart->Instance==USART3)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_UART_MspDeInit+0x8c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_UART_MspDeInit+0x80>)
 8002a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_UART_MspDeInit+0x80>)
 8002a92:	4914      	ldr	r1, [pc, #80]	; (8002ae4 <HAL_UART_MspDeInit+0x90>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8002a98:	23c0      	movs	r3, #192	; 0xc0
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_UART_MspDeInit+0x94>)
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	f000 fb93 	bl	80031cc <HAL_GPIO_DeInit>
}
 8002aa6:	e00f      	b.n	8002ac8 <HAL_UART_MspDeInit+0x74>
  else if(huart->Instance==USART5)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <HAL_UART_MspDeInit+0x98>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART5_CLK_DISABLE();
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_UART_MspDeInit+0x80>)
 8002ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <HAL_UART_MspDeInit+0x80>)
 8002ab8:	490d      	ldr	r1, [pc, #52]	; (8002af0 <HAL_UART_MspDeInit+0x9c>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_UART_MspDeInit+0x94>)
 8002ac0:	2118      	movs	r1, #24
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 fb82 	bl	80031cc <HAL_GPIO_DeInit>
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40004400 	.word	0x40004400
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	fffdffff 	.word	0xfffdffff
 8002adc:	00008004 	.word	0x00008004
 8002ae0:	40004800 	.word	0x40004800
 8002ae4:	fffbffff 	.word	0xfffbffff
 8002ae8:	50000400 	.word	0x50000400
 8002aec:	40005000 	.word	0x40005000
 8002af0:	fffffeff 	.word	0xfffffeff

08002af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002af8:	e7fe      	b.n	8002af8 <NMI_Handler+0x4>

08002afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <HardFault_Handler+0x4>

08002b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b18:	f000 f8d4 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	18d3      	adds	r3, r2, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f004 f87a 	bl	8006c4c <__errno>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	425b      	negs	r3, r3
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	18d2      	adds	r2, r2, r3
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <_sbrk+0x64>)
 8002b74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b006      	add	sp, #24
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20024000 	.word	0x20024000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	20000420 	.word	0x20000420
 8002b8c:	20000570 	.word	0x20000570

08002b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b9c:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ba0:	f7ff fff6 	bl	8002b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba4:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ba6:	490d      	ldr	r1, [pc, #52]	; (8002bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <LoopForever+0xe>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bac:	e002      	b.n	8002bb4 <LoopCopyDataInit>

08002bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bb2:	3304      	adds	r3, #4

08002bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb8:	d3f9      	bcc.n	8002bae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bbc:	4c0a      	ldr	r4, [pc, #40]	; (8002be8 <LoopForever+0x16>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc0:	e001      	b.n	8002bc6 <LoopFillZerobss>

08002bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc4:	3204      	adds	r2, #4

08002bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc8:	d3fb      	bcc.n	8002bc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bca:	f004 f845 	bl	8006c58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002bce:	f7ff f83f 	bl	8001c50 <main>

08002bd2 <LoopForever>:

LoopForever:
  b LoopForever
 8002bd2:	e7fe      	b.n	8002bd2 <LoopForever>
  ldr   r0, =_estack
 8002bd4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bdc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002be0:	08008ea4 	.word	0x08008ea4
  ldr r2, =_sbss
 8002be4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002be8:	20000570 	.word	0x20000570

08002bec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bec:	e7fe      	b.n	8002bec <ADC1_COMP_IRQHandler>
	...

08002bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_Init+0x3c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_Init+0x3c>)
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	0049      	lsls	r1, r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f000 f810 	bl	8002c30 <HAL_InitTick>
 8002c10:	1e03      	subs	r3, r0, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e001      	b.n	8002c20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002c1c:	f7ff fd68 	bl	80026f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	781b      	ldrb	r3, [r3, #0]
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_InitTick+0x88>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d02b      	beq.n	8002ca0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_InitTick+0x8c>)
 8002c4a:	681c      	ldr	r4, [r3, #0]
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_InitTick+0x88>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	0019      	movs	r1, r3
 8002c52:	23fa      	movs	r3, #250	; 0xfa
 8002c54:	0098      	lsls	r0, r3, #2
 8002c56:	f7fd fa67 	bl	8000128 <__udivsi3>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	0020      	movs	r0, r4
 8002c60:	f7fd fa62 	bl	8000128 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f937 	bl	8002eda <HAL_SYSTICK_Config>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d112      	bne.n	8002c96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d80a      	bhi.n	8002c8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	425b      	negs	r3, r3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 f916 	bl	8002eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_InitTick+0x90>)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e00d      	b.n	8002ca8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002c8c:	230f      	movs	r3, #15
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e008      	b.n	8002ca8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c96:	230f      	movs	r3, #15
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e003      	b.n	8002ca8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002ca8:	230f      	movs	r3, #15
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	781b      	ldrb	r3, [r3, #0]
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b005      	add	sp, #20
 8002cb4:	bd90      	pop	{r4, r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_IncTick+0x1c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	001a      	movs	r2, r3
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	18d2      	adds	r2, r2, r3
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cd6:	601a      	str	r2, [r3, #0]
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	20000424 	.word	0x20000424

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <HAL_GetTick+0x10>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	20000424 	.word	0x20000424

08002cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff fff0 	bl	8002ce8 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	d005      	beq.n	8002d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_Delay+0x44>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	189b      	adds	r3, r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	f7ff ffe0 	bl	8002ce8 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d8f7      	bhi.n	8002d24 <HAL_Delay+0x28>
  {
  }
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	20000008 	.word	0x20000008

08002d44 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <HAL_SuspendTick+0x18>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_SuspendTick+0x18>)
 8002d4e:	2102      	movs	r1, #2
 8002d50:	438a      	bics	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	40010000 	.word	0x40010000
 8002d88:	fffff9ff 	.word	0xfffff9ff

08002d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	0002      	movs	r2, r0
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	1dfb      	adds	r3, r7, #7
 8002d98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	1dfb      	adds	r3, r7, #7
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8002da0:	d828      	bhi.n	8002df4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002da2:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <__NVIC_SetPriority+0xd4>)
 8002da4:	1dfb      	adds	r3, r7, #7
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	33c0      	adds	r3, #192	; 0xc0
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	589b      	ldr	r3, [r3, r2]
 8002db2:	1dfa      	adds	r2, r7, #7
 8002db4:	7812      	ldrb	r2, [r2, #0]
 8002db6:	0011      	movs	r1, r2
 8002db8:	2203      	movs	r2, #3
 8002dba:	400a      	ands	r2, r1
 8002dbc:	00d2      	lsls	r2, r2, #3
 8002dbe:	21ff      	movs	r1, #255	; 0xff
 8002dc0:	4091      	lsls	r1, r2
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	43d2      	mvns	r2, r2
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	019b      	lsls	r3, r3, #6
 8002dce:	22ff      	movs	r2, #255	; 0xff
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	2303      	movs	r3, #3
 8002dda:	4003      	ands	r3, r0
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002de0:	481f      	ldr	r0, [pc, #124]	; (8002e60 <__NVIC_SetPriority+0xd4>)
 8002de2:	1dfb      	adds	r3, r7, #7
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	430a      	orrs	r2, r1
 8002dec:	33c0      	adds	r3, #192	; 0xc0
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002df2:	e031      	b.n	8002e58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <__NVIC_SetPriority+0xd8>)
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	230f      	movs	r3, #15
 8002dfe:	400b      	ands	r3, r1
 8002e00:	3b08      	subs	r3, #8
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3306      	adds	r3, #6
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	18d3      	adds	r3, r2, r3
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1dfa      	adds	r2, r7, #7
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	0011      	movs	r1, r2
 8002e14:	2203      	movs	r2, #3
 8002e16:	400a      	ands	r2, r1
 8002e18:	00d2      	lsls	r2, r2, #3
 8002e1a:	21ff      	movs	r1, #255	; 0xff
 8002e1c:	4091      	lsls	r1, r2
 8002e1e:	000a      	movs	r2, r1
 8002e20:	43d2      	mvns	r2, r2
 8002e22:	401a      	ands	r2, r3
 8002e24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	22ff      	movs	r2, #255	; 0xff
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	0018      	movs	r0, r3
 8002e34:	2303      	movs	r3, #3
 8002e36:	4003      	ands	r3, r0
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e3c:	4809      	ldr	r0, [pc, #36]	; (8002e64 <__NVIC_SetPriority+0xd8>)
 8002e3e:	1dfb      	adds	r3, r7, #7
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	001c      	movs	r4, r3
 8002e44:	230f      	movs	r3, #15
 8002e46:	4023      	ands	r3, r4
 8002e48:	3b08      	subs	r3, #8
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	3306      	adds	r3, #6
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	18c3      	adds	r3, r0, r3
 8002e54:	3304      	adds	r3, #4
 8002e56:	601a      	str	r2, [r3, #0]
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b003      	add	sp, #12
 8002e5e:	bd90      	pop	{r4, r7, pc}
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	045b      	lsls	r3, r3, #17
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d301      	bcc.n	8002e80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e010      	b.n	8002ea2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <SysTick_Config+0x44>)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	3a01      	subs	r2, #1
 8002e86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e88:	2301      	movs	r3, #1
 8002e8a:	425b      	negs	r3, r3
 8002e8c:	2103      	movs	r1, #3
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7ff ff7c 	bl	8002d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <SysTick_Config+0x44>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <SysTick_Config+0x44>)
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	e000e010 	.word	0xe000e010

08002eb0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	210f      	movs	r1, #15
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	1c02      	adds	r2, r0, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	0011      	movs	r1, r2
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff ff5d 	bl	8002d8c <__NVIC_SetPriority>
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7ff ffbf 	bl	8002e68 <SysTick_Config>
 8002eea:	0003      	movs	r3, r0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f02:	e14d      	b.n	80031a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4091      	lsls	r1, r2
 8002f0e:	000a      	movs	r2, r1
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d100      	bne.n	8002f1c <HAL_GPIO_Init+0x28>
 8002f1a:	e13e      	b.n	800319a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d005      	beq.n	8002f34 <HAL_GPIO_Init+0x40>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d130      	bne.n	8002f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	409a      	lsls	r2, r3
 8002f42:	0013      	movs	r3, r2
 8002f44:	43da      	mvns	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	409a      	lsls	r2, r3
 8002f56:	0013      	movs	r3, r2
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	0013      	movs	r3, r2
 8002f72:	43da      	mvns	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	2201      	movs	r2, #1
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
 8002f88:	0013      	movs	r3, r2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d017      	beq.n	8002fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	0013      	movs	r3, r2
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d123      	bne.n	8003026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	08da      	lsrs	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3208      	adds	r2, #8
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	58d3      	ldr	r3, [r2, r3]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2207      	movs	r2, #7
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2107      	movs	r1, #7
 800300a:	400b      	ands	r3, r1
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	409a      	lsls	r2, r3
 8003010:	0013      	movs	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	0092      	lsls	r2, r2, #2
 8003022:	6939      	ldr	r1, [r7, #16]
 8003024:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	409a      	lsls	r2, r3
 8003034:	0013      	movs	r3, r2
 8003036:	43da      	mvns	r2, r3
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2203      	movs	r2, #3
 8003044:	401a      	ands	r2, r3
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	409a      	lsls	r2, r3
 800304c:	0013      	movs	r3, r2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	23c0      	movs	r3, #192	; 0xc0
 8003060:	029b      	lsls	r3, r3, #10
 8003062:	4013      	ands	r3, r2
 8003064:	d100      	bne.n	8003068 <HAL_GPIO_Init+0x174>
 8003066:	e098      	b.n	800319a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003068:	4a53      	ldr	r2, [pc, #332]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	3318      	adds	r3, #24
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	589b      	ldr	r3, [r3, r2]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2203      	movs	r2, #3
 800307a:	4013      	ands	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	220f      	movs	r2, #15
 8003080:	409a      	lsls	r2, r3
 8003082:	0013      	movs	r3, r2
 8003084:	43da      	mvns	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	23a0      	movs	r3, #160	; 0xa0
 8003090:	05db      	lsls	r3, r3, #23
 8003092:	429a      	cmp	r2, r3
 8003094:	d019      	beq.n	80030ca <HAL_GPIO_Init+0x1d6>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a48      	ldr	r2, [pc, #288]	; (80031bc <HAL_GPIO_Init+0x2c8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_GPIO_Init+0x1d2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a47      	ldr	r2, [pc, #284]	; (80031c0 <HAL_GPIO_Init+0x2cc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00d      	beq.n	80030c2 <HAL_GPIO_Init+0x1ce>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a46      	ldr	r2, [pc, #280]	; (80031c4 <HAL_GPIO_Init+0x2d0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <HAL_GPIO_Init+0x1ca>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a45      	ldr	r2, [pc, #276]	; (80031c8 <HAL_GPIO_Init+0x2d4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_GPIO_Init+0x1c6>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e008      	b.n	80030cc <HAL_GPIO_Init+0x1d8>
 80030ba:	2305      	movs	r3, #5
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x1d8>
 80030be:	2303      	movs	r3, #3
 80030c0:	e004      	b.n	80030cc <HAL_GPIO_Init+0x1d8>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_Init+0x1d8>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x1d8>
 80030ca:	2300      	movs	r3, #0
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	2103      	movs	r1, #3
 80030d0:	400a      	ands	r2, r1
 80030d2:	00d2      	lsls	r2, r2, #3
 80030d4:	4093      	lsls	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80030dc:	4936      	ldr	r1, [pc, #216]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3318      	adds	r3, #24
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43da      	mvns	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	035b      	lsls	r3, r3, #13
 8003102:	4013      	ands	r3, r2
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003114:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43da      	mvns	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	039b      	lsls	r3, r3, #14
 800312c:	4013      	ands	r3, r2
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003138:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 8003140:	2384      	movs	r3, #132	; 0x84
 8003142:	58d3      	ldr	r3, [r2, r3]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43da      	mvns	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	029b      	lsls	r3, r3, #10
 8003158:	4013      	ands	r3, r2
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003164:	4914      	ldr	r1, [pc, #80]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 8003166:	2284      	movs	r2, #132	; 0x84
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800316c:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	58d3      	ldr	r3, [r2, r3]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	43da      	mvns	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	025b      	lsls	r3, r3, #9
 8003186:	4013      	ands	r3, r2
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003192:	4909      	ldr	r1, [pc, #36]	; (80031b8 <HAL_GPIO_Init+0x2c4>)
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	3301      	adds	r3, #1
 800319e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	40da      	lsrs	r2, r3
 80031a8:	1e13      	subs	r3, r2, #0
 80031aa:	d000      	beq.n	80031ae <HAL_GPIO_Init+0x2ba>
 80031ac:	e6aa      	b.n	8002f04 <HAL_GPIO_Init+0x10>
  }
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b006      	add	sp, #24
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021800 	.word	0x40021800
 80031bc:	50000400 	.word	0x50000400
 80031c0:	50000800 	.word	0x50000800
 80031c4:	50000c00 	.word	0x50000c00
 80031c8:	50001000 	.word	0x50001000

080031cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80031da:	e0ba      	b.n	8003352 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80031dc:	2201      	movs	r2, #1
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	409a      	lsls	r2, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d100      	bne.n	80031f0 <HAL_GPIO_DeInit+0x24>
 80031ee:	e0ad      	b.n	800334c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80031f0:	4a5d      	ldr	r2, [pc, #372]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3318      	adds	r3, #24
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	589b      	ldr	r3, [r3, r2]
 80031fc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2203      	movs	r2, #3
 8003202:	4013      	ands	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	220f      	movs	r2, #15
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	23a0      	movs	r3, #160	; 0xa0
 8003214:	05db      	lsls	r3, r3, #23
 8003216:	429a      	cmp	r2, r3
 8003218:	d019      	beq.n	800324e <HAL_GPIO_DeInit+0x82>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a53      	ldr	r2, [pc, #332]	; (800336c <HAL_GPIO_DeInit+0x1a0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_DeInit+0x7e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a52      	ldr	r2, [pc, #328]	; (8003370 <HAL_GPIO_DeInit+0x1a4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_DeInit+0x7a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a51      	ldr	r2, [pc, #324]	; (8003374 <HAL_GPIO_DeInit+0x1a8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_DeInit+0x76>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a50      	ldr	r2, [pc, #320]	; (8003378 <HAL_GPIO_DeInit+0x1ac>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_DeInit+0x72>
 800323a:	2304      	movs	r3, #4
 800323c:	e008      	b.n	8003250 <HAL_GPIO_DeInit+0x84>
 800323e:	2305      	movs	r3, #5
 8003240:	e006      	b.n	8003250 <HAL_GPIO_DeInit+0x84>
 8003242:	2303      	movs	r3, #3
 8003244:	e004      	b.n	8003250 <HAL_GPIO_DeInit+0x84>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_DeInit+0x84>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_DeInit+0x84>
 800324e:	2300      	movs	r3, #0
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	2103      	movs	r1, #3
 8003254:	400a      	ands	r2, r1
 8003256:	00d2      	lsls	r2, r2, #3
 8003258:	4093      	lsls	r3, r2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d136      	bne.n	80032ce <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003260:	4a41      	ldr	r2, [pc, #260]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	58d3      	ldr	r3, [r2, r3]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	43d2      	mvns	r2, r2
 800326a:	493f      	ldr	r1, [pc, #252]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 800326c:	4013      	ands	r3, r2
 800326e:	2280      	movs	r2, #128	; 0x80
 8003270:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003272:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 8003274:	2384      	movs	r3, #132	; 0x84
 8003276:	58d3      	ldr	r3, [r2, r3]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	43d2      	mvns	r2, r2
 800327c:	493a      	ldr	r1, [pc, #232]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 800327e:	4013      	ands	r3, r2
 8003280:	2284      	movs	r2, #132	; 0x84
 8003282:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003284:	4b38      	ldr	r3, [pc, #224]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43d9      	mvns	r1, r3
 800328c:	4b36      	ldr	r3, [pc, #216]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 800328e:	400a      	ands	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003292:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43d9      	mvns	r1, r3
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 800329c:	400a      	ands	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2203      	movs	r2, #3
 80032a4:	4013      	ands	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	220f      	movs	r2, #15
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80032b0:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3318      	adds	r3, #24
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	589a      	ldr	r2, [r3, r2]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43d9      	mvns	r1, r3
 80032c0:	4829      	ldr	r0, [pc, #164]	; (8003368 <HAL_GPIO_DeInit+0x19c>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	400a      	ands	r2, r1
 80032c8:	3318      	adds	r3, #24
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2103      	movs	r1, #3
 80032d8:	4099      	lsls	r1, r3
 80032da:	000b      	movs	r3, r1
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	0092      	lsls	r2, r2, #2
 80032ec:	58d3      	ldr	r3, [r2, r3]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	2107      	movs	r1, #7
 80032f2:	400a      	ands	r2, r1
 80032f4:	0092      	lsls	r2, r2, #2
 80032f6:	210f      	movs	r1, #15
 80032f8:	4091      	lsls	r1, r2
 80032fa:	000a      	movs	r2, r1
 80032fc:	43d1      	mvns	r1, r2
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	08d2      	lsrs	r2, r2, #3
 8003302:	4019      	ands	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3208      	adds	r2, #8
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	0052      	lsls	r2, r2, #1
 8003314:	2103      	movs	r1, #3
 8003316:	4091      	lsls	r1, r2
 8003318:	000a      	movs	r2, r1
 800331a:	43d2      	mvns	r2, r2
 800331c:	401a      	ands	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2101      	movs	r1, #1
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4091      	lsls	r1, r2
 800332c:	000a      	movs	r2, r1
 800332e:	43d2      	mvns	r2, r2
 8003330:	401a      	ands	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	0052      	lsls	r2, r2, #1
 800333e:	2103      	movs	r1, #3
 8003340:	4091      	lsls	r1, r2
 8003342:	000a      	movs	r2, r1
 8003344:	43d2      	mvns	r2, r2
 8003346:	401a      	ands	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3301      	adds	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	40da      	lsrs	r2, r3
 8003358:	1e13      	subs	r3, r2, #0
 800335a:	d000      	beq.n	800335e <HAL_GPIO_DeInit+0x192>
 800335c:	e73e      	b.n	80031dc <HAL_GPIO_DeInit+0x10>
  }
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021800 	.word	0x40021800
 800336c:	50000400 	.word	0x50000400
 8003370:	50000800 	.word	0x50000800
 8003374:	50000c00 	.word	0x50000c00
 8003378:	50001000 	.word	0x50001000

0800337c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	000a      	movs	r2, r1
 8003386:	1cbb      	adds	r3, r7, #2
 8003388:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	1cba      	adds	r2, r7, #2
 8003390:	8812      	ldrh	r2, [r2, #0]
 8003392:	4013      	ands	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e003      	b.n	80033a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a0:	230f      	movs	r3, #15
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80033a8:	230f      	movs	r3, #15
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	0008      	movs	r0, r1
 80033c0:	0011      	movs	r1, r2
 80033c2:	1cbb      	adds	r3, r7, #2
 80033c4:	1c02      	adds	r2, r0, #0
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	1c7b      	adds	r3, r7, #1
 80033ca:	1c0a      	adds	r2, r1, #0
 80033cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ce:	1c7b      	adds	r3, r7, #1
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033d6:	1cbb      	adds	r3, r7, #2
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033de:	e003      	b.n	80033e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033e0:	1cbb      	adds	r3, r7, #2
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_PWR_EnableBkUpAccess+0x18>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_PWR_EnableBkUpAccess+0x18>)
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	0049      	lsls	r1, r1, #1
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40007000 	.word	0x40007000

0800340c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	000a      	movs	r2, r1
 8003416:	1cfb      	adds	r3, r7, #3
 8003418:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <HAL_PWR_EnterSTOPMode+0x68>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2207      	movs	r2, #7
 8003426:	4393      	bics	r3, r2
 8003428:	001a      	movs	r2, r3
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_PWR_EnterSTOPMode+0x68>)
 800342c:	2101      	movs	r1, #1
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e005      	b.n	8003440 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <HAL_PWR_EnterSTOPMode+0x68>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HAL_PWR_EnterSTOPMode+0x68>)
 800343a:	2107      	movs	r1, #7
 800343c:	438a      	bics	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003446:	2104      	movs	r1, #4
 8003448:	430a      	orrs	r2, r1
 800344a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800344c:	1cfb      	adds	r3, r7, #3
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003454:	bf30      	wfi
 8003456:	e002      	b.n	800345e <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003458:	bf40      	sev
    __WFE();
 800345a:	bf20      	wfe
    __WFE();
 800345c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003464:	2104      	movs	r1, #4
 8003466:	438a      	bics	r2, r1
 8003468:	611a      	str	r2, [r3, #16]
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	b002      	add	sp, #8
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	40007000 	.word	0x40007000
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	430a      	orrs	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	429a      	cmp	r2, r3
 800349e:	d11f      	bne.n	80034e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	0013      	movs	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	189b      	adds	r3, r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4912      	ldr	r1, [pc, #72]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fc fe3a 	bl	8000128 <__udivsi3>
 80034b4:	0003      	movs	r3, r0
 80034b6:	3301      	adds	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ba:	e008      	b.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e001      	b.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e009      	b.n	80034e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	401a      	ands	r2, r3
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	429a      	cmp	r2, r3
 80034de:	d0ed      	beq.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	40007000 	.word	0x40007000
 80034f0:	fffff9ff 	.word	0xfffff9ff
 80034f4:	20000000 	.word	0x20000000
 80034f8:	000f4240 	.word	0x000f4240

080034fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	23e0      	movs	r3, #224	; 0xe0
 8003506:	01db      	lsls	r3, r3, #7
 8003508:	4013      	ands	r3, r2
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f000 fb50 	bl	8003bc8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2201      	movs	r2, #1
 800352e:	4013      	ands	r3, r2
 8003530:	d100      	bne.n	8003534 <HAL_RCC_OscConfig+0x20>
 8003532:	e07c      	b.n	800362e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003534:	4bc3      	ldr	r3, [pc, #780]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2238      	movs	r2, #56	; 0x38
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800353e:	4bc1      	ldr	r3, [pc, #772]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2203      	movs	r2, #3
 8003544:	4013      	ands	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b10      	cmp	r3, #16
 800354c:	d102      	bne.n	8003554 <HAL_RCC_OscConfig+0x40>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d002      	beq.n	800355a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b08      	cmp	r3, #8
 8003558:	d10b      	bne.n	8003572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355a:	4bba      	ldr	r3, [pc, #744]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	029b      	lsls	r3, r3, #10
 8003562:	4013      	ands	r3, r2
 8003564:	d062      	beq.n	800362c <HAL_RCC_OscConfig+0x118>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d15e      	bne.n	800362c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e32a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	025b      	lsls	r3, r3, #9
 800357a:	429a      	cmp	r2, r3
 800357c:	d107      	bne.n	800358e <HAL_RCC_OscConfig+0x7a>
 800357e:	4bb1      	ldr	r3, [pc, #708]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4bb0      	ldr	r3, [pc, #704]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	0249      	lsls	r1, r1, #9
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e020      	b.n	80035d0 <HAL_RCC_OscConfig+0xbc>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	23a0      	movs	r3, #160	; 0xa0
 8003594:	02db      	lsls	r3, r3, #11
 8003596:	429a      	cmp	r2, r3
 8003598:	d10e      	bne.n	80035b8 <HAL_RCC_OscConfig+0xa4>
 800359a:	4baa      	ldr	r3, [pc, #680]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4ba9      	ldr	r3, [pc, #676]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	02c9      	lsls	r1, r1, #11
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	4ba6      	ldr	r3, [pc, #664]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4ba5      	ldr	r3, [pc, #660]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	0249      	lsls	r1, r1, #9
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0xbc>
 80035b8:	4ba2      	ldr	r3, [pc, #648]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4ba1      	ldr	r3, [pc, #644]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80035be:	49a2      	ldr	r1, [pc, #648]	; (8003848 <HAL_RCC_OscConfig+0x334>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	4b9f      	ldr	r3, [pc, #636]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80035ca:	49a0      	ldr	r1, [pc, #640]	; (800384c <HAL_RCC_OscConfig+0x338>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d014      	beq.n	8003602 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7ff fb86 	bl	8002ce8 <HAL_GetTick>
 80035dc:	0003      	movs	r3, r0
 80035de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e2:	f7ff fb81 	bl	8002ce8 <HAL_GetTick>
 80035e6:	0002      	movs	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b64      	cmp	r3, #100	; 0x64
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e2e9      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f4:	4b93      	ldr	r3, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	029b      	lsls	r3, r3, #10
 80035fc:	4013      	ands	r3, r2
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0xce>
 8003600:	e015      	b.n	800362e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7ff fb71 	bl	8002ce8 <HAL_GetTick>
 8003606:	0003      	movs	r3, r0
 8003608:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7ff fb6c 	bl	8002ce8 <HAL_GetTick>
 8003610:	0002      	movs	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e2d4      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361e:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	029b      	lsls	r3, r3, #10
 8003626:	4013      	ands	r3, r2
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0xf8>
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2202      	movs	r2, #2
 8003634:	4013      	ands	r3, r2
 8003636:	d100      	bne.n	800363a <HAL_RCC_OscConfig+0x126>
 8003638:	e099      	b.n	800376e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363a:	4b82      	ldr	r3, [pc, #520]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2238      	movs	r2, #56	; 0x38
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003644:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2203      	movs	r2, #3
 800364a:	4013      	ands	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b10      	cmp	r3, #16
 8003652:	d102      	bne.n	800365a <HAL_RCC_OscConfig+0x146>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d002      	beq.n	8003660 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d135      	bne.n	80036cc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003660:	4b78      	ldr	r3, [pc, #480]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4013      	ands	r3, r2
 800366a:	d005      	beq.n	8003678 <HAL_RCC_OscConfig+0x164>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e2a7      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b72      	ldr	r3, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a74      	ldr	r2, [pc, #464]	; (8003850 <HAL_RCC_OscConfig+0x33c>)
 800367e:	4013      	ands	r3, r2
 8003680:	0019      	movs	r1, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	021a      	lsls	r2, r3, #8
 8003688:	4b6e      	ldr	r3, [pc, #440]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d112      	bne.n	80036ba <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003694:	4b6b      	ldr	r3, [pc, #428]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6e      	ldr	r2, [pc, #440]	; (8003854 <HAL_RCC_OscConfig+0x340>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80036a8:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0adb      	lsrs	r3, r3, #11
 80036ae:	2207      	movs	r2, #7
 80036b0:	4013      	ands	r3, r2
 80036b2:	4a69      	ldr	r2, [pc, #420]	; (8003858 <HAL_RCC_OscConfig+0x344>)
 80036b4:	40da      	lsrs	r2, r3
 80036b6:	4b69      	ldr	r3, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x348>)
 80036b8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036ba:	4b69      	ldr	r3, [pc, #420]	; (8003860 <HAL_RCC_OscConfig+0x34c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0018      	movs	r0, r3
 80036c0:	f7ff fab6 	bl	8002c30 <HAL_InitTick>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d051      	beq.n	800376c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e27d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d030      	beq.n	8003736 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80036d4:	4b5b      	ldr	r3, [pc, #364]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x340>)
 80036da:	4013      	ands	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	4b58      	ldr	r3, [pc, #352]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80036e8:	4b56      	ldr	r3, [pc, #344]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b55      	ldr	r3, [pc, #340]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	0049      	lsls	r1, r1, #1
 80036f2:	430a      	orrs	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff faf7 	bl	8002ce8 <HAL_GetTick>
 80036fa:	0003      	movs	r3, r0
 80036fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003700:	f7ff faf2 	bl	8002ce8 <HAL_GetTick>
 8003704:	0002      	movs	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e25a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003712:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4013      	ands	r3, r2
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	021a      	lsls	r2, r3, #8
 800372e:	4b45      	ldr	r3, [pc, #276]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	e01b      	b.n	800376e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b42      	ldr	r3, [pc, #264]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800373c:	4949      	ldr	r1, [pc, #292]	; (8003864 <HAL_RCC_OscConfig+0x350>)
 800373e:	400a      	ands	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7ff fad1 	bl	8002ce8 <HAL_GetTick>
 8003746:	0003      	movs	r3, r0
 8003748:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374c:	f7ff facc 	bl	8002ce8 <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e234      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4013      	ands	r3, r2
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x238>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800376c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2208      	movs	r2, #8
 8003774:	4013      	ands	r3, r2
 8003776:	d047      	beq.n	8003808 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003778:	4b32      	ldr	r3, [pc, #200]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2238      	movs	r2, #56	; 0x38
 800377e:	4013      	ands	r3, r2
 8003780:	2b18      	cmp	r3, #24
 8003782:	d10a      	bne.n	800379a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	2202      	movs	r2, #2
 800378a:	4013      	ands	r3, r2
 800378c:	d03c      	beq.n	8003808 <HAL_RCC_OscConfig+0x2f4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d138      	bne.n	8003808 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e216      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d019      	beq.n	80037d6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80037a2:	4b28      	ldr	r3, [pc, #160]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80037a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a6:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80037a8:	2101      	movs	r1, #1
 80037aa:	430a      	orrs	r2, r1
 80037ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7ff fa9b 	bl	8002ce8 <HAL_GetTick>
 80037b2:	0003      	movs	r3, r0
 80037b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b8:	f7ff fa96 	bl	8002ce8 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e1fe      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80037cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ce:	2202      	movs	r2, #2
 80037d0:	4013      	ands	r3, r2
 80037d2:	d0f1      	beq.n	80037b8 <HAL_RCC_OscConfig+0x2a4>
 80037d4:	e018      	b.n	8003808 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80037d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037da:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 80037dc:	2101      	movs	r1, #1
 80037de:	438a      	bics	r2, r1
 80037e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7ff fa81 	bl	8002ce8 <HAL_GetTick>
 80037e6:	0003      	movs	r3, r0
 80037e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ec:	f7ff fa7c 	bl	8002ce8 <HAL_GetTick>
 80037f0:	0002      	movs	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1e4      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	2202      	movs	r2, #2
 8003804:	4013      	ands	r3, r2
 8003806:	d1f1      	bne.n	80037ec <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2204      	movs	r2, #4
 800380e:	4013      	ands	r3, r2
 8003810:	d100      	bne.n	8003814 <HAL_RCC_OscConfig+0x300>
 8003812:	e0c7      	b.n	80039a4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003814:	231f      	movs	r3, #31
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2238      	movs	r2, #56	; 0x38
 8003822:	4013      	ands	r3, r2
 8003824:	2b20      	cmp	r3, #32
 8003826:	d11f      	bne.n	8003868 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x330>)
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	2202      	movs	r2, #2
 800382e:	4013      	ands	r3, r2
 8003830:	d100      	bne.n	8003834 <HAL_RCC_OscConfig+0x320>
 8003832:	e0b7      	b.n	80039a4 <HAL_RCC_OscConfig+0x490>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d000      	beq.n	800383e <HAL_RCC_OscConfig+0x32a>
 800383c:	e0b2      	b.n	80039a4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e1c2      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	40021000 	.word	0x40021000
 8003848:	fffeffff 	.word	0xfffeffff
 800384c:	fffbffff 	.word	0xfffbffff
 8003850:	ffff80ff 	.word	0xffff80ff
 8003854:	ffffc7ff 	.word	0xffffc7ff
 8003858:	00f42400 	.word	0x00f42400
 800385c:	20000000 	.word	0x20000000
 8003860:	20000004 	.word	0x20000004
 8003864:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003868:	4bb5      	ldr	r3, [pc, #724]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 800386a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	055b      	lsls	r3, r3, #21
 8003870:	4013      	ands	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_RCC_OscConfig+0x364>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x366>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d011      	beq.n	80038a2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	4bb0      	ldr	r3, [pc, #704]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003882:	4baf      	ldr	r3, [pc, #700]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	0549      	lsls	r1, r1, #21
 8003888:	430a      	orrs	r2, r1
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
 800388c:	4bac      	ldr	r3, [pc, #688]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 800388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	055b      	lsls	r3, r3, #21
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800389a:	231f      	movs	r3, #31
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a2:	4ba8      	ldr	r3, [pc, #672]	; (8003b44 <HAL_RCC_OscConfig+0x630>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4013      	ands	r3, r2
 80038ac:	d11a      	bne.n	80038e4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ae:	4ba5      	ldr	r3, [pc, #660]	; (8003b44 <HAL_RCC_OscConfig+0x630>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4ba4      	ldr	r3, [pc, #656]	; (8003b44 <HAL_RCC_OscConfig+0x630>)
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	0049      	lsls	r1, r1, #1
 80038b8:	430a      	orrs	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80038bc:	f7ff fa14 	bl	8002ce8 <HAL_GetTick>
 80038c0:	0003      	movs	r3, r0
 80038c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7ff fa0f 	bl	8002ce8 <HAL_GetTick>
 80038ca:	0002      	movs	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e177      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d8:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <HAL_RCC_OscConfig+0x630>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4013      	ands	r3, r2
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x3e6>
 80038ec:	4b94      	ldr	r3, [pc, #592]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 80038ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038f0:	4b93      	ldr	r3, [pc, #588]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	430a      	orrs	r2, r1
 80038f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80038f8:	e01c      	b.n	8003934 <HAL_RCC_OscConfig+0x420>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x408>
 8003902:	4b8f      	ldr	r3, [pc, #572]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003906:	4b8e      	ldr	r3, [pc, #568]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003908:	2104      	movs	r1, #4
 800390a:	430a      	orrs	r2, r1
 800390c:	65da      	str	r2, [r3, #92]	; 0x5c
 800390e:	4b8c      	ldr	r3, [pc, #560]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003914:	2101      	movs	r1, #1
 8003916:	430a      	orrs	r2, r1
 8003918:	65da      	str	r2, [r3, #92]	; 0x5c
 800391a:	e00b      	b.n	8003934 <HAL_RCC_OscConfig+0x420>
 800391c:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 800391e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003920:	4b87      	ldr	r3, [pc, #540]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003922:	2101      	movs	r1, #1
 8003924:	438a      	bics	r2, r1
 8003926:	65da      	str	r2, [r3, #92]	; 0x5c
 8003928:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 800392a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800392c:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 800392e:	2104      	movs	r1, #4
 8003930:	438a      	bics	r2, r1
 8003932:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d014      	beq.n	8003966 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7ff f9d4 	bl	8002ce8 <HAL_GetTick>
 8003940:	0003      	movs	r3, r0
 8003942:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003944:	e009      	b.n	800395a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7ff f9cf 	bl	8002ce8 <HAL_GetTick>
 800394a:	0002      	movs	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	4a7d      	ldr	r2, [pc, #500]	; (8003b48 <HAL_RCC_OscConfig+0x634>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e136      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395a:	4b79      	ldr	r3, [pc, #484]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	2202      	movs	r2, #2
 8003960:	4013      	ands	r3, r2
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x432>
 8003964:	e013      	b.n	800398e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7ff f9bf 	bl	8002ce8 <HAL_GetTick>
 800396a:	0003      	movs	r3, r0
 800396c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800396e:	e009      	b.n	8003984 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7ff f9ba 	bl	8002ce8 <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	4a73      	ldr	r2, [pc, #460]	; (8003b48 <HAL_RCC_OscConfig+0x634>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e121      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003984:	4b6e      	ldr	r3, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2202      	movs	r2, #2
 800398a:	4013      	ands	r3, r2
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800398e:	231f      	movs	r3, #31
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003998:	4b69      	ldr	r3, [pc, #420]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 800399a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 800399e:	496b      	ldr	r1, [pc, #428]	; (8003b4c <HAL_RCC_OscConfig+0x638>)
 80039a0:	400a      	ands	r2, r1
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2220      	movs	r2, #32
 80039aa:	4013      	ands	r3, r2
 80039ac:	d039      	beq.n	8003a22 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01b      	beq.n	80039ee <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039b6:	4b62      	ldr	r3, [pc, #392]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	03c9      	lsls	r1, r1, #15
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7ff f990 	bl	8002ce8 <HAL_GetTick>
 80039c8:	0003      	movs	r3, r0
 80039ca:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ce:	f7ff f98b 	bl	8002ce8 <HAL_GetTick>
 80039d2:	0002      	movs	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0f3      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039e0:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	4013      	ands	r3, r2
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x4ba>
 80039ec:	e019      	b.n	8003a22 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039ee:	4b54      	ldr	r3, [pc, #336]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 80039f4:	4956      	ldr	r1, [pc, #344]	; (8003b50 <HAL_RCC_OscConfig+0x63c>)
 80039f6:	400a      	ands	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7ff f975 	bl	8002ce8 <HAL_GetTick>
 80039fe:	0003      	movs	r3, r0
 8003a00:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a04:	f7ff f970 	bl	8002ce8 <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e0d8      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a16:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d100      	bne.n	8003a2c <HAL_RCC_OscConfig+0x518>
 8003a2a:	e0cc      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2c:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2238      	movs	r2, #56	; 0x38
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d100      	bne.n	8003a3a <HAL_RCC_OscConfig+0x526>
 8003a38:	e07b      	b.n	8003b32 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d156      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b3e      	ldr	r3, [pc, #248]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003a48:	4942      	ldr	r1, [pc, #264]	; (8003b54 <HAL_RCC_OscConfig+0x640>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7ff f94b 	bl	8002ce8 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a58:	f7ff f946 	bl	8002ce8 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0ae      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a6a:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	049b      	lsls	r3, r3, #18
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a76:	4b32      	ldr	r3, [pc, #200]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4a37      	ldr	r2, [pc, #220]	; (8003b58 <HAL_RCC_OscConfig+0x644>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aaa:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	0449      	lsls	r1, r1, #17
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	0549      	lsls	r1, r1, #21
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7ff f90f 	bl	8002ce8 <HAL_GetTick>
 8003aca:	0003      	movs	r3, r0
 8003acc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7ff f90a 	bl	8002ce8 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e072      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	049b      	lsls	r3, r3, #18
 8003aea:	4013      	ands	r3, r2
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x5bc>
 8003aee:	e06a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003af6:	4917      	ldr	r1, [pc, #92]	; (8003b54 <HAL_RCC_OscConfig+0x640>)
 8003af8:	400a      	ands	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7ff f8f4 	bl	8002ce8 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b06:	f7ff f8ef 	bl	8002ce8 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e057      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	049b      	lsls	r3, r3, #18
 8003b20:	4013      	ands	r3, r2
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_OscConfig+0x62c>)
 8003b2a:	490c      	ldr	r1, [pc, #48]	; (8003b5c <HAL_RCC_OscConfig+0x648>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	e049      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d112      	bne.n	8003b60 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e044      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	00001388 	.word	0x00001388
 8003b4c:	efffffff 	.word	0xefffffff
 8003b50:	ffbfffff 	.word	0xffbfffff
 8003b54:	feffffff 	.word	0xfeffffff
 8003b58:	11c1808c 	.word	0x11c1808c
 8003b5c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x6bc>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d126      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2270      	movs	r2, #112	; 0x70
 8003b78:	401a      	ands	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d11f      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	23fe      	movs	r3, #254	; 0xfe
 8003b86:	01db      	lsls	r3, r3, #7
 8003b88:	401a      	ands	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d116      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	23f8      	movs	r3, #248	; 0xf8
 8003b98:	039b      	lsls	r3, r3, #14
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	23e0      	movs	r3, #224	; 0xe0
 8003ba8:	051b      	lsls	r3, r3, #20
 8003baa:	401a      	ands	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	0f5b      	lsrs	r3, r3, #29
 8003bb8:	075a      	lsls	r2, r3, #29
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b008      	add	sp, #32
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0e9      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2207      	movs	r2, #7
 8003bee:	4013      	ands	r3, r2
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d91e      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b73      	ldr	r3, [pc, #460]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2207      	movs	r2, #7
 8003bfc:	4393      	bics	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	4b70      	ldr	r3, [pc, #448]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c08:	f7ff f86e 	bl	8002ce8 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c10:	e009      	b.n	8003c26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c12:	f7ff f869 	bl	8002ce8 <HAL_GetTick>
 8003c16:	0002      	movs	r2, r0
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	4a6a      	ldr	r2, [pc, #424]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0ca      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c26:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d015      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2204      	movs	r2, #4
 8003c44:	4013      	ands	r3, r2
 8003c46:	d006      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c48:	4b60      	ldr	r3, [pc, #384]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003c4e:	21e0      	movs	r1, #224	; 0xe0
 8003c50:	01c9      	lsls	r1, r1, #7
 8003c52:	430a      	orrs	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a5d      	ldr	r2, [pc, #372]	; (8003dd0 <HAL_RCC_ClockConfig+0x1fc>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	4b59      	ldr	r3, [pc, #356]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	4013      	ands	r3, r2
 8003c72:	d057      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	029b      	lsls	r3, r3, #10
 8003c84:	4013      	ands	r3, r2
 8003c86:	d12b      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e097      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c94:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	049b      	lsls	r3, r3, #18
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d11f      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e08b      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cac:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d113      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e07f      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc8:	2202      	movs	r2, #2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d108      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e074      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd2:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e06d      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf4:	f7fe fff8 	bl	8002ce8 <HAL_GetTick>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfc:	e009      	b.n	8003d12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfe:	f7fe fff3 	bl	8002ce8 <HAL_GetTick>
 8003d02:	0002      	movs	r2, r0
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	4a2f      	ldr	r2, [pc, #188]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e054      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2238      	movs	r2, #56	; 0x38
 8003d18:	401a      	ands	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1ec      	bne.n	8003cfe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2207      	movs	r2, #7
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d21e      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2207      	movs	r2, #7
 8003d38:	4393      	bics	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d44:	f7fe ffd0 	bl	8002ce8 <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d4c:	e009      	b.n	8003d62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4e:	f7fe ffcb 	bl	8002ce8 <HAL_GetTick>
 8003d52:	0002      	movs	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e02c      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d62:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2207      	movs	r2, #7
 8003d68:	4013      	ands	r3, r2
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1ee      	bne.n	8003d4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2204      	movs	r2, #4
 8003d76:	4013      	ands	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <HAL_RCC_ClockConfig+0x200>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	0019      	movs	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003d8e:	f000 f829 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003d92:	0001      	movs	r1, r0
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_RCC_ClockConfig+0x1f8>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <HAL_RCC_ClockConfig+0x204>)
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	58d3      	ldr	r3, [r2, r3]
 8003da4:	221f      	movs	r2, #31
 8003da6:	4013      	ands	r3, r2
 8003da8:	000a      	movs	r2, r1
 8003daa:	40da      	lsrs	r2, r3
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_ClockConfig+0x208>)
 8003dae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_RCC_ClockConfig+0x20c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7fe ff3b 	bl	8002c30 <HAL_InitTick>
 8003dba:	0003      	movs	r3, r0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40022000 	.word	0x40022000
 8003dc8:	00001388 	.word	0x00001388
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	fffff0ff 	.word	0xfffff0ff
 8003dd4:	ffff8fff 	.word	0xffff8fff
 8003dd8:	08008dd8 	.word	0x08008dd8
 8003ddc:	20000000 	.word	0x20000000
 8003de0:	20000004 	.word	0x20000004

08003de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dea:	4b3c      	ldr	r3, [pc, #240]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2238      	movs	r2, #56	; 0x38
 8003df0:	4013      	ands	r3, r2
 8003df2:	d10f      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003df4:	4b39      	ldr	r3, [pc, #228]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	0adb      	lsrs	r3, r3, #11
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2201      	movs	r2, #1
 8003e00:	409a      	lsls	r2, r3
 8003e02:	0013      	movs	r3, r2
 8003e04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	4835      	ldr	r0, [pc, #212]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e0a:	f7fc f98d 	bl	8000128 <__udivsi3>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e05d      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2238      	movs	r2, #56	; 0x38
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e20:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	e054      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e26:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2238      	movs	r2, #56	; 0x38
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d138      	bne.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e32:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2203      	movs	r2, #3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	2207      	movs	r2, #7
 8003e44:	4013      	ands	r3, r2
 8003e46:	3301      	adds	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4824      	ldr	r0, [pc, #144]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e54:	f7fc f968 	bl	8000128 <__udivsi3>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	227f      	movs	r2, #127	; 0x7f
 8003e64:	4013      	ands	r3, r2
 8003e66:	434b      	muls	r3, r1
 8003e68:	617b      	str	r3, [r7, #20]
        break;
 8003e6a:	e00d      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	481c      	ldr	r0, [pc, #112]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e70:	f7fc f95a 	bl	8000128 <__udivsi3>
 8003e74:	0003      	movs	r3, r0
 8003e76:	0019      	movs	r1, r3
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	227f      	movs	r2, #127	; 0x7f
 8003e80:	4013      	ands	r3, r2
 8003e82:	434b      	muls	r3, r1
 8003e84:	617b      	str	r3, [r7, #20]
        break;
 8003e86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	0f5b      	lsrs	r3, r3, #29
 8003e8e:	2207      	movs	r2, #7
 8003e90:	4013      	ands	r3, r2
 8003e92:	3301      	adds	r3, #1
 8003e94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	6978      	ldr	r0, [r7, #20]
 8003e9a:	f7fc f945 	bl	8000128 <__udivsi3>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e015      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2238      	movs	r2, #56	; 0x38
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d103      	bne.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2238      	movs	r2, #56	; 0x38
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b18      	cmp	r3, #24
 8003ec2:	d103      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ec4:	23fa      	movs	r3, #250	; 0xfa
 8003ec6:	01db      	lsls	r3, r3, #7
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e001      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ed0:	693b      	ldr	r3, [r7, #16]
}
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b006      	add	sp, #24
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	00f42400 	.word	0x00f42400
 8003ee4:	007a1200 	.word	0x007a1200

08003ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	20000000 	.word	0x20000000

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f00:	f7ff fff2 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f04:	0004      	movs	r4, r0
 8003f06:	f7ff faf9 	bl	80034fc <LL_RCC_GetAPB1Prescaler>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	0b1a      	lsrs	r2, r3, #12
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f10:	0092      	lsls	r2, r2, #2
 8003f12:	58d3      	ldr	r3, [r2, r3]
 8003f14:	221f      	movs	r2, #31
 8003f16:	4013      	ands	r3, r2
 8003f18:	40dc      	lsrs	r4, r3
 8003f1a:	0023      	movs	r3, r4
}
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bdb0      	pop	{r4, r5, r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	08008e18 	.word	0x08008e18

08003f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003f30:	2313      	movs	r3, #19
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f38:	2312      	movs	r3, #18
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	029b      	lsls	r3, r3, #10
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d100      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f4c:	e0ad      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4e:	2011      	movs	r0, #17
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	055b      	lsls	r3, r3, #21
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d110      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f66:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	0549      	lsls	r1, r1, #21
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f70:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	055b      	lsls	r3, r3, #21
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7e:	183b      	adds	r3, r7, r0
 8003f80:	2201      	movs	r2, #1
 8003f82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f84:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	0049      	lsls	r1, r1, #1
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f92:	f7fe fea9 	bl	8002ce8 <HAL_GetTick>
 8003f96:	0003      	movs	r3, r0
 8003f98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9c:	f7fe fea4 	bl	8002ce8 <HAL_GetTick>
 8003fa0:	0002      	movs	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d904      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003faa:	2313      	movs	r3, #19
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	2203      	movs	r2, #3
 8003fb0:	701a      	strb	r2, [r3, #0]
        break;
 8003fb2:	e005      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb4:	4b30      	ldr	r3, [pc, #192]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d0ed      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003fc0:	2313      	movs	r3, #19
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d15e      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fca:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003fcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fce:	23c0      	movs	r3, #192	; 0xc0
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d019      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d014      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	4a24      	ldr	r2, [pc, #144]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ff0:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	0249      	lsls	r1, r1, #9
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004000:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004002:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004004:	491e      	ldr	r1, [pc, #120]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004006:	400a      	ands	r2, r1
 8004008:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2201      	movs	r2, #1
 8004014:	4013      	ands	r3, r2
 8004016:	d016      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe fe66 	bl	8002ce8 <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004020:	e00c      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fe fe61 	bl	8002ce8 <HAL_GetTick>
 8004026:	0002      	movs	r2, r0
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	4a15      	ldr	r2, [pc, #84]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d904      	bls.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004032:	2313      	movs	r3, #19
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	2203      	movs	r2, #3
 8004038:	701a      	strb	r2, [r3, #0]
            break;
 800403a:	e004      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	2202      	movs	r2, #2
 8004042:	4013      	ands	r3, r2
 8004044:	d0ed      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004046:	2313      	movs	r3, #19
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	4a09      	ldr	r2, [pc, #36]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004060:	430a      	orrs	r2, r1
 8004062:	65da      	str	r2, [r3, #92]	; 0x5c
 8004064:	e016      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004066:	2312      	movs	r3, #18
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	2213      	movs	r2, #19
 800406c:	18ba      	adds	r2, r7, r2
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e00f      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004074:	40021000 	.word	0x40021000
 8004078:	40007000 	.word	0x40007000
 800407c:	fffffcff 	.word	0xfffffcff
 8004080:	fffeffff 	.word	0xfffeffff
 8004084:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	2312      	movs	r3, #18
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2213      	movs	r2, #19
 800408e:	18ba      	adds	r2, r7, r2
 8004090:	7812      	ldrb	r2, [r2, #0]
 8004092:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004094:	2311      	movs	r3, #17
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d105      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4bb6      	ldr	r3, [pc, #728]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a2:	4bb5      	ldr	r3, [pc, #724]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040a4:	49b5      	ldr	r1, [pc, #724]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2201      	movs	r2, #1
 80040b0:	4013      	ands	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b4:	4bb0      	ldr	r3, [pc, #704]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	2203      	movs	r2, #3
 80040ba:	4393      	bics	r3, r2
 80040bc:	0019      	movs	r1, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	4bad      	ldr	r3, [pc, #692]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040c4:	430a      	orrs	r2, r1
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2202      	movs	r2, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d2:	4ba9      	ldr	r3, [pc, #676]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	220c      	movs	r2, #12
 80040d8:	4393      	bics	r3, r2
 80040da:	0019      	movs	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	4ba5      	ldr	r3, [pc, #660]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040e2:	430a      	orrs	r2, r1
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2204      	movs	r2, #4
 80040ec:	4013      	ands	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f0:	4ba1      	ldr	r3, [pc, #644]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	2230      	movs	r2, #48	; 0x30
 80040f6:	4393      	bics	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	4b9e      	ldr	r3, [pc, #632]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004100:	430a      	orrs	r2, r1
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2210      	movs	r2, #16
 800410a:	4013      	ands	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410e:	4b9a      	ldr	r3, [pc, #616]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	4a9b      	ldr	r2, [pc, #620]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004114:	4013      	ands	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	4b96      	ldr	r3, [pc, #600]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800411e:	430a      	orrs	r2, r1
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	015b      	lsls	r3, r3, #5
 800412a:	4013      	ands	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800412e:	4b92      	ldr	r3, [pc, #584]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	4a94      	ldr	r2, [pc, #592]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004134:	4013      	ands	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	4b8e      	ldr	r3, [pc, #568]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800413e:	430a      	orrs	r2, r1
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414e:	4b8a      	ldr	r3, [pc, #552]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	4a8d      	ldr	r2, [pc, #564]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004154:	4013      	ands	r3, r2
 8004156:	0019      	movs	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800415c:	4b86      	ldr	r3, [pc, #536]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800415e:	430a      	orrs	r2, r1
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4013      	ands	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800416e:	4b82      	ldr	r3, [pc, #520]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	4a86      	ldr	r2, [pc, #536]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004174:	4013      	ands	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	4b7e      	ldr	r3, [pc, #504]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800417e:	430a      	orrs	r2, r1
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2220      	movs	r2, #32
 8004188:	4013      	ands	r3, r2
 800418a:	d009      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800418c:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	4a7f      	ldr	r2, [pc, #508]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	4b77      	ldr	r3, [pc, #476]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800419c:	430a      	orrs	r2, r1
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2240      	movs	r2, #64	; 0x40
 80041a6:	4013      	ands	r3, r2
 80041a8:	d009      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041aa:	4b73      	ldr	r3, [pc, #460]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	4a79      	ldr	r2, [pc, #484]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	0019      	movs	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	4b6f      	ldr	r3, [pc, #444]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041ba:	430a      	orrs	r2, r1
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	01db      	lsls	r3, r3, #7
 80041c6:	4013      	ands	r3, r2
 80041c8:	d015      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ca:	4b6b      	ldr	r3, [pc, #428]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	0899      	lsrs	r1, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d6:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041d8:	430a      	orrs	r2, r1
 80041da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	05db      	lsls	r3, r3, #23
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d106      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80041e8:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b62      	ldr	r3, [pc, #392]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041ee:	2180      	movs	r1, #128	; 0x80
 80041f0:	0249      	lsls	r1, r1, #9
 80041f2:	430a      	orrs	r2, r1
 80041f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	031b      	lsls	r3, r3, #12
 80041fe:	4013      	ands	r3, r2
 8004200:	d009      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004202:	4b5d      	ldr	r3, [pc, #372]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	2240      	movs	r2, #64	; 0x40
 8004208:	4393      	bics	r3, r2
 800420a:	0019      	movs	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004210:	4b59      	ldr	r3, [pc, #356]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004212:	430a      	orrs	r2, r1
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	039b      	lsls	r3, r3, #14
 800421e:	4013      	ands	r3, r2
 8004220:	d016      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004222:	4b55      	ldr	r3, [pc, #340]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	4a5c      	ldr	r2, [pc, #368]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004228:	4013      	ands	r3, r2
 800422a:	0019      	movs	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004230:	4b51      	ldr	r3, [pc, #324]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004232:	430a      	orrs	r2, r1
 8004234:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	03db      	lsls	r3, r3, #15
 800423e:	429a      	cmp	r2, r3
 8004240:	d106      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004242:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	0449      	lsls	r1, r1, #17
 800424c:	430a      	orrs	r2, r1
 800424e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	03db      	lsls	r3, r3, #15
 8004258:	4013      	ands	r3, r2
 800425a:	d016      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800425c:	4b46      	ldr	r3, [pc, #280]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	4a4e      	ldr	r2, [pc, #312]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004262:	4013      	ands	r3, r2
 8004264:	0019      	movs	r1, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800426c:	430a      	orrs	r2, r1
 800426e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	045b      	lsls	r3, r3, #17
 8004278:	429a      	cmp	r2, r3
 800427a:	d106      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800427c:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	0449      	lsls	r1, r1, #17
 8004286:	430a      	orrs	r2, r1
 8004288:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	4013      	ands	r3, r2
 8004294:	d014      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004296:	4b38      	ldr	r3, [pc, #224]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	2203      	movs	r2, #3
 800429c:	4393      	bics	r3, r2
 800429e:	0019      	movs	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042a6:	430a      	orrs	r2, r1
 80042a8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d106      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	0249      	lsls	r1, r1, #9
 80042bc:	430a      	orrs	r2, r1
 80042be:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	019b      	lsls	r3, r3, #6
 80042c8:	4013      	ands	r3, r2
 80042ca:	d014      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80042cc:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	220c      	movs	r2, #12
 80042d2:	4393      	bics	r3, r2
 80042d4:	0019      	movs	r1, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042da:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042dc:	430a      	orrs	r2, r1
 80042de:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d106      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042e8:	4b23      	ldr	r3, [pc, #140]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	0249      	lsls	r1, r1, #9
 80042f2:	430a      	orrs	r2, r1
 80042f4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	045b      	lsls	r3, r3, #17
 80042fe:	4013      	ands	r3, r2
 8004300:	d016      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	4a22      	ldr	r2, [pc, #136]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004308:	4013      	ands	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004310:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004312:	430a      	orrs	r2, r1
 8004314:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	429a      	cmp	r2, r3
 8004320:	d106      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	0449      	lsls	r1, r1, #17
 800432c:	430a      	orrs	r2, r1
 800432e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	049b      	lsls	r3, r3, #18
 8004338:	4013      	ands	r3, r2
 800433a:	d016      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	4a10      	ldr	r2, [pc, #64]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004342:	4013      	ands	r3, r2
 8004344:	0019      	movs	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800434c:	430a      	orrs	r2, r1
 800434e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	429a      	cmp	r2, r3
 800435a:	d106      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	0449      	lsls	r1, r1, #17
 8004366:	430a      	orrs	r2, r1
 8004368:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800436a:	2312      	movs	r3, #18
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	781b      	ldrb	r3, [r3, #0]
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b006      	add	sp, #24
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	efffffff 	.word	0xefffffff
 8004380:	fffff3ff 	.word	0xfffff3ff
 8004384:	fffffcff 	.word	0xfffffcff
 8004388:	fff3ffff 	.word	0xfff3ffff
 800438c:	ffcfffff 	.word	0xffcfffff
 8004390:	ffffcfff 	.word	0xffffcfff
 8004394:	ffff3fff 	.word	0xffff3fff
 8004398:	ffbfffff 	.word	0xffbfffff
 800439c:	feffffff 	.word	0xfeffffff

080043a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043a0:	b5b0      	push	{r4, r5, r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d100      	bne.n	80043b8 <HAL_RTC_Init+0x18>
 80043b6:	e08c      	b.n	80044d2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2229      	movs	r2, #41	; 0x29
 80043bc:	5c9b      	ldrb	r3, [r3, r2]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2228      	movs	r2, #40	; 0x28
 80043c8:	2100      	movs	r1, #0
 80043ca:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2288      	movs	r2, #136	; 0x88
 80043d0:	0212      	lsls	r2, r2, #8
 80043d2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0018      	movs	r0, r3
 80043d8:	f7fe f9b2 	bl	8002740 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2229      	movs	r2, #41	; 0x29
 80043e0:	2102      	movs	r1, #2
 80043e2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2210      	movs	r2, #16
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d062      	beq.n	80044b8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	22ca      	movs	r2, #202	; 0xca
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2253      	movs	r2, #83	; 0x53
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004402:	250f      	movs	r5, #15
 8004404:	197c      	adds	r4, r7, r5
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 f9cb 	bl	80047a4 <RTC_EnterInitMode>
 800440e:	0003      	movs	r3, r0
 8004410:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004412:	0028      	movs	r0, r5
 8004414:	183b      	adds	r3, r7, r0
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d12c      	bne.n	8004476 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	492e      	ldr	r1, [pc, #184]	; (80044e0 <HAL_RTC_Init+0x140>)
 8004428:	400a      	ands	r2, r1
 800442a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6912      	ldr	r2, [r2, #16]
 8004452:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6919      	ldr	r1, [r3, #16]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	041a      	lsls	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004468:	183c      	adds	r4, r7, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f9db 	bl	8004828 <RTC_ExitInitMode>
 8004472:	0003      	movs	r3, r0
 8004474:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004476:	230f      	movs	r3, #15
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d116      	bne.n	80044ae <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	00d2      	lsls	r2, r2, #3
 800448c:	08d2      	lsrs	r2, r2, #3
 800448e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6999      	ldr	r1, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
 80044b6:	e003      	b.n	80044c0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80044b8:	230f      	movs	r3, #15
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80044c0:	230f      	movs	r3, #15
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2229      	movs	r2, #41	; 0x29
 80044ce:	2101      	movs	r1, #1
 80044d0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80044d2:	230f      	movs	r3, #15
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	781b      	ldrb	r3, [r3, #0]
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b004      	add	sp, #16
 80044de:	bdb0      	pop	{r4, r5, r7, pc}
 80044e0:	fb8fffbf 	.word	0xfb8fffbf

080044e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044e4:	b5b0      	push	{r4, r5, r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2228      	movs	r2, #40	; 0x28
 80044f4:	5c9b      	ldrb	r3, [r3, r2]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_RTC_SetTime+0x1a>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e092      	b.n	8004624 <HAL_RTC_SetTime+0x140>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2228      	movs	r2, #40	; 0x28
 8004502:	2101      	movs	r1, #1
 8004504:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2229      	movs	r2, #41	; 0x29
 800450a:	2102      	movs	r1, #2
 800450c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	22ca      	movs	r2, #202	; 0xca
 8004514:	625a      	str	r2, [r3, #36]	; 0x24
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2253      	movs	r2, #83	; 0x53
 800451c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800451e:	2513      	movs	r5, #19
 8004520:	197c      	adds	r4, r7, r5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f93d 	bl	80047a4 <RTC_EnterInitMode>
 800452a:	0003      	movs	r3, r0
 800452c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800452e:	197b      	adds	r3, r7, r5
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d162      	bne.n	80045fc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d125      	bne.n	8004588 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	4013      	ands	r3, r2
 8004546:	d102      	bne.n	800454e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 f9ac 	bl	80048b0 <RTC_ByteToBcd2>
 8004558:	0003      	movs	r3, r0
 800455a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 f9a5 	bl	80048b0 <RTC_ByteToBcd2>
 8004566:	0003      	movs	r3, r0
 8004568:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800456a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	789b      	ldrb	r3, [r3, #2]
 8004570:	0018      	movs	r0, r3
 8004572:	f000 f99d 	bl	80048b0 <RTC_ByteToBcd2>
 8004576:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004578:	0022      	movs	r2, r4
 800457a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	78db      	ldrb	r3, [r3, #3]
 8004580:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e017      	b.n	80045b8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2240      	movs	r2, #64	; 0x40
 8004590:	4013      	ands	r3, r2
 8004592:	d102      	bne.n	800459a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	785b      	ldrb	r3, [r3, #1]
 80045a4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045a6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045ac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	78db      	ldrb	r3, [r3, #3]
 80045b2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	491b      	ldr	r1, [pc, #108]	; (800462c <HAL_RTC_SetTime+0x148>)
 80045c0:	400a      	ands	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4918      	ldr	r1, [pc, #96]	; (8004630 <HAL_RTC_SetTime+0x14c>)
 80045d0:	400a      	ands	r2, r1
 80045d2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6999      	ldr	r1, [r3, #24]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045ec:	2313      	movs	r3, #19
 80045ee:	18fc      	adds	r4, r7, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 f918 	bl	8004828 <RTC_ExitInitMode>
 80045f8:	0003      	movs	r3, r0
 80045fa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004604:	2313      	movs	r3, #19
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d103      	bne.n	8004616 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2229      	movs	r2, #41	; 0x29
 8004612:	2101      	movs	r1, #1
 8004614:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2228      	movs	r2, #40	; 0x28
 800461a:	2100      	movs	r1, #0
 800461c:	5499      	strb	r1, [r3, r2]

  return status;
 800461e:	2313      	movs	r3, #19
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	781b      	ldrb	r3, [r3, #0]
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b006      	add	sp, #24
 800462a:	bdb0      	pop	{r4, r5, r7, pc}
 800462c:	007f7f7f 	.word	0x007f7f7f
 8004630:	fffbffff 	.word	0xfffbffff

08004634 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2228      	movs	r2, #40	; 0x28
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_RTC_SetDate+0x1a>
 800464a:	2302      	movs	r3, #2
 800464c:	e07e      	b.n	800474c <HAL_RTC_SetDate+0x118>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2228      	movs	r2, #40	; 0x28
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2229      	movs	r2, #41	; 0x29
 800465a:	2102      	movs	r1, #2
 800465c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10e      	bne.n	8004682 <HAL_RTC_SetDate+0x4e>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	001a      	movs	r2, r3
 800466a:	2310      	movs	r3, #16
 800466c:	4013      	ands	r3, r2
 800466e:	d008      	beq.n	8004682 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2210      	movs	r2, #16
 8004676:	4393      	bics	r3, r2
 8004678:	b2db      	uxtb	r3, r3
 800467a:	330a      	adds	r3, #10
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11c      	bne.n	80046c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	78db      	ldrb	r3, [r3, #3]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 f90f 	bl	80048b0 <RTC_ByteToBcd2>
 8004692:	0003      	movs	r3, r0
 8004694:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 f908 	bl	80048b0 <RTC_ByteToBcd2>
 80046a0:	0003      	movs	r3, r0
 80046a2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046a4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	789b      	ldrb	r3, [r3, #2]
 80046aa:	0018      	movs	r0, r3
 80046ac:	f000 f900 	bl	80048b0 <RTC_ByteToBcd2>
 80046b0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046b2:	0022      	movs	r2, r4
 80046b4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e00e      	b.n	80046e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	78db      	ldrb	r3, [r3, #3]
 80046c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046ce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80046d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	22ca      	movs	r2, #202	; 0xca
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2253      	movs	r2, #83	; 0x53
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046f0:	2513      	movs	r5, #19
 80046f2:	197c      	adds	r4, r7, r5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 f854 	bl	80047a4 <RTC_EnterInitMode>
 80046fc:	0003      	movs	r3, r0
 80046fe:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004700:	0028      	movs	r0, r5
 8004702:	183b      	adds	r3, r7, r0
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10c      	bne.n	8004724 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4910      	ldr	r1, [pc, #64]	; (8004754 <HAL_RTC_SetDate+0x120>)
 8004712:	400a      	ands	r2, r1
 8004714:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004716:	183c      	adds	r4, r7, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 f884 	bl	8004828 <RTC_ExitInitMode>
 8004720:	0003      	movs	r3, r0
 8004722:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	22ff      	movs	r2, #255	; 0xff
 800472a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800472c:	2313      	movs	r3, #19
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2229      	movs	r2, #41	; 0x29
 800473a:	2101      	movs	r1, #1
 800473c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2228      	movs	r2, #40	; 0x28
 8004742:	2100      	movs	r1, #0
 8004744:	5499      	strb	r1, [r3, r2]

  return status;
 8004746:	2313      	movs	r3, #19
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	781b      	ldrb	r3, [r3, #0]
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b006      	add	sp, #24
 8004752:	bdb0      	pop	{r4, r5, r7, pc}
 8004754:	00ffff3f 	.word	0x00ffff3f

08004758 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <HAL_RTC_WaitForSynchro+0x48>)
 8004766:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004768:	f7fe fabe 	bl	8002ce8 <HAL_GetTick>
 800476c:	0003      	movs	r3, r0
 800476e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004770:	e00a      	b.n	8004788 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004772:	f7fe fab9 	bl	8002ce8 <HAL_GetTick>
 8004776:	0002      	movs	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	23fa      	movs	r3, #250	; 0xfa
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	429a      	cmp	r2, r3
 8004782:	d901      	bls.n	8004788 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e006      	b.n	8004796 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	4013      	ands	r3, r2
 8004792:	d0ee      	beq.n	8004772 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b004      	add	sp, #16
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	0001005f 	.word	0x0001005f

080047a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80047ac:	230f      	movs	r3, #15
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2240      	movs	r2, #64	; 0x40
 80047bc:	4013      	ands	r3, r2
 80047be:	d12c      	bne.n	800481a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	430a      	orrs	r2, r1
 80047ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80047d0:	f7fe fa8a 	bl	8002ce8 <HAL_GetTick>
 80047d4:	0003      	movs	r3, r0
 80047d6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047d8:	e014      	b.n	8004804 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80047da:	f7fe fa85 	bl	8002ce8 <HAL_GetTick>
 80047de:	0002      	movs	r2, r0
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	200f      	movs	r0, #15
 80047e6:	183b      	adds	r3, r7, r0
 80047e8:	1839      	adds	r1, r7, r0
 80047ea:	7809      	ldrb	r1, [r1, #0]
 80047ec:	7019      	strb	r1, [r3, #0]
 80047ee:	23fa      	movs	r3, #250	; 0xfa
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d906      	bls.n	8004804 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80047f6:	183b      	adds	r3, r7, r0
 80047f8:	2203      	movs	r2, #3
 80047fa:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2229      	movs	r2, #41	; 0x29
 8004800:	2103      	movs	r1, #3
 8004802:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	4013      	ands	r3, r2
 800480e:	d104      	bne.n	800481a <RTC_EnterInitMode+0x76>
 8004810:	230f      	movs	r3, #15
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d1df      	bne.n	80047da <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800481a:	230f      	movs	r3, #15
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	781b      	ldrb	r3, [r3, #0]
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}

08004828 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	240f      	movs	r4, #15
 8004832:	193b      	adds	r3, r7, r4
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <RTC_ExitInitMode+0x84>)
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <RTC_ExitInitMode+0x84>)
 800483e:	2180      	movs	r1, #128	; 0x80
 8004840:	438a      	bics	r2, r1
 8004842:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <RTC_ExitInitMode+0x84>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2220      	movs	r2, #32
 800484a:	4013      	ands	r3, r2
 800484c:	d10d      	bne.n	800486a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	0018      	movs	r0, r3
 8004852:	f7ff ff81 	bl	8004758 <HAL_RTC_WaitForSynchro>
 8004856:	1e03      	subs	r3, r0, #0
 8004858:	d021      	beq.n	800489e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2229      	movs	r2, #41	; 0x29
 800485e:	2103      	movs	r1, #3
 8004860:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004862:	193b      	adds	r3, r7, r4
 8004864:	2203      	movs	r2, #3
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	e019      	b.n	800489e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <RTC_ExitInitMode+0x84>)
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <RTC_ExitInitMode+0x84>)
 8004870:	2120      	movs	r1, #32
 8004872:	438a      	bics	r2, r1
 8004874:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff ff6d 	bl	8004758 <HAL_RTC_WaitForSynchro>
 800487e:	1e03      	subs	r3, r0, #0
 8004880:	d007      	beq.n	8004892 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2229      	movs	r2, #41	; 0x29
 8004886:	2103      	movs	r1, #3
 8004888:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800488a:	230f      	movs	r3, #15
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	2203      	movs	r2, #3
 8004890:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <RTC_ExitInitMode+0x84>)
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <RTC_ExitInitMode+0x84>)
 8004898:	2120      	movs	r1, #32
 800489a:	430a      	orrs	r2, r1
 800489c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800489e:	230f      	movs	r3, #15
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	781b      	ldrb	r3, [r3, #0]
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b005      	add	sp, #20
 80048aa:	bd90      	pop	{r4, r7, pc}
 80048ac:	40002800 	.word	0x40002800

080048b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	0002      	movs	r2, r0
 80048b8:	1dfb      	adds	r3, r7, #7
 80048ba:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80048c0:	230b      	movs	r3, #11
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	1dfa      	adds	r2, r7, #7
 80048c6:	7812      	ldrb	r2, [r2, #0]
 80048c8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80048ca:	e008      	b.n	80048de <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80048d2:	220b      	movs	r2, #11
 80048d4:	18bb      	adds	r3, r7, r2
 80048d6:	18ba      	adds	r2, r7, r2
 80048d8:	7812      	ldrb	r2, [r2, #0]
 80048da:	3a0a      	subs	r2, #10
 80048dc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80048de:	210b      	movs	r1, #11
 80048e0:	187b      	adds	r3, r7, r1
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b09      	cmp	r3, #9
 80048e6:	d8f1      	bhi.n	80048cc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	187b      	adds	r3, r7, r1
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	b2db      	uxtb	r3, r3
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b004      	add	sp, #16
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0a8      	b.n	8004a64 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	2382      	movs	r3, #130	; 0x82
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	429a      	cmp	r2, r3
 8004924:	d009      	beq.n	800493a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	61da      	str	r2, [r3, #28]
 800492c:	e005      	b.n	800493a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	225d      	movs	r2, #93	; 0x5d
 8004944:	5c9b      	ldrb	r3, [r3, r2]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d107      	bne.n	800495c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	225c      	movs	r2, #92	; 0x5c
 8004950:	2100      	movs	r1, #0
 8004952:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	0018      	movs	r0, r3
 8004958:	f7fd ff30 	bl	80027bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	225d      	movs	r2, #93	; 0x5d
 8004960:	2102      	movs	r1, #2
 8004962:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2140      	movs	r1, #64	; 0x40
 8004970:	438a      	bics	r2, r1
 8004972:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	23e0      	movs	r3, #224	; 0xe0
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	429a      	cmp	r2, r3
 800497e:	d902      	bls.n	8004986 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e002      	b.n	800498c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	015b      	lsls	r3, r3, #5
 800498a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	23f0      	movs	r3, #240	; 0xf0
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	429a      	cmp	r2, r3
 8004996:	d008      	beq.n	80049aa <HAL_SPI_Init+0xaa>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	23e0      	movs	r3, #224	; 0xe0
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d002      	beq.n	80049aa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	2382      	movs	r3, #130	; 0x82
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	401a      	ands	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6899      	ldr	r1, [r3, #8]
 80049b8:	2384      	movs	r3, #132	; 0x84
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	400b      	ands	r3, r1
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2102      	movs	r1, #2
 80049c6:	400b      	ands	r3, r1
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2101      	movs	r1, #1
 80049d0:	400b      	ands	r3, r1
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6999      	ldr	r1, [r3, #24]
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	400b      	ands	r3, r1
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	2138      	movs	r1, #56	; 0x38
 80049e6:	400b      	ands	r3, r1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	2180      	movs	r1, #128	; 0x80
 80049f0:	400b      	ands	r3, r1
 80049f2:	431a      	orrs	r2, r3
 80049f4:	0011      	movs	r1, r2
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	401a      	ands	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	2204      	movs	r2, #4
 8004a10:	401a      	ands	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2110      	movs	r1, #16
 8004a18:	400b      	ands	r3, r1
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a20:	2108      	movs	r1, #8
 8004a22:	400b      	ands	r3, r1
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68d9      	ldr	r1, [r3, #12]
 8004a2a:	23f0      	movs	r3, #240	; 0xf0
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	400b      	ands	r3, r1
 8004a30:	431a      	orrs	r2, r3
 8004a32:	0011      	movs	r1, r2
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	015b      	lsls	r3, r3, #5
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4907      	ldr	r1, [pc, #28]	; (8004a6c <HAL_SPI_Init+0x16c>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	225d      	movs	r2, #93	; 0x5d
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b004      	add	sp, #16
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	fffff7ff 	.word	0xfffff7ff

08004a70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	1dbb      	adds	r3, r7, #6
 8004a7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a80:	231f      	movs	r3, #31
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	225c      	movs	r2, #92	; 0x5c
 8004a8c:	5c9b      	ldrb	r3, [r3, r2]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_SPI_Transmit+0x26>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e147      	b.n	8004d26 <HAL_SPI_Transmit+0x2b6>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	225c      	movs	r2, #92	; 0x5c
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a9e:	f7fe f923 	bl	8002ce8 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004aa6:	2316      	movs	r3, #22
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	1dba      	adds	r2, r7, #6
 8004aac:	8812      	ldrh	r2, [r2, #0]
 8004aae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	225d      	movs	r2, #93	; 0x5d
 8004ab4:	5c9b      	ldrb	r3, [r3, r2]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d004      	beq.n	8004ac6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004abc:	231f      	movs	r3, #31
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ac4:	e128      	b.n	8004d18 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_SPI_Transmit+0x64>
 8004acc:	1dbb      	adds	r3, r7, #6
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d104      	bne.n	8004ade <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004ad4:	231f      	movs	r3, #31
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
    goto error;
 8004adc:	e11c      	b.n	8004d18 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	225d      	movs	r2, #93	; 0x5d
 8004ae2:	2103      	movs	r1, #3
 8004ae4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1dba      	adds	r2, r7, #6
 8004af6:	8812      	ldrh	r2, [r2, #0]
 8004af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1dba      	adds	r2, r7, #6
 8004afe:	8812      	ldrh	r2, [r2, #0]
 8004b00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2244      	movs	r2, #68	; 0x44
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2246      	movs	r2, #70	; 0x46
 8004b14:	2100      	movs	r1, #0
 8004b16:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d110      	bne.n	8004b52 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2140      	movs	r1, #64	; 0x40
 8004b3c:	438a      	bics	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2180      	movs	r1, #128	; 0x80
 8004b4c:	01c9      	lsls	r1, r1, #7
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2240      	movs	r2, #64	; 0x40
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d007      	beq.n	8004b70 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2140      	movs	r1, #64	; 0x40
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	23e0      	movs	r3, #224	; 0xe0
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d952      	bls.n	8004c22 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_SPI_Transmit+0x11e>
 8004b84:	2316      	movs	r3, #22
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d143      	bne.n	8004c16 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	881a      	ldrh	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bb2:	e030      	b.n	8004c16 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d112      	bne.n	8004be8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	881a      	ldrh	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004be6:	e016      	b.n	8004c16 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004be8:	f7fe f87e 	bl	8002ce8 <HAL_GetTick>
 8004bec:	0002      	movs	r2, r0
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d802      	bhi.n	8004bfe <HAL_SPI_Transmit+0x18e>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	d102      	bne.n	8004c04 <HAL_SPI_Transmit+0x194>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d108      	bne.n	8004c16 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004c04:	231f      	movs	r3, #31
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	2203      	movs	r2, #3
 8004c0a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	225d      	movs	r2, #93	; 0x5d
 8004c10:	2101      	movs	r1, #1
 8004c12:	5499      	strb	r1, [r3, r2]
          goto error;
 8004c14:	e080      	b.n	8004d18 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1c9      	bne.n	8004bb4 <HAL_SPI_Transmit+0x144>
 8004c20:	e053      	b.n	8004cca <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_SPI_Transmit+0x1c4>
 8004c2a:	2316      	movs	r3, #22
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d145      	bne.n	8004cc0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004c5a:	e031      	b.n	8004cc0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2202      	movs	r2, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d113      	bne.n	8004c92 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c90:	e016      	b.n	8004cc0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c92:	f7fe f829 	bl	8002ce8 <HAL_GetTick>
 8004c96:	0002      	movs	r2, r0
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d802      	bhi.n	8004ca8 <HAL_SPI_Transmit+0x238>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	d102      	bne.n	8004cae <HAL_SPI_Transmit+0x23e>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d108      	bne.n	8004cc0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004cae:	231f      	movs	r3, #31
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	225d      	movs	r2, #93	; 0x5d
 8004cba:	2101      	movs	r1, #1
 8004cbc:	5499      	strb	r1, [r3, r2]
          goto error;
 8004cbe:	e02b      	b.n	8004d18 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1c8      	bne.n	8004c5c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 fcef 	bl	80056b4 <SPI_EndRxTxTransaction>
 8004cd6:	1e03      	subs	r3, r0, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e003      	b.n	8004d18 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	225d      	movs	r2, #93	; 0x5d
 8004d14:	2101      	movs	r1, #1
 8004d16:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	225c      	movs	r2, #92	; 0x5c
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004d20:	231f      	movs	r3, #31
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	781b      	ldrb	r3, [r3, #0]
}
 8004d26:	0018      	movs	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b008      	add	sp, #32
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	1dbb      	adds	r3, r7, #6
 8004d3e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d40:	2117      	movs	r1, #23
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	225d      	movs	r2, #93	; 0x5d
 8004d4c:	5c9b      	ldrb	r3, [r3, r2]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d003      	beq.n	8004d5c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	2202      	movs	r2, #2
 8004d58:	701a      	strb	r2, [r3, #0]
    goto error;
 8004d5a:	e12b      	b.n	8004fb4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	2382      	movs	r3, #130	; 0x82
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d113      	bne.n	8004d90 <HAL_SPI_Receive+0x60>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10f      	bne.n	8004d90 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	225d      	movs	r2, #93	; 0x5d
 8004d74:	2104      	movs	r1, #4
 8004d76:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d78:	1dbb      	adds	r3, r7, #6
 8004d7a:	881c      	ldrh	r4, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	0023      	movs	r3, r4
 8004d88:	f000 f924 	bl	8004fd4 <HAL_SPI_TransmitReceive>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	e118      	b.n	8004fc2 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	225c      	movs	r2, #92	; 0x5c
 8004d94:	5c9b      	ldrb	r3, [r3, r2]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_SPI_Receive+0x6e>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e111      	b.n	8004fc2 <HAL_SPI_Receive+0x292>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	225c      	movs	r2, #92	; 0x5c
 8004da2:	2101      	movs	r1, #1
 8004da4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da6:	f7fd ff9f 	bl	8002ce8 <HAL_GetTick>
 8004daa:	0003      	movs	r3, r0
 8004dac:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_SPI_Receive+0x8c>
 8004db4:	1dbb      	adds	r3, r7, #6
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8004dbc:	2317      	movs	r3, #23
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004dc4:	e0f6      	b.n	8004fb4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	225d      	movs	r2, #93	; 0x5d
 8004dca:	2104      	movs	r1, #4
 8004dcc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1dba      	adds	r2, r7, #6
 8004dde:	2144      	movs	r1, #68	; 0x44
 8004de0:	8812      	ldrh	r2, [r2, #0]
 8004de2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1dba      	adds	r2, r7, #6
 8004de8:	2146      	movs	r1, #70	; 0x46
 8004dea:	8812      	ldrh	r2, [r2, #0]
 8004dec:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	23e0      	movs	r3, #224	; 0xe0
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d908      	bls.n	8004e2a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	496a      	ldr	r1, [pc, #424]	; (8004fcc <HAL_SPI_Receive+0x29c>)
 8004e24:	400a      	ands	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	e008      	b.n	8004e3c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2180      	movs	r1, #128	; 0x80
 8004e36:	0149      	lsls	r1, r1, #5
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d10f      	bne.n	8004e68 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2140      	movs	r1, #64	; 0x40
 8004e54:	438a      	bics	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	495b      	ldr	r1, [pc, #364]	; (8004fd0 <HAL_SPI_Receive+0x2a0>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2240      	movs	r2, #64	; 0x40
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d007      	beq.n	8004e86 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2140      	movs	r1, #64	; 0x40
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	23e0      	movs	r3, #224	; 0xe0
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d900      	bls.n	8004e94 <HAL_SPI_Receive+0x164>
 8004e92:	e071      	b.n	8004f78 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e94:	e035      	b.n	8004f02 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d117      	bne.n	8004ed4 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	001a      	movs	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2246      	movs	r2, #70	; 0x46
 8004ec4:	5a9b      	ldrh	r3, [r3, r2]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b299      	uxth	r1, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2246      	movs	r2, #70	; 0x46
 8004ed0:	5299      	strh	r1, [r3, r2]
 8004ed2:	e016      	b.n	8004f02 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed4:	f7fd ff08 	bl	8002ce8 <HAL_GetTick>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d802      	bhi.n	8004eea <HAL_SPI_Receive+0x1ba>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <HAL_SPI_Receive+0x1c0>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8004ef0:	2317      	movs	r3, #23
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	225d      	movs	r2, #93	; 0x5d
 8004efc:	2101      	movs	r1, #1
 8004efe:	5499      	strb	r1, [r3, r2]
          goto error;
 8004f00:	e058      	b.n	8004fb4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2246      	movs	r2, #70	; 0x46
 8004f06:	5a9b      	ldrh	r3, [r3, r2]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1c3      	bne.n	8004e96 <HAL_SPI_Receive+0x166>
 8004f0e:	e039      	b.n	8004f84 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2201      	movs	r2, #1
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d115      	bne.n	8004f4a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2246      	movs	r2, #70	; 0x46
 8004f3a:	5a9b      	ldrh	r3, [r3, r2]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b299      	uxth	r1, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2246      	movs	r2, #70	; 0x46
 8004f46:	5299      	strh	r1, [r3, r2]
 8004f48:	e016      	b.n	8004f78 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f4a:	f7fd fecd 	bl	8002ce8 <HAL_GetTick>
 8004f4e:	0002      	movs	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d802      	bhi.n	8004f60 <HAL_SPI_Receive+0x230>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	d102      	bne.n	8004f66 <HAL_SPI_Receive+0x236>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8004f66:	2317      	movs	r3, #23
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	225d      	movs	r2, #93	; 0x5d
 8004f72:	2101      	movs	r1, #1
 8004f74:	5499      	strb	r1, [r3, r2]
          goto error;
 8004f76:	e01d      	b.n	8004fb4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2246      	movs	r2, #70	; 0x46
 8004f7c:	5a9b      	ldrh	r3, [r3, r2]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1c5      	bne.n	8004f10 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 fb34 	bl	80055f8 <SPI_EndRxTransaction>
 8004f90:	1e03      	subs	r3, r0, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8004fa2:	2317      	movs	r3, #23
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e003      	b.n	8004fb4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	225d      	movs	r2, #93	; 0x5d
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	225c      	movs	r2, #92	; 0x5c
 8004fb8:	2100      	movs	r1, #0
 8004fba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004fbc:	2317      	movs	r3, #23
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	781b      	ldrb	r3, [r3, #0]
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b007      	add	sp, #28
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	ffffefff 	.word	0xffffefff
 8004fd0:	ffffbfff 	.word	0xffffbfff

08004fd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	001a      	movs	r2, r3
 8004fe2:	1cbb      	adds	r3, r7, #2
 8004fe4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fea:	2323      	movs	r3, #35	; 0x23
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	225c      	movs	r2, #92	; 0x5c
 8004ff6:	5c9b      	ldrb	r3, [r3, r2]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_SPI_TransmitReceive+0x2c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e1c4      	b.n	800538a <HAL_SPI_TransmitReceive+0x3b6>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	225c      	movs	r2, #92	; 0x5c
 8005004:	2101      	movs	r1, #1
 8005006:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005008:	f7fd fe6e 	bl	8002ce8 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005010:	201b      	movs	r0, #27
 8005012:	183b      	adds	r3, r7, r0
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	215d      	movs	r1, #93	; 0x5d
 8005018:	5c52      	ldrb	r2, [r2, r1]
 800501a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005022:	2312      	movs	r3, #18
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	1cba      	adds	r2, r7, #2
 8005028:	8812      	ldrh	r2, [r2, #0]
 800502a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800502c:	183b      	adds	r3, r7, r0
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d011      	beq.n	8005058 <HAL_SPI_TransmitReceive+0x84>
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	2382      	movs	r3, #130	; 0x82
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	429a      	cmp	r2, r3
 800503c:	d107      	bne.n	800504e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <HAL_SPI_TransmitReceive+0x7a>
 8005046:	183b      	adds	r3, r7, r0
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b04      	cmp	r3, #4
 800504c:	d004      	beq.n	8005058 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800504e:	2323      	movs	r3, #35	; 0x23
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	2202      	movs	r2, #2
 8005054:	701a      	strb	r2, [r3, #0]
    goto error;
 8005056:	e191      	b.n	800537c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d006      	beq.n	800506c <HAL_SPI_TransmitReceive+0x98>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_SPI_TransmitReceive+0x98>
 8005064:	1cbb      	adds	r3, r7, #2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800506c:	2323      	movs	r3, #35	; 0x23
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
    goto error;
 8005074:	e182      	b.n	800537c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	225d      	movs	r2, #93	; 0x5d
 800507a:	5c9b      	ldrb	r3, [r3, r2]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b04      	cmp	r3, #4
 8005080:	d003      	beq.n	800508a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	225d      	movs	r2, #93	; 0x5d
 8005086:	2105      	movs	r1, #5
 8005088:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1cba      	adds	r2, r7, #2
 800509a:	2146      	movs	r1, #70	; 0x46
 800509c:	8812      	ldrh	r2, [r2, #0]
 800509e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1cba      	adds	r2, r7, #2
 80050a4:	2144      	movs	r1, #68	; 0x44
 80050a6:	8812      	ldrh	r2, [r2, #0]
 80050a8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1cba      	adds	r2, r7, #2
 80050b4:	8812      	ldrh	r2, [r2, #0]
 80050b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	1cba      	adds	r2, r7, #2
 80050bc:	8812      	ldrh	r2, [r2, #0]
 80050be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	23e0      	movs	r3, #224	; 0xe0
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d908      	bls.n	80050ea <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	49ac      	ldr	r1, [pc, #688]	; (8005394 <HAL_SPI_TransmitReceive+0x3c0>)
 80050e4:	400a      	ands	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
 80050e8:	e008      	b.n	80050fc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2180      	movs	r1, #128	; 0x80
 80050f6:	0149      	lsls	r1, r1, #5
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2240      	movs	r2, #64	; 0x40
 8005104:	4013      	ands	r3, r2
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d007      	beq.n	800511a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2140      	movs	r1, #64	; 0x40
 8005116:	430a      	orrs	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	23e0      	movs	r3, #224	; 0xe0
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	429a      	cmp	r2, r3
 8005124:	d800      	bhi.n	8005128 <HAL_SPI_TransmitReceive+0x154>
 8005126:	e083      	b.n	8005230 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_SPI_TransmitReceive+0x168>
 8005130:	2312      	movs	r3, #18
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d000      	beq.n	800513c <HAL_SPI_TransmitReceive+0x168>
 800513a:	e06d      	b.n	8005218 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005160:	e05a      	b.n	8005218 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2202      	movs	r2, #2
 800516a:	4013      	ands	r3, r2
 800516c:	2b02      	cmp	r3, #2
 800516e:	d11b      	bne.n	80051a8 <HAL_SPI_TransmitReceive+0x1d4>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d016      	beq.n	80051a8 <HAL_SPI_TransmitReceive+0x1d4>
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	2b01      	cmp	r3, #1
 800517e:	d113      	bne.n	80051a8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	881a      	ldrh	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	1c9a      	adds	r2, r3, #2
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2201      	movs	r2, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d11c      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x21c>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2246      	movs	r2, #70	; 0x46
 80051ba:	5a9b      	ldrh	r3, [r3, r2]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	b292      	uxth	r2, r2
 80051ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	1c9a      	adds	r2, r3, #2
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2246      	movs	r2, #70	; 0x46
 80051de:	5a9b      	ldrh	r3, [r3, r2]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b299      	uxth	r1, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2246      	movs	r2, #70	; 0x46
 80051ea:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ec:	2301      	movs	r3, #1
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051f0:	f7fd fd7a 	bl	8002ce8 <HAL_GetTick>
 80051f4:	0002      	movs	r2, r0
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d80b      	bhi.n	8005218 <HAL_SPI_TransmitReceive+0x244>
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	3301      	adds	r3, #1
 8005204:	d008      	beq.n	8005218 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005206:	2323      	movs	r3, #35	; 0x23
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	2203      	movs	r2, #3
 800520c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	225d      	movs	r2, #93	; 0x5d
 8005212:	2101      	movs	r1, #1
 8005214:	5499      	strb	r1, [r3, r2]
        goto error;
 8005216:	e0b1      	b.n	800537c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d19f      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x18e>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2246      	movs	r2, #70	; 0x46
 8005226:	5a9b      	ldrh	r3, [r3, r2]
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d199      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x18e>
 800522e:	e089      	b.n	8005344 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x270>
 8005238:	2312      	movs	r3, #18
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d000      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x270>
 8005242:	e074      	b.n	800532e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800526a:	e060      	b.n	800532e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2202      	movs	r2, #2
 8005274:	4013      	ands	r3, r2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d11c      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x2e0>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d017      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x2e0>
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	2b01      	cmp	r3, #1
 8005288:	d114      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2201      	movs	r2, #1
 80052bc:	4013      	ands	r3, r2
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d11e      	bne.n	8005300 <HAL_SPI_TransmitReceive+0x32c>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2246      	movs	r2, #70	; 0x46
 80052c6:	5a9b      	ldrh	r3, [r3, r2]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d018      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	001a      	movs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2246      	movs	r2, #70	; 0x46
 80052ee:	5a9b      	ldrh	r3, [r3, r2]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b299      	uxth	r1, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2246      	movs	r2, #70	; 0x46
 80052fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052fc:	2301      	movs	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005300:	f7fd fcf2 	bl	8002ce8 <HAL_GetTick>
 8005304:	0002      	movs	r2, r0
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530c:	429a      	cmp	r2, r3
 800530e:	d802      	bhi.n	8005316 <HAL_SPI_TransmitReceive+0x342>
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	3301      	adds	r3, #1
 8005314:	d102      	bne.n	800531c <HAL_SPI_TransmitReceive+0x348>
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	2b00      	cmp	r3, #0
 800531a:	d108      	bne.n	800532e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800531c:	2323      	movs	r3, #35	; 0x23
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	2203      	movs	r2, #3
 8005322:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	225d      	movs	r2, #93	; 0x5d
 8005328:	2101      	movs	r1, #1
 800532a:	5499      	strb	r1, [r3, r2]
        goto error;
 800532c:	e026      	b.n	800537c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d199      	bne.n	800526c <HAL_SPI_TransmitReceive+0x298>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2246      	movs	r2, #70	; 0x46
 800533c:	5a9b      	ldrh	r3, [r3, r2]
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d193      	bne.n	800526c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0018      	movs	r0, r3
 800534c:	f000 f9b2 	bl	80056b4 <SPI_EndRxTxTransaction>
 8005350:	1e03      	subs	r3, r0, #0
 8005352:	d006      	beq.n	8005362 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005354:	2323      	movs	r3, #35	; 0x23
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800536a:	2323      	movs	r3, #35	; 0x23
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	2201      	movs	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e003      	b.n	800537c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	225d      	movs	r2, #93	; 0x5d
 8005378:	2101      	movs	r1, #1
 800537a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	225c      	movs	r2, #92	; 0x5c
 8005380:	2100      	movs	r1, #0
 8005382:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005384:	2323      	movs	r3, #35	; 0x23
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	781b      	ldrb	r3, [r3, #0]
}
 800538a:	0018      	movs	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	b00a      	add	sp, #40	; 0x28
 8005390:	bd80      	pop	{r7, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	ffffefff 	.word	0xffffefff

08005398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	1dfb      	adds	r3, r7, #7
 80053a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a8:	f7fd fc9e 	bl	8002ce8 <HAL_GetTick>
 80053ac:	0002      	movs	r2, r0
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	18d3      	adds	r3, r2, r3
 80053b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b8:	f7fd fc96 	bl	8002ce8 <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053c0:	4b3a      	ldr	r3, [pc, #232]	; (80054ac <SPI_WaitFlagStateUntilTimeout+0x114>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	015b      	lsls	r3, r3, #5
 80053c6:	0d1b      	lsrs	r3, r3, #20
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	4353      	muls	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ce:	e058      	b.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	d055      	beq.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d6:	f7fd fc87 	bl	8002ce8 <HAL_GetTick>
 80053da:	0002      	movs	r2, r0
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d902      	bls.n	80053ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d142      	bne.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	21e0      	movs	r1, #224	; 0xe0
 80053f8:	438a      	bics	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	2382      	movs	r3, #130	; 0x82
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	429a      	cmp	r2, r3
 8005406:	d113      	bne.n	8005430 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	429a      	cmp	r2, r3
 8005412:	d005      	beq.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	429a      	cmp	r2, r3
 800541e:	d107      	bne.n	8005430 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2140      	movs	r1, #64	; 0x40
 800542c:	438a      	bics	r2, r1
 800542e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	019b      	lsls	r3, r3, #6
 8005438:	429a      	cmp	r2, r3
 800543a:	d110      	bne.n	800545e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	491a      	ldr	r1, [pc, #104]	; (80054b0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005448:	400a      	ands	r2, r1
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	0189      	lsls	r1, r1, #6
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	225d      	movs	r2, #93	; 0x5d
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	225c      	movs	r2, #92	; 0x5c
 800546a:	2100      	movs	r1, #0
 800546c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e017      	b.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	3b01      	subs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	4013      	ands	r3, r2
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	425a      	negs	r2, r3
 8005492:	4153      	adcs	r3, r2
 8005494:	b2db      	uxtb	r3, r3
 8005496:	001a      	movs	r2, r3
 8005498:	1dfb      	adds	r3, r7, #7
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d197      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b008      	add	sp, #32
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	20000000 	.word	0x20000000
 80054b0:	ffffdfff 	.word	0xffffdfff

080054b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08a      	sub	sp, #40	; 0x28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054c2:	2317      	movs	r3, #23
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054ca:	f7fd fc0d 	bl	8002ce8 <HAL_GetTick>
 80054ce:	0002      	movs	r2, r0
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	18d3      	adds	r3, r2, r3
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80054da:	f7fd fc05 	bl	8002ce8 <HAL_GetTick>
 80054de:	0003      	movs	r3, r0
 80054e0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054ea:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	0013      	movs	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	00da      	lsls	r2, r3, #3
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	0d1b      	lsrs	r3, r3, #20
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	4353      	muls	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005500:	e068      	b.n	80055d4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	23c0      	movs	r3, #192	; 0xc0
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	429a      	cmp	r2, r3
 800550a:	d10a      	bne.n	8005522 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	2117      	movs	r1, #23
 800551a:	187b      	adds	r3, r7, r1
 800551c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800551e:	187b      	adds	r3, r7, r1
 8005520:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	d055      	beq.n	80055d4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005528:	f7fd fbde 	bl	8002ce8 <HAL_GetTick>
 800552c:	0002      	movs	r2, r0
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005534:	429a      	cmp	r2, r3
 8005536:	d902      	bls.n	800553e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d142      	bne.n	80055c4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	21e0      	movs	r1, #224	; 0xe0
 800554a:	438a      	bics	r2, r1
 800554c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	2382      	movs	r3, #130	; 0x82
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	429a      	cmp	r2, r3
 8005558:	d113      	bne.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xce>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	429a      	cmp	r2, r3
 8005564:	d005      	beq.n	8005572 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	429a      	cmp	r2, r3
 8005570:	d107      	bne.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2140      	movs	r1, #64	; 0x40
 800557e:	438a      	bics	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	429a      	cmp	r2, r3
 800558c:	d110      	bne.n	80055b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4916      	ldr	r1, [pc, #88]	; (80055f4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800559a:	400a      	ands	r2, r1
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	0189      	lsls	r1, r1, #6
 80055ac:	430a      	orrs	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	225d      	movs	r2, #93	; 0x5d
 80055b4:	2101      	movs	r1, #1
 80055b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	225c      	movs	r2, #92	; 0x5c
 80055bc:	2100      	movs	r1, #0
 80055be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e010      	b.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d18e      	bne.n	8005502 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b00a      	add	sp, #40	; 0x28
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	20000000 	.word	0x20000000
 80055f4:	ffffdfff 	.word	0xffffdfff

080055f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	2382      	movs	r3, #130	; 0x82
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	429a      	cmp	r2, r3
 800560e:	d113      	bne.n	8005638 <SPI_EndRxTransaction+0x40>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	429a      	cmp	r2, r3
 800561a:	d005      	beq.n	8005628 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	429a      	cmp	r2, r3
 8005626:	d107      	bne.n	8005638 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2140      	movs	r1, #64	; 0x40
 8005634:	438a      	bics	r2, r1
 8005636:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	0013      	movs	r3, r2
 8005642:	2200      	movs	r2, #0
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	f7ff fea7 	bl	8005398 <SPI_WaitFlagStateUntilTimeout>
 800564a:	1e03      	subs	r3, r0, #0
 800564c:	d007      	beq.n	800565e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005652:	2220      	movs	r2, #32
 8005654:	431a      	orrs	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e026      	b.n	80056ac <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	2382      	movs	r3, #130	; 0x82
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	429a      	cmp	r2, r3
 8005668:	d11f      	bne.n	80056aa <SPI_EndRxTransaction+0xb2>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	429a      	cmp	r2, r3
 8005674:	d005      	beq.n	8005682 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	429a      	cmp	r2, r3
 8005680:	d113      	bne.n	80056aa <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	23c0      	movs	r3, #192	; 0xc0
 8005686:	00d9      	lsls	r1, r3, #3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	0013      	movs	r3, r2
 8005690:	2200      	movs	r2, #0
 8005692:	f7ff ff0f 	bl	80054b4 <SPI_WaitFifoStateUntilTimeout>
 8005696:	1e03      	subs	r3, r0, #0
 8005698:	d007      	beq.n	80056aa <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569e:	2220      	movs	r2, #32
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e000      	b.n	80056ac <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	0018      	movs	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b004      	add	sp, #16
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	23c0      	movs	r3, #192	; 0xc0
 80056c4:	0159      	lsls	r1, r3, #5
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	0013      	movs	r3, r2
 80056ce:	2200      	movs	r2, #0
 80056d0:	f7ff fef0 	bl	80054b4 <SPI_WaitFifoStateUntilTimeout>
 80056d4:	1e03      	subs	r3, r0, #0
 80056d6:	d007      	beq.n	80056e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056dc:	2220      	movs	r2, #32
 80056de:	431a      	orrs	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e027      	b.n	8005738 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	0013      	movs	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	f7ff fe4f 	bl	8005398 <SPI_WaitFlagStateUntilTimeout>
 80056fa:	1e03      	subs	r3, r0, #0
 80056fc:	d007      	beq.n	800570e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005702:	2220      	movs	r2, #32
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e014      	b.n	8005738 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	23c0      	movs	r3, #192	; 0xc0
 8005712:	00d9      	lsls	r1, r3, #3
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	0013      	movs	r3, r2
 800571c:	2200      	movs	r2, #0
 800571e:	f7ff fec9 	bl	80054b4 <SPI_WaitFifoStateUntilTimeout>
 8005722:	1e03      	subs	r3, r0, #0
 8005724:	d007      	beq.n	8005736 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572a:	2220      	movs	r2, #32
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e000      	b.n	8005738 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	b004      	add	sp, #16
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e04a      	b.n	80057e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	223d      	movs	r2, #61	; 0x3d
 8005756:	5c9b      	ldrb	r3, [r3, r2]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	223c      	movs	r2, #60	; 0x3c
 8005762:	2100      	movs	r1, #0
 8005764:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	0018      	movs	r0, r3
 800576a:	f7fd f871 	bl	8002850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	223d      	movs	r2, #61	; 0x3d
 8005772:	2102      	movs	r1, #2
 8005774:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3304      	adds	r3, #4
 800577e:	0019      	movs	r1, r3
 8005780:	0010      	movs	r0, r2
 8005782:	f000 f835 	bl	80057f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2248      	movs	r2, #72	; 0x48
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	223e      	movs	r2, #62	; 0x3e
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	223f      	movs	r2, #63	; 0x3f
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2240      	movs	r2, #64	; 0x40
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2241      	movs	r2, #65	; 0x41
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2242      	movs	r2, #66	; 0x42
 80057b2:	2101      	movs	r1, #1
 80057b4:	5499      	strb	r1, [r3, r2]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2243      	movs	r2, #67	; 0x43
 80057ba:	2101      	movs	r1, #1
 80057bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2244      	movs	r2, #68	; 0x44
 80057c2:	2101      	movs	r1, #1
 80057c4:	5499      	strb	r1, [r3, r2]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2245      	movs	r2, #69	; 0x45
 80057ca:	2101      	movs	r1, #1
 80057cc:	5499      	strb	r1, [r3, r2]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2246      	movs	r2, #70	; 0x46
 80057d2:	2101      	movs	r1, #1
 80057d4:	5499      	strb	r1, [r3, r2]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2247      	movs	r2, #71	; 0x47
 80057da:	2101      	movs	r1, #1
 80057dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	223d      	movs	r2, #61	; 0x3d
 80057e2:	2101      	movs	r1, #1
 80057e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b002      	add	sp, #8
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3f      	ldr	r2, [pc, #252]	; (8005900 <TIM_Base_SetConfig+0x110>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00c      	beq.n	8005822 <TIM_Base_SetConfig+0x32>
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	05db      	lsls	r3, r3, #23
 800580e:	429a      	cmp	r2, r3
 8005810:	d007      	beq.n	8005822 <TIM_Base_SetConfig+0x32>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a3b      	ldr	r2, [pc, #236]	; (8005904 <TIM_Base_SetConfig+0x114>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_Base_SetConfig+0x32>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a3a      	ldr	r2, [pc, #232]	; (8005908 <TIM_Base_SetConfig+0x118>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d108      	bne.n	8005834 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2270      	movs	r2, #112	; 0x70
 8005826:	4393      	bics	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a32      	ldr	r2, [pc, #200]	; (8005900 <TIM_Base_SetConfig+0x110>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01c      	beq.n	8005876 <TIM_Base_SetConfig+0x86>
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	05db      	lsls	r3, r3, #23
 8005842:	429a      	cmp	r2, r3
 8005844:	d017      	beq.n	8005876 <TIM_Base_SetConfig+0x86>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2e      	ldr	r2, [pc, #184]	; (8005904 <TIM_Base_SetConfig+0x114>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <TIM_Base_SetConfig+0x86>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2d      	ldr	r2, [pc, #180]	; (8005908 <TIM_Base_SetConfig+0x118>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_Base_SetConfig+0x86>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2c      	ldr	r2, [pc, #176]	; (800590c <TIM_Base_SetConfig+0x11c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0x86>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2b      	ldr	r2, [pc, #172]	; (8005910 <TIM_Base_SetConfig+0x120>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0x86>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <TIM_Base_SetConfig+0x124>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0x86>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a29      	ldr	r2, [pc, #164]	; (8005918 <TIM_Base_SetConfig+0x128>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a28      	ldr	r2, [pc, #160]	; (800591c <TIM_Base_SetConfig+0x12c>)
 800587a:	4013      	ands	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2280      	movs	r2, #128	; 0x80
 800588c:	4393      	bics	r3, r2
 800588e:	001a      	movs	r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a13      	ldr	r2, [pc, #76]	; (8005900 <TIM_Base_SetConfig+0x110>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_Base_SetConfig+0xde>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a15      	ldr	r2, [pc, #84]	; (8005910 <TIM_Base_SetConfig+0x120>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_Base_SetConfig+0xde>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a14      	ldr	r2, [pc, #80]	; (8005914 <TIM_Base_SetConfig+0x124>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_Base_SetConfig+0xde>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a13      	ldr	r2, [pc, #76]	; (8005918 <TIM_Base_SetConfig+0x128>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d103      	bne.n	80058d6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	2201      	movs	r2, #1
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d106      	bne.n	80058f6 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2201      	movs	r2, #1
 80058ee:	4393      	bics	r3, r2
 80058f0:	001a      	movs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	611a      	str	r2, [r3, #16]
  }
}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b004      	add	sp, #16
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	40002000 	.word	0x40002000
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800
 800591c:	fffffcff 	.word	0xfffffcff

08005920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	223c      	movs	r2, #60	; 0x3c
 800592e:	5c9b      	ldrb	r3, [r3, r2]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005934:	2302      	movs	r3, #2
 8005936:	e05a      	b.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	223c      	movs	r2, #60	; 0x3c
 800593c:	2101      	movs	r1, #1
 800593e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	223d      	movs	r2, #61	; 0x3d
 8005944:	2102      	movs	r1, #2
 8005946:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d108      	bne.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a25      	ldr	r2, [pc, #148]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005966:	4013      	ands	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2270      	movs	r2, #112	; 0x70
 8005978:	4393      	bics	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d014      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	05db      	lsls	r3, r3, #23
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d00e      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10c      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2280      	movs	r2, #128	; 0x80
 80059c6:	4393      	bics	r3, r2
 80059c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	223d      	movs	r2, #61	; 0x3d
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	223c      	movs	r2, #60	; 0x3c
 80059e8:	2100      	movs	r1, #0
 80059ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b004      	add	sp, #16
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	ff0fffff 	.word	0xff0fffff
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40014000 	.word	0x40014000

08005a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e046      	b.n	8005aac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2288      	movs	r2, #136	; 0x88
 8005a22:	589b      	ldr	r3, [r3, r2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d107      	bne.n	8005a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2284      	movs	r2, #132	; 0x84
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7fc ff2a 	bl	800288c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2288      	movs	r2, #136	; 0x88
 8005a3c:	2124      	movs	r1, #36	; 0x24
 8005a3e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 fd4c 	bl	80064f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 f9f2 	bl	8005e4c <UART_SetConfig>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e01c      	b.n	8005aac <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	490d      	ldr	r1, [pc, #52]	; (8005ab4 <HAL_UART_Init+0xa8>)
 8005a7e:	400a      	ands	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	212a      	movs	r1, #42	; 0x2a
 8005a8e:	438a      	bics	r2, r1
 8005a90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 fddb 	bl	8006660 <UART_CheckIdleState>
 8005aaa:	0003      	movs	r3, r0
}
 8005aac:	0018      	movs	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	ffffb7ff 	.word	0xffffb7ff

08005ab8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e032      	b.n	8005b30 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2288      	movs	r2, #136	; 0x88
 8005ace:	2124      	movs	r1, #36	; 0x24
 8005ad0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2101      	movs	r1, #1
 8005ade:	438a      	bics	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7fc ffa9 	bl	8002a54 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2290      	movs	r2, #144	; 0x90
 8005b06:	2100      	movs	r1, #0
 8005b08:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2288      	movs	r2, #136	; 0x88
 8005b0e:	2100      	movs	r1, #0
 8005b10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	228c      	movs	r2, #140	; 0x8c
 8005b16:	2100      	movs	r1, #0
 8005b18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2284      	movs	r2, #132	; 0x84
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	0018      	movs	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b002      	add	sp, #8
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	1dbb      	adds	r3, r7, #6
 8005b46:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2288      	movs	r2, #136	; 0x88
 8005b4c:	589b      	ldr	r3, [r3, r2]
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d000      	beq.n	8005b54 <HAL_UART_Transmit+0x1c>
 8005b52:	e090      	b.n	8005c76 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_UART_Transmit+0x2a>
 8005b5a:	1dbb      	adds	r3, r7, #6
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e088      	b.n	8005c78 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	2380      	movs	r3, #128	; 0x80
 8005b6c:	015b      	lsls	r3, r3, #5
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d109      	bne.n	8005b86 <HAL_UART_Transmit+0x4e>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d105      	bne.n	8005b86 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d001      	beq.n	8005b86 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e078      	b.n	8005c78 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2290      	movs	r2, #144	; 0x90
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2288      	movs	r2, #136	; 0x88
 8005b92:	2121      	movs	r1, #33	; 0x21
 8005b94:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b96:	f7fd f8a7 	bl	8002ce8 <HAL_GetTick>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1dba      	adds	r2, r7, #6
 8005ba2:	2154      	movs	r1, #84	; 0x54
 8005ba4:	8812      	ldrh	r2, [r2, #0]
 8005ba6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1dba      	adds	r2, r7, #6
 8005bac:	2156      	movs	r1, #86	; 0x56
 8005bae:	8812      	ldrh	r2, [r2, #0]
 8005bb0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	015b      	lsls	r3, r3, #5
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d108      	bne.n	8005bd0 <HAL_UART_Transmit+0x98>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e003      	b.n	8005bd8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bd8:	e030      	b.n	8005c3c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	0013      	movs	r3, r2
 8005be4:	2200      	movs	r2, #0
 8005be6:	2180      	movs	r1, #128	; 0x80
 8005be8:	f000 fde4 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 8005bec:	1e03      	subs	r3, r0, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2288      	movs	r2, #136	; 0x88
 8005bf4:	2120      	movs	r1, #32
 8005bf6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e03d      	b.n	8005c78 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	001a      	movs	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	05d2      	lsls	r2, r2, #23
 8005c0e:	0dd2      	lsrs	r2, r2, #23
 8005c10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3302      	adds	r3, #2
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e007      	b.n	8005c2a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2256      	movs	r2, #86	; 0x56
 8005c2e:	5a9b      	ldrh	r3, [r3, r2]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b299      	uxth	r1, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2256      	movs	r2, #86	; 0x56
 8005c3a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2256      	movs	r2, #86	; 0x56
 8005c40:	5a9b      	ldrh	r3, [r3, r2]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1c8      	bne.n	8005bda <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	0013      	movs	r3, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	2140      	movs	r1, #64	; 0x40
 8005c56:	f000 fdad 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 8005c5a:	1e03      	subs	r3, r0, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2288      	movs	r2, #136	; 0x88
 8005c62:	2120      	movs	r1, #32
 8005c64:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e006      	b.n	8005c78 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2288      	movs	r2, #136	; 0x88
 8005c6e:	2120      	movs	r1, #32
 8005c70:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
  }
}
 8005c78:	0018      	movs	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b008      	add	sp, #32
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	1dbb      	adds	r3, r7, #6
 8005c8e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	228c      	movs	r2, #140	; 0x8c
 8005c94:	589b      	ldr	r3, [r3, r2]
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d000      	beq.n	8005c9c <HAL_UART_Receive+0x1c>
 8005c9a:	e0d0      	b.n	8005e3e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_UART_Receive+0x2a>
 8005ca2:	1dbb      	adds	r3, r7, #6
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e0c8      	b.n	8005e40 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	015b      	lsls	r3, r3, #5
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d109      	bne.n	8005cce <HAL_UART_Receive+0x4e>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d001      	beq.n	8005cce <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e0b8      	b.n	8005e40 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2290      	movs	r2, #144	; 0x90
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	228c      	movs	r2, #140	; 0x8c
 8005cda:	2122      	movs	r1, #34	; 0x22
 8005cdc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce4:	f7fd f800 	bl	8002ce8 <HAL_GetTick>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1dba      	adds	r2, r7, #6
 8005cf0:	215c      	movs	r1, #92	; 0x5c
 8005cf2:	8812      	ldrh	r2, [r2, #0]
 8005cf4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1dba      	adds	r2, r7, #6
 8005cfa:	215e      	movs	r1, #94	; 0x5e
 8005cfc:	8812      	ldrh	r2, [r2, #0]
 8005cfe:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	015b      	lsls	r3, r3, #5
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d10d      	bne.n	8005d28 <HAL_UART_Receive+0xa8>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_UART_Receive+0x9e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2260      	movs	r2, #96	; 0x60
 8005d18:	494b      	ldr	r1, [pc, #300]	; (8005e48 <HAL_UART_Receive+0x1c8>)
 8005d1a:	5299      	strh	r1, [r3, r2]
 8005d1c:	e02e      	b.n	8005d7c <HAL_UART_Receive+0xfc>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2260      	movs	r2, #96	; 0x60
 8005d22:	21ff      	movs	r1, #255	; 0xff
 8005d24:	5299      	strh	r1, [r3, r2]
 8005d26:	e029      	b.n	8005d7c <HAL_UART_Receive+0xfc>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10d      	bne.n	8005d4c <HAL_UART_Receive+0xcc>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_UART_Receive+0xc2>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2260      	movs	r2, #96	; 0x60
 8005d3c:	21ff      	movs	r1, #255	; 0xff
 8005d3e:	5299      	strh	r1, [r3, r2]
 8005d40:	e01c      	b.n	8005d7c <HAL_UART_Receive+0xfc>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2260      	movs	r2, #96	; 0x60
 8005d46:	217f      	movs	r1, #127	; 0x7f
 8005d48:	5299      	strh	r1, [r3, r2]
 8005d4a:	e017      	b.n	8005d7c <HAL_UART_Receive+0xfc>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	055b      	lsls	r3, r3, #21
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d10d      	bne.n	8005d74 <HAL_UART_Receive+0xf4>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <HAL_UART_Receive+0xea>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2260      	movs	r2, #96	; 0x60
 8005d64:	217f      	movs	r1, #127	; 0x7f
 8005d66:	5299      	strh	r1, [r3, r2]
 8005d68:	e008      	b.n	8005d7c <HAL_UART_Receive+0xfc>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2260      	movs	r2, #96	; 0x60
 8005d6e:	213f      	movs	r1, #63	; 0x3f
 8005d70:	5299      	strh	r1, [r3, r2]
 8005d72:	e003      	b.n	8005d7c <HAL_UART_Receive+0xfc>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2260      	movs	r2, #96	; 0x60
 8005d78:	2100      	movs	r1, #0
 8005d7a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005d7c:	2312      	movs	r3, #18
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	2160      	movs	r1, #96	; 0x60
 8005d84:	5a52      	ldrh	r2, [r2, r1]
 8005d86:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	015b      	lsls	r3, r3, #5
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d108      	bne.n	8005da6 <HAL_UART_Receive+0x126>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	e003      	b.n	8005dae <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005dae:	e03a      	b.n	8005e26 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	0013      	movs	r3, r2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2120      	movs	r1, #32
 8005dbe:	f000 fcf9 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 8005dc2:	1e03      	subs	r3, r0, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	228c      	movs	r2, #140	; 0x8c
 8005dca:	2120      	movs	r1, #32
 8005dcc:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e036      	b.n	8005e40 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10e      	bne.n	8005df6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2212      	movs	r2, #18
 8005de2:	18ba      	adds	r2, r7, r2
 8005de4:	8812      	ldrh	r2, [r2, #0]
 8005de6:	4013      	ands	r3, r2
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	3302      	adds	r3, #2
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	e00e      	b.n	8005e14 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2212      	movs	r2, #18
 8005e00:	18ba      	adds	r2, r7, r2
 8005e02:	8812      	ldrh	r2, [r2, #0]
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	4013      	ands	r3, r2
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	225e      	movs	r2, #94	; 0x5e
 8005e18:	5a9b      	ldrh	r3, [r3, r2]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b299      	uxth	r1, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	225e      	movs	r2, #94	; 0x5e
 8005e24:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	225e      	movs	r2, #94	; 0x5e
 8005e2a:	5a9b      	ldrh	r3, [r3, r2]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1be      	bne.n	8005db0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	228c      	movs	r2, #140	; 0x8c
 8005e36:	2120      	movs	r1, #32
 8005e38:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e000      	b.n	8005e40 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
  }
}
 8005e40:	0018      	movs	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b008      	add	sp, #32
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	000001ff 	.word	0x000001ff

08005e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	b5b0      	push	{r4, r5, r7, lr}
 8005e4e:	b090      	sub	sp, #64	; 0x40
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e54:	231a      	movs	r3, #26
 8005e56:	2220      	movs	r2, #32
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	19db      	adds	r3, r3, r7
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4ac1      	ldr	r2, [pc, #772]	; (8006184 <UART_SetConfig+0x338>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	0019      	movs	r1, r3
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	4abc      	ldr	r2, [pc, #752]	; (8006188 <UART_SetConfig+0x33c>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	0018      	movs	r0, r3
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	68d9      	ldr	r1, [r3, #12]
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4ab6      	ldr	r2, [pc, #728]	; (800618c <UART_SetConfig+0x340>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <UART_SetConfig+0x80>
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4ab4      	ldr	r2, [pc, #720]	; (8006190 <UART_SetConfig+0x344>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	4ab0      	ldr	r2, [pc, #704]	; (8006194 <UART_SetConfig+0x348>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	220f      	movs	r2, #15
 8005eea:	4393      	bics	r3, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4aa5      	ldr	r2, [pc, #660]	; (8006198 <UART_SetConfig+0x34c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d131      	bne.n	8005f6a <UART_SetConfig+0x11e>
 8005f06:	4ba5      	ldr	r3, [pc, #660]	; (800619c <UART_SetConfig+0x350>)
 8005f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d01d      	beq.n	8005f4e <UART_SetConfig+0x102>
 8005f12:	d823      	bhi.n	8005f5c <UART_SetConfig+0x110>
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d00c      	beq.n	8005f32 <UART_SetConfig+0xe6>
 8005f18:	d820      	bhi.n	8005f5c <UART_SetConfig+0x110>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <UART_SetConfig+0xd8>
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d00e      	beq.n	8005f40 <UART_SetConfig+0xf4>
 8005f22:	e01b      	b.n	8005f5c <UART_SetConfig+0x110>
 8005f24:	231b      	movs	r3, #27
 8005f26:	2220      	movs	r2, #32
 8005f28:	189b      	adds	r3, r3, r2
 8005f2a:	19db      	adds	r3, r3, r7
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	e154      	b.n	80061dc <UART_SetConfig+0x390>
 8005f32:	231b      	movs	r3, #27
 8005f34:	2220      	movs	r2, #32
 8005f36:	189b      	adds	r3, r3, r2
 8005f38:	19db      	adds	r3, r3, r7
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	e14d      	b.n	80061dc <UART_SetConfig+0x390>
 8005f40:	231b      	movs	r3, #27
 8005f42:	2220      	movs	r2, #32
 8005f44:	189b      	adds	r3, r3, r2
 8005f46:	19db      	adds	r3, r3, r7
 8005f48:	2204      	movs	r2, #4
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	e146      	b.n	80061dc <UART_SetConfig+0x390>
 8005f4e:	231b      	movs	r3, #27
 8005f50:	2220      	movs	r2, #32
 8005f52:	189b      	adds	r3, r3, r2
 8005f54:	19db      	adds	r3, r3, r7
 8005f56:	2208      	movs	r2, #8
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	e13f      	b.n	80061dc <UART_SetConfig+0x390>
 8005f5c:	231b      	movs	r3, #27
 8005f5e:	2220      	movs	r2, #32
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	19db      	adds	r3, r3, r7
 8005f64:	2210      	movs	r2, #16
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e138      	b.n	80061dc <UART_SetConfig+0x390>
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a8c      	ldr	r2, [pc, #560]	; (80061a0 <UART_SetConfig+0x354>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d131      	bne.n	8005fd8 <UART_SetConfig+0x18c>
 8005f74:	4b89      	ldr	r3, [pc, #548]	; (800619c <UART_SetConfig+0x350>)
 8005f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f78:	220c      	movs	r2, #12
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b0c      	cmp	r3, #12
 8005f7e:	d01d      	beq.n	8005fbc <UART_SetConfig+0x170>
 8005f80:	d823      	bhi.n	8005fca <UART_SetConfig+0x17e>
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d00c      	beq.n	8005fa0 <UART_SetConfig+0x154>
 8005f86:	d820      	bhi.n	8005fca <UART_SetConfig+0x17e>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <UART_SetConfig+0x146>
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d00e      	beq.n	8005fae <UART_SetConfig+0x162>
 8005f90:	e01b      	b.n	8005fca <UART_SetConfig+0x17e>
 8005f92:	231b      	movs	r3, #27
 8005f94:	2220      	movs	r2, #32
 8005f96:	189b      	adds	r3, r3, r2
 8005f98:	19db      	adds	r3, r3, r7
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e11d      	b.n	80061dc <UART_SetConfig+0x390>
 8005fa0:	231b      	movs	r3, #27
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	189b      	adds	r3, r3, r2
 8005fa6:	19db      	adds	r3, r3, r7
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	e116      	b.n	80061dc <UART_SetConfig+0x390>
 8005fae:	231b      	movs	r3, #27
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	189b      	adds	r3, r3, r2
 8005fb4:	19db      	adds	r3, r3, r7
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e10f      	b.n	80061dc <UART_SetConfig+0x390>
 8005fbc:	231b      	movs	r3, #27
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	189b      	adds	r3, r3, r2
 8005fc2:	19db      	adds	r3, r3, r7
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	e108      	b.n	80061dc <UART_SetConfig+0x390>
 8005fca:	231b      	movs	r3, #27
 8005fcc:	2220      	movs	r2, #32
 8005fce:	189b      	adds	r3, r3, r2
 8005fd0:	19db      	adds	r3, r3, r7
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	e101      	b.n	80061dc <UART_SetConfig+0x390>
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a71      	ldr	r2, [pc, #452]	; (80061a4 <UART_SetConfig+0x358>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d131      	bne.n	8006046 <UART_SetConfig+0x1fa>
 8005fe2:	4b6e      	ldr	r3, [pc, #440]	; (800619c <UART_SetConfig+0x350>)
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	2230      	movs	r2, #48	; 0x30
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b30      	cmp	r3, #48	; 0x30
 8005fec:	d01d      	beq.n	800602a <UART_SetConfig+0x1de>
 8005fee:	d823      	bhi.n	8006038 <UART_SetConfig+0x1ec>
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d00c      	beq.n	800600e <UART_SetConfig+0x1c2>
 8005ff4:	d820      	bhi.n	8006038 <UART_SetConfig+0x1ec>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <UART_SetConfig+0x1b4>
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d00e      	beq.n	800601c <UART_SetConfig+0x1d0>
 8005ffe:	e01b      	b.n	8006038 <UART_SetConfig+0x1ec>
 8006000:	231b      	movs	r3, #27
 8006002:	2220      	movs	r2, #32
 8006004:	189b      	adds	r3, r3, r2
 8006006:	19db      	adds	r3, r3, r7
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e0e6      	b.n	80061dc <UART_SetConfig+0x390>
 800600e:	231b      	movs	r3, #27
 8006010:	2220      	movs	r2, #32
 8006012:	189b      	adds	r3, r3, r2
 8006014:	19db      	adds	r3, r3, r7
 8006016:	2202      	movs	r2, #2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	e0df      	b.n	80061dc <UART_SetConfig+0x390>
 800601c:	231b      	movs	r3, #27
 800601e:	2220      	movs	r2, #32
 8006020:	189b      	adds	r3, r3, r2
 8006022:	19db      	adds	r3, r3, r7
 8006024:	2204      	movs	r2, #4
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e0d8      	b.n	80061dc <UART_SetConfig+0x390>
 800602a:	231b      	movs	r3, #27
 800602c:	2220      	movs	r2, #32
 800602e:	189b      	adds	r3, r3, r2
 8006030:	19db      	adds	r3, r3, r7
 8006032:	2208      	movs	r2, #8
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e0d1      	b.n	80061dc <UART_SetConfig+0x390>
 8006038:	231b      	movs	r3, #27
 800603a:	2220      	movs	r2, #32
 800603c:	189b      	adds	r3, r3, r2
 800603e:	19db      	adds	r3, r3, r7
 8006040:	2210      	movs	r2, #16
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e0ca      	b.n	80061dc <UART_SetConfig+0x390>
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a57      	ldr	r2, [pc, #348]	; (80061a8 <UART_SetConfig+0x35c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d106      	bne.n	800605e <UART_SetConfig+0x212>
 8006050:	231b      	movs	r3, #27
 8006052:	2220      	movs	r2, #32
 8006054:	189b      	adds	r3, r3, r2
 8006056:	19db      	adds	r3, r3, r7
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e0be      	b.n	80061dc <UART_SetConfig+0x390>
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a52      	ldr	r2, [pc, #328]	; (80061ac <UART_SetConfig+0x360>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d106      	bne.n	8006076 <UART_SetConfig+0x22a>
 8006068:	231b      	movs	r3, #27
 800606a:	2220      	movs	r2, #32
 800606c:	189b      	adds	r3, r3, r2
 800606e:	19db      	adds	r3, r3, r7
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	e0b2      	b.n	80061dc <UART_SetConfig+0x390>
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a4d      	ldr	r2, [pc, #308]	; (80061b0 <UART_SetConfig+0x364>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d106      	bne.n	800608e <UART_SetConfig+0x242>
 8006080:	231b      	movs	r3, #27
 8006082:	2220      	movs	r2, #32
 8006084:	189b      	adds	r3, r3, r2
 8006086:	19db      	adds	r3, r3, r7
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e0a6      	b.n	80061dc <UART_SetConfig+0x390>
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a3e      	ldr	r2, [pc, #248]	; (800618c <UART_SetConfig+0x340>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d13e      	bne.n	8006116 <UART_SetConfig+0x2ca>
 8006098:	4b40      	ldr	r3, [pc, #256]	; (800619c <UART_SetConfig+0x350>)
 800609a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800609c:	23c0      	movs	r3, #192	; 0xc0
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4013      	ands	r3, r2
 80060a2:	22c0      	movs	r2, #192	; 0xc0
 80060a4:	0112      	lsls	r2, r2, #4
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d027      	beq.n	80060fa <UART_SetConfig+0x2ae>
 80060aa:	22c0      	movs	r2, #192	; 0xc0
 80060ac:	0112      	lsls	r2, r2, #4
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d82a      	bhi.n	8006108 <UART_SetConfig+0x2bc>
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	0112      	lsls	r2, r2, #4
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d011      	beq.n	80060de <UART_SetConfig+0x292>
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	0112      	lsls	r2, r2, #4
 80060be:	4293      	cmp	r3, r2
 80060c0:	d822      	bhi.n	8006108 <UART_SetConfig+0x2bc>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <UART_SetConfig+0x284>
 80060c6:	2280      	movs	r2, #128	; 0x80
 80060c8:	00d2      	lsls	r2, r2, #3
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00e      	beq.n	80060ec <UART_SetConfig+0x2a0>
 80060ce:	e01b      	b.n	8006108 <UART_SetConfig+0x2bc>
 80060d0:	231b      	movs	r3, #27
 80060d2:	2220      	movs	r2, #32
 80060d4:	189b      	adds	r3, r3, r2
 80060d6:	19db      	adds	r3, r3, r7
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	e07e      	b.n	80061dc <UART_SetConfig+0x390>
 80060de:	231b      	movs	r3, #27
 80060e0:	2220      	movs	r2, #32
 80060e2:	189b      	adds	r3, r3, r2
 80060e4:	19db      	adds	r3, r3, r7
 80060e6:	2202      	movs	r2, #2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	e077      	b.n	80061dc <UART_SetConfig+0x390>
 80060ec:	231b      	movs	r3, #27
 80060ee:	2220      	movs	r2, #32
 80060f0:	189b      	adds	r3, r3, r2
 80060f2:	19db      	adds	r3, r3, r7
 80060f4:	2204      	movs	r2, #4
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e070      	b.n	80061dc <UART_SetConfig+0x390>
 80060fa:	231b      	movs	r3, #27
 80060fc:	2220      	movs	r2, #32
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	19db      	adds	r3, r3, r7
 8006102:	2208      	movs	r2, #8
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e069      	b.n	80061dc <UART_SetConfig+0x390>
 8006108:	231b      	movs	r3, #27
 800610a:	2220      	movs	r2, #32
 800610c:	189b      	adds	r3, r3, r2
 800610e:	19db      	adds	r3, r3, r7
 8006110:	2210      	movs	r2, #16
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	e062      	b.n	80061dc <UART_SetConfig+0x390>
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <UART_SetConfig+0x344>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d157      	bne.n	80061d0 <UART_SetConfig+0x384>
 8006120:	4b1e      	ldr	r3, [pc, #120]	; (800619c <UART_SetConfig+0x350>)
 8006122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006124:	23c0      	movs	r3, #192	; 0xc0
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4013      	ands	r3, r2
 800612a:	22c0      	movs	r2, #192	; 0xc0
 800612c:	0092      	lsls	r2, r2, #2
 800612e:	4293      	cmp	r3, r2
 8006130:	d040      	beq.n	80061b4 <UART_SetConfig+0x368>
 8006132:	22c0      	movs	r2, #192	; 0xc0
 8006134:	0092      	lsls	r2, r2, #2
 8006136:	4293      	cmp	r3, r2
 8006138:	d843      	bhi.n	80061c2 <UART_SetConfig+0x376>
 800613a:	2280      	movs	r2, #128	; 0x80
 800613c:	0092      	lsls	r2, r2, #2
 800613e:	4293      	cmp	r3, r2
 8006140:	d011      	beq.n	8006166 <UART_SetConfig+0x31a>
 8006142:	2280      	movs	r2, #128	; 0x80
 8006144:	0092      	lsls	r2, r2, #2
 8006146:	4293      	cmp	r3, r2
 8006148:	d83b      	bhi.n	80061c2 <UART_SetConfig+0x376>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <UART_SetConfig+0x30c>
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	0052      	lsls	r2, r2, #1
 8006152:	4293      	cmp	r3, r2
 8006154:	d00e      	beq.n	8006174 <UART_SetConfig+0x328>
 8006156:	e034      	b.n	80061c2 <UART_SetConfig+0x376>
 8006158:	231b      	movs	r3, #27
 800615a:	2220      	movs	r2, #32
 800615c:	189b      	adds	r3, r3, r2
 800615e:	19db      	adds	r3, r3, r7
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e03a      	b.n	80061dc <UART_SetConfig+0x390>
 8006166:	231b      	movs	r3, #27
 8006168:	2220      	movs	r2, #32
 800616a:	189b      	adds	r3, r3, r2
 800616c:	19db      	adds	r3, r3, r7
 800616e:	2202      	movs	r2, #2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	e033      	b.n	80061dc <UART_SetConfig+0x390>
 8006174:	231b      	movs	r3, #27
 8006176:	2220      	movs	r2, #32
 8006178:	189b      	adds	r3, r3, r2
 800617a:	19db      	adds	r3, r3, r7
 800617c:	2204      	movs	r2, #4
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e02c      	b.n	80061dc <UART_SetConfig+0x390>
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	cfff69f3 	.word	0xcfff69f3
 8006188:	ffffcfff 	.word	0xffffcfff
 800618c:	40008000 	.word	0x40008000
 8006190:	40008400 	.word	0x40008400
 8006194:	11fff4ff 	.word	0x11fff4ff
 8006198:	40013800 	.word	0x40013800
 800619c:	40021000 	.word	0x40021000
 80061a0:	40004400 	.word	0x40004400
 80061a4:	40004800 	.word	0x40004800
 80061a8:	40004c00 	.word	0x40004c00
 80061ac:	40005000 	.word	0x40005000
 80061b0:	40013c00 	.word	0x40013c00
 80061b4:	231b      	movs	r3, #27
 80061b6:	2220      	movs	r2, #32
 80061b8:	189b      	adds	r3, r3, r2
 80061ba:	19db      	adds	r3, r3, r7
 80061bc:	2208      	movs	r2, #8
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	e00c      	b.n	80061dc <UART_SetConfig+0x390>
 80061c2:	231b      	movs	r3, #27
 80061c4:	2220      	movs	r2, #32
 80061c6:	189b      	adds	r3, r3, r2
 80061c8:	19db      	adds	r3, r3, r7
 80061ca:	2210      	movs	r2, #16
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e005      	b.n	80061dc <UART_SetConfig+0x390>
 80061d0:	231b      	movs	r3, #27
 80061d2:	2220      	movs	r2, #32
 80061d4:	189b      	adds	r3, r3, r2
 80061d6:	19db      	adds	r3, r3, r7
 80061d8:	2210      	movs	r2, #16
 80061da:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4ac1      	ldr	r2, [pc, #772]	; (80064e8 <UART_SetConfig+0x69c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d005      	beq.n	80061f2 <UART_SetConfig+0x3a6>
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4ac0      	ldr	r2, [pc, #768]	; (80064ec <UART_SetConfig+0x6a0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d000      	beq.n	80061f2 <UART_SetConfig+0x3a6>
 80061f0:	e093      	b.n	800631a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061f2:	231b      	movs	r3, #27
 80061f4:	2220      	movs	r2, #32
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	19db      	adds	r3, r3, r7
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d015      	beq.n	800622c <UART_SetConfig+0x3e0>
 8006200:	dc18      	bgt.n	8006234 <UART_SetConfig+0x3e8>
 8006202:	2b04      	cmp	r3, #4
 8006204:	d00d      	beq.n	8006222 <UART_SetConfig+0x3d6>
 8006206:	dc15      	bgt.n	8006234 <UART_SetConfig+0x3e8>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <UART_SetConfig+0x3c6>
 800620c:	2b02      	cmp	r3, #2
 800620e:	d005      	beq.n	800621c <UART_SetConfig+0x3d0>
 8006210:	e010      	b.n	8006234 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006212:	f7fd fe73 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8006216:	0003      	movs	r3, r0
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800621a:	e014      	b.n	8006246 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800621c:	4bb4      	ldr	r3, [pc, #720]	; (80064f0 <UART_SetConfig+0x6a4>)
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006220:	e011      	b.n	8006246 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006222:	f7fd fddf 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8006226:	0003      	movs	r3, r0
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800622a:	e00c      	b.n	8006246 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006232:	e008      	b.n	8006246 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006238:	231a      	movs	r3, #26
 800623a:	2220      	movs	r2, #32
 800623c:	189b      	adds	r3, r3, r2
 800623e:	19db      	adds	r3, r3, r7
 8006240:	2201      	movs	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
        break;
 8006244:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	2b00      	cmp	r3, #0
 800624a:	d100      	bne.n	800624e <UART_SetConfig+0x402>
 800624c:	e135      	b.n	80064ba <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006252:	4ba8      	ldr	r3, [pc, #672]	; (80064f4 <UART_SetConfig+0x6a8>)
 8006254:	0052      	lsls	r2, r2, #1
 8006256:	5ad3      	ldrh	r3, [r2, r3]
 8006258:	0019      	movs	r1, r3
 800625a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800625c:	f7f9 ff64 	bl	8000128 <__udivsi3>
 8006260:	0003      	movs	r3, r0
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	0013      	movs	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	189b      	adds	r3, r3, r2
 800626e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006270:	429a      	cmp	r2, r3
 8006272:	d305      	bcc.n	8006280 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800627a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627c:	429a      	cmp	r2, r3
 800627e:	d906      	bls.n	800628e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006280:	231a      	movs	r3, #26
 8006282:	2220      	movs	r2, #32
 8006284:	189b      	adds	r3, r3, r2
 8006286:	19db      	adds	r3, r3, r7
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	e044      	b.n	8006318 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	2300      	movs	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800629a:	4b96      	ldr	r3, [pc, #600]	; (80064f4 <UART_SetConfig+0x6a8>)
 800629c:	0052      	lsls	r2, r2, #1
 800629e:	5ad3      	ldrh	r3, [r2, r3]
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	69b8      	ldr	r0, [r7, #24]
 80062ac:	69f9      	ldr	r1, [r7, #28]
 80062ae:	f7fa f8b1 	bl	8000414 <__aeabi_uldivmod>
 80062b2:	0002      	movs	r2, r0
 80062b4:	000b      	movs	r3, r1
 80062b6:	0e11      	lsrs	r1, r2, #24
 80062b8:	021d      	lsls	r5, r3, #8
 80062ba:	430d      	orrs	r5, r1
 80062bc:	0214      	lsls	r4, r2, #8
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	68b8      	ldr	r0, [r7, #8]
 80062cc:	68f9      	ldr	r1, [r7, #12]
 80062ce:	1900      	adds	r0, r0, r4
 80062d0:	4169      	adcs	r1, r5
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	607b      	str	r3, [r7, #4]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f7fa f898 	bl	8000414 <__aeabi_uldivmod>
 80062e4:	0002      	movs	r2, r0
 80062e6:	000b      	movs	r3, r1
 80062e8:	0013      	movs	r3, r2
 80062ea:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	23c0      	movs	r3, #192	; 0xc0
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d309      	bcc.n	800630a <UART_SetConfig+0x4be>
 80062f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	035b      	lsls	r3, r3, #13
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d204      	bcs.n	800630a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006306:	60da      	str	r2, [r3, #12]
 8006308:	e006      	b.n	8006318 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800630a:	231a      	movs	r3, #26
 800630c:	2220      	movs	r2, #32
 800630e:	189b      	adds	r3, r3, r2
 8006310:	19db      	adds	r3, r3, r7
 8006312:	2201      	movs	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006316:	e0d0      	b.n	80064ba <UART_SetConfig+0x66e>
 8006318:	e0cf      	b.n	80064ba <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	69da      	ldr	r2, [r3, #28]
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	429a      	cmp	r2, r3
 8006324:	d000      	beq.n	8006328 <UART_SetConfig+0x4dc>
 8006326:	e070      	b.n	800640a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006328:	231b      	movs	r3, #27
 800632a:	2220      	movs	r2, #32
 800632c:	189b      	adds	r3, r3, r2
 800632e:	19db      	adds	r3, r3, r7
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b08      	cmp	r3, #8
 8006334:	d015      	beq.n	8006362 <UART_SetConfig+0x516>
 8006336:	dc18      	bgt.n	800636a <UART_SetConfig+0x51e>
 8006338:	2b04      	cmp	r3, #4
 800633a:	d00d      	beq.n	8006358 <UART_SetConfig+0x50c>
 800633c:	dc15      	bgt.n	800636a <UART_SetConfig+0x51e>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <UART_SetConfig+0x4fc>
 8006342:	2b02      	cmp	r3, #2
 8006344:	d005      	beq.n	8006352 <UART_SetConfig+0x506>
 8006346:	e010      	b.n	800636a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006348:	f7fd fdd8 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 800634c:	0003      	movs	r3, r0
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006350:	e014      	b.n	800637c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006352:	4b67      	ldr	r3, [pc, #412]	; (80064f0 <UART_SetConfig+0x6a4>)
 8006354:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006356:	e011      	b.n	800637c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006358:	f7fd fd44 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 800635c:	0003      	movs	r3, r0
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006360:	e00c      	b.n	800637c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006362:	2380      	movs	r3, #128	; 0x80
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006368:	e008      	b.n	800637c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800636e:	231a      	movs	r3, #26
 8006370:	2220      	movs	r2, #32
 8006372:	189b      	adds	r3, r3, r2
 8006374:	19db      	adds	r3, r3, r7
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
        break;
 800637a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	2b00      	cmp	r3, #0
 8006380:	d100      	bne.n	8006384 <UART_SetConfig+0x538>
 8006382:	e09a      	b.n	80064ba <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006388:	4b5a      	ldr	r3, [pc, #360]	; (80064f4 <UART_SetConfig+0x6a8>)
 800638a:	0052      	lsls	r2, r2, #1
 800638c:	5ad3      	ldrh	r3, [r2, r3]
 800638e:	0019      	movs	r1, r3
 8006390:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006392:	f7f9 fec9 	bl	8000128 <__udivsi3>
 8006396:	0003      	movs	r3, r0
 8006398:	005a      	lsls	r2, r3, #1
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	18d2      	adds	r2, r2, r3
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	0019      	movs	r1, r3
 80063a8:	0010      	movs	r0, r2
 80063aa:	f7f9 febd 	bl	8000128 <__udivsi3>
 80063ae:	0003      	movs	r3, r0
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	2b0f      	cmp	r3, #15
 80063b6:	d921      	bls.n	80063fc <UART_SetConfig+0x5b0>
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	025b      	lsls	r3, r3, #9
 80063be:	429a      	cmp	r2, r3
 80063c0:	d21c      	bcs.n	80063fc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	200e      	movs	r0, #14
 80063c8:	2420      	movs	r4, #32
 80063ca:	1903      	adds	r3, r0, r4
 80063cc:	19db      	adds	r3, r3, r7
 80063ce:	210f      	movs	r1, #15
 80063d0:	438a      	bics	r2, r1
 80063d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2207      	movs	r2, #7
 80063dc:	4013      	ands	r3, r2
 80063de:	b299      	uxth	r1, r3
 80063e0:	1903      	adds	r3, r0, r4
 80063e2:	19db      	adds	r3, r3, r7
 80063e4:	1902      	adds	r2, r0, r4
 80063e6:	19d2      	adds	r2, r2, r7
 80063e8:	8812      	ldrh	r2, [r2, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	1902      	adds	r2, r0, r4
 80063f4:	19d2      	adds	r2, r2, r7
 80063f6:	8812      	ldrh	r2, [r2, #0]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e05e      	b.n	80064ba <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80063fc:	231a      	movs	r3, #26
 80063fe:	2220      	movs	r2, #32
 8006400:	189b      	adds	r3, r3, r2
 8006402:	19db      	adds	r3, r3, r7
 8006404:	2201      	movs	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	e057      	b.n	80064ba <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800640a:	231b      	movs	r3, #27
 800640c:	2220      	movs	r2, #32
 800640e:	189b      	adds	r3, r3, r2
 8006410:	19db      	adds	r3, r3, r7
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d015      	beq.n	8006444 <UART_SetConfig+0x5f8>
 8006418:	dc18      	bgt.n	800644c <UART_SetConfig+0x600>
 800641a:	2b04      	cmp	r3, #4
 800641c:	d00d      	beq.n	800643a <UART_SetConfig+0x5ee>
 800641e:	dc15      	bgt.n	800644c <UART_SetConfig+0x600>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <UART_SetConfig+0x5de>
 8006424:	2b02      	cmp	r3, #2
 8006426:	d005      	beq.n	8006434 <UART_SetConfig+0x5e8>
 8006428:	e010      	b.n	800644c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800642a:	f7fd fd67 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 800642e:	0003      	movs	r3, r0
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006432:	e014      	b.n	800645e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006434:	4b2e      	ldr	r3, [pc, #184]	; (80064f0 <UART_SetConfig+0x6a4>)
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006438:	e011      	b.n	800645e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800643a:	f7fd fcd3 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 800643e:	0003      	movs	r3, r0
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006442:	e00c      	b.n	800645e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800644a:	e008      	b.n	800645e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006450:	231a      	movs	r3, #26
 8006452:	2220      	movs	r2, #32
 8006454:	189b      	adds	r3, r3, r2
 8006456:	19db      	adds	r3, r3, r7
 8006458:	2201      	movs	r2, #1
 800645a:	701a      	strb	r2, [r3, #0]
        break;
 800645c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	2b00      	cmp	r3, #0
 8006462:	d02a      	beq.n	80064ba <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006468:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <UART_SetConfig+0x6a8>)
 800646a:	0052      	lsls	r2, r2, #1
 800646c:	5ad3      	ldrh	r3, [r2, r3]
 800646e:	0019      	movs	r1, r3
 8006470:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006472:	f7f9 fe59 	bl	8000128 <__udivsi3>
 8006476:	0003      	movs	r3, r0
 8006478:	001a      	movs	r2, r3
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	18d2      	adds	r2, r2, r3
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	0019      	movs	r1, r3
 8006488:	0010      	movs	r0, r2
 800648a:	f7f9 fe4d 	bl	8000128 <__udivsi3>
 800648e:	0003      	movs	r3, r0
 8006490:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2b0f      	cmp	r3, #15
 8006496:	d90a      	bls.n	80064ae <UART_SetConfig+0x662>
 8006498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649a:	2380      	movs	r3, #128	; 0x80
 800649c:	025b      	lsls	r3, r3, #9
 800649e:	429a      	cmp	r2, r3
 80064a0:	d205      	bcs.n	80064ae <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	e005      	b.n	80064ba <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80064ae:	231a      	movs	r3, #26
 80064b0:	2220      	movs	r2, #32
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	19db      	adds	r3, r3, r7
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	226a      	movs	r2, #106	; 0x6a
 80064be:	2101      	movs	r1, #1
 80064c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	2268      	movs	r2, #104	; 0x68
 80064c6:	2101      	movs	r1, #1
 80064c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	2200      	movs	r2, #0
 80064ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	2200      	movs	r2, #0
 80064d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064d6:	231a      	movs	r3, #26
 80064d8:	2220      	movs	r2, #32
 80064da:	189b      	adds	r3, r3, r2
 80064dc:	19db      	adds	r3, r3, r7
 80064de:	781b      	ldrb	r3, [r3, #0]
}
 80064e0:	0018      	movs	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b010      	add	sp, #64	; 0x40
 80064e6:	bdb0      	pop	{r4, r5, r7, pc}
 80064e8:	40008000 	.word	0x40008000
 80064ec:	40008400 	.word	0x40008400
 80064f0:	00f42400 	.word	0x00f42400
 80064f4:	08008e38 	.word	0x08008e38

080064f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	2208      	movs	r2, #8
 8006506:	4013      	ands	r3, r2
 8006508:	d00b      	beq.n	8006522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4a4a      	ldr	r2, [pc, #296]	; (800663c <UART_AdvFeatureConfig+0x144>)
 8006512:	4013      	ands	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	2201      	movs	r2, #1
 8006528:	4013      	ands	r3, r2
 800652a:	d00b      	beq.n	8006544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4a43      	ldr	r2, [pc, #268]	; (8006640 <UART_AdvFeatureConfig+0x148>)
 8006534:	4013      	ands	r3, r2
 8006536:	0019      	movs	r1, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	2202      	movs	r2, #2
 800654a:	4013      	ands	r3, r2
 800654c:	d00b      	beq.n	8006566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4a3b      	ldr	r2, [pc, #236]	; (8006644 <UART_AdvFeatureConfig+0x14c>)
 8006556:	4013      	ands	r3, r2
 8006558:	0019      	movs	r1, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	2204      	movs	r2, #4
 800656c:	4013      	ands	r3, r2
 800656e:	d00b      	beq.n	8006588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4a34      	ldr	r2, [pc, #208]	; (8006648 <UART_AdvFeatureConfig+0x150>)
 8006578:	4013      	ands	r3, r2
 800657a:	0019      	movs	r1, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	2210      	movs	r2, #16
 800658e:	4013      	ands	r3, r2
 8006590:	d00b      	beq.n	80065aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	4a2c      	ldr	r2, [pc, #176]	; (800664c <UART_AdvFeatureConfig+0x154>)
 800659a:	4013      	ands	r3, r2
 800659c:	0019      	movs	r1, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	2220      	movs	r2, #32
 80065b0:	4013      	ands	r3, r2
 80065b2:	d00b      	beq.n	80065cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	4a25      	ldr	r2, [pc, #148]	; (8006650 <UART_AdvFeatureConfig+0x158>)
 80065bc:	4013      	ands	r3, r2
 80065be:	0019      	movs	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	2240      	movs	r2, #64	; 0x40
 80065d2:	4013      	ands	r3, r2
 80065d4:	d01d      	beq.n	8006612 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <UART_AdvFeatureConfig+0x15c>)
 80065de:	4013      	ands	r3, r2
 80065e0:	0019      	movs	r1, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	035b      	lsls	r3, r3, #13
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d10b      	bne.n	8006612 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4a15      	ldr	r2, [pc, #84]	; (8006658 <UART_AdvFeatureConfig+0x160>)
 8006602:	4013      	ands	r3, r2
 8006604:	0019      	movs	r1, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	4013      	ands	r3, r2
 800661a:	d00b      	beq.n	8006634 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	4a0e      	ldr	r2, [pc, #56]	; (800665c <UART_AdvFeatureConfig+0x164>)
 8006624:	4013      	ands	r3, r2
 8006626:	0019      	movs	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }
}
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	46bd      	mov	sp, r7
 8006638:	b002      	add	sp, #8
 800663a:	bd80      	pop	{r7, pc}
 800663c:	ffff7fff 	.word	0xffff7fff
 8006640:	fffdffff 	.word	0xfffdffff
 8006644:	fffeffff 	.word	0xfffeffff
 8006648:	fffbffff 	.word	0xfffbffff
 800664c:	ffffefff 	.word	0xffffefff
 8006650:	ffffdfff 	.word	0xffffdfff
 8006654:	ffefffff 	.word	0xffefffff
 8006658:	ff9fffff 	.word	0xff9fffff
 800665c:	fff7ffff 	.word	0xfff7ffff

08006660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b092      	sub	sp, #72	; 0x48
 8006664:	af02      	add	r7, sp, #8
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2290      	movs	r2, #144	; 0x90
 800666c:	2100      	movs	r1, #0
 800666e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006670:	f7fc fb3a 	bl	8002ce8 <HAL_GetTick>
 8006674:	0003      	movs	r3, r0
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2208      	movs	r2, #8
 8006680:	4013      	ands	r3, r2
 8006682:	2b08      	cmp	r3, #8
 8006684:	d12d      	bne.n	80066e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	0391      	lsls	r1, r2, #14
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4a47      	ldr	r2, [pc, #284]	; (80067ac <UART_CheckIdleState+0x14c>)
 8006690:	9200      	str	r2, [sp, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	f000 f88e 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 8006698:	1e03      	subs	r3, r0, #0
 800669a:	d022      	beq.n	80066e2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800669c:	f3ef 8310 	mrs	r3, PRIMASK
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a6:	2301      	movs	r3, #1
 80066a8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	f383 8810 	msr	PRIMASK, r3
}
 80066b0:	46c0      	nop			; (mov r8, r8)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2180      	movs	r1, #128	; 0x80
 80066be:	438a      	bics	r2, r1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	f383 8810 	msr	PRIMASK, r3
}
 80066cc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2288      	movs	r2, #136	; 0x88
 80066d2:	2120      	movs	r1, #32
 80066d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2284      	movs	r2, #132	; 0x84
 80066da:	2100      	movs	r1, #0
 80066dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e060      	b.n	80067a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2204      	movs	r2, #4
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d146      	bne.n	800677e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f2:	2280      	movs	r2, #128	; 0x80
 80066f4:	03d1      	lsls	r1, r2, #15
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4a2c      	ldr	r2, [pc, #176]	; (80067ac <UART_CheckIdleState+0x14c>)
 80066fa:	9200      	str	r2, [sp, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f000 f859 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 8006702:	1e03      	subs	r3, r0, #0
 8006704:	d03b      	beq.n	800677e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006706:	f3ef 8310 	mrs	r3, PRIMASK
 800670a:	60fb      	str	r3, [r7, #12]
  return(result);
 800670c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
 8006710:	2301      	movs	r3, #1
 8006712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f383 8810 	msr	PRIMASK, r3
}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4922      	ldr	r1, [pc, #136]	; (80067b0 <UART_CheckIdleState+0x150>)
 8006728:	400a      	ands	r2, r1
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f383 8810 	msr	PRIMASK, r3
}
 8006736:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006738:	f3ef 8310 	mrs	r3, PRIMASK
 800673c:	61bb      	str	r3, [r7, #24]
  return(result);
 800673e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
 8006742:	2301      	movs	r3, #1
 8006744:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f383 8810 	msr	PRIMASK, r3
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2101      	movs	r1, #1
 800675a:	438a      	bics	r2, r1
 800675c:	609a      	str	r2, [r3, #8]
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f383 8810 	msr	PRIMASK, r3
}
 8006768:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	228c      	movs	r2, #140	; 0x8c
 800676e:	2120      	movs	r1, #32
 8006770:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2284      	movs	r2, #132	; 0x84
 8006776:	2100      	movs	r1, #0
 8006778:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e012      	b.n	80067a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2288      	movs	r2, #136	; 0x88
 8006782:	2120      	movs	r1, #32
 8006784:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	228c      	movs	r2, #140	; 0x8c
 800678a:	2120      	movs	r1, #32
 800678c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2284      	movs	r2, #132	; 0x84
 800679e:	2100      	movs	r1, #0
 80067a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b010      	add	sp, #64	; 0x40
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	01ffffff 	.word	0x01ffffff
 80067b0:	fffffedf 	.word	0xfffffedf

080067b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	1dfb      	adds	r3, r7, #7
 80067c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c4:	e051      	b.n	800686a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	3301      	adds	r3, #1
 80067ca:	d04e      	beq.n	800686a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067cc:	f7fc fa8c 	bl	8002ce8 <HAL_GetTick>
 80067d0:	0002      	movs	r2, r0
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d302      	bcc.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e051      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2204      	movs	r2, #4
 80067ee:	4013      	ands	r3, r2
 80067f0:	d03b      	beq.n	800686a <UART_WaitOnFlagUntilTimeout+0xb6>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d038      	beq.n	800686a <UART_WaitOnFlagUntilTimeout+0xb6>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d035      	beq.n	800686a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	2208      	movs	r2, #8
 8006806:	4013      	ands	r3, r2
 8006808:	2b08      	cmp	r3, #8
 800680a:	d111      	bne.n	8006830 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2208      	movs	r2, #8
 8006812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	0018      	movs	r0, r3
 8006818:	f000 f83c 	bl	8006894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2290      	movs	r2, #144	; 0x90
 8006820:	2108      	movs	r1, #8
 8006822:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2284      	movs	r2, #132	; 0x84
 8006828:	2100      	movs	r1, #0
 800682a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e02c      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	2380      	movs	r3, #128	; 0x80
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	401a      	ands	r2, r3
 800683c:	2380      	movs	r3, #128	; 0x80
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	429a      	cmp	r2, r3
 8006842:	d112      	bne.n	800686a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2280      	movs	r2, #128	; 0x80
 800684a:	0112      	lsls	r2, r2, #4
 800684c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	0018      	movs	r0, r3
 8006852:	f000 f81f 	bl	8006894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2290      	movs	r2, #144	; 0x90
 800685a:	2120      	movs	r1, #32
 800685c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2284      	movs	r2, #132	; 0x84
 8006862:	2100      	movs	r1, #0
 8006864:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e00f      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	4013      	ands	r3, r2
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	425a      	negs	r2, r3
 800687a:	4153      	adcs	r3, r2
 800687c:	b2db      	uxtb	r3, r3
 800687e:	001a      	movs	r2, r3
 8006880:	1dfb      	adds	r3, r7, #7
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d09e      	beq.n	80067c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	0018      	movs	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	b004      	add	sp, #16
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	; 0x38
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689c:	f3ef 8310 	mrs	r3, PRIMASK
 80068a0:	617b      	str	r3, [r7, #20]
  return(result);
 80068a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
 80068a6:	2301      	movs	r3, #1
 80068a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f383 8810 	msr	PRIMASK, r3
}
 80068b0:	46c0      	nop			; (mov r8, r8)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4926      	ldr	r1, [pc, #152]	; (8006958 <UART_EndRxTransfer+0xc4>)
 80068be:	400a      	ands	r2, r1
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f383 8810 	msr	PRIMASK, r3
}
 80068cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ce:	f3ef 8310 	mrs	r3, PRIMASK
 80068d2:	623b      	str	r3, [r7, #32]
  return(result);
 80068d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068d6:	633b      	str	r3, [r7, #48]	; 0x30
 80068d8:	2301      	movs	r3, #1
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	f383 8810 	msr	PRIMASK, r3
}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	491b      	ldr	r1, [pc, #108]	; (800695c <UART_EndRxTransfer+0xc8>)
 80068f0:	400a      	ands	r2, r1
 80068f2:	609a      	str	r2, [r3, #8]
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	f383 8810 	msr	PRIMASK, r3
}
 80068fe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d118      	bne.n	800693a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006908:	f3ef 8310 	mrs	r3, PRIMASK
 800690c:	60bb      	str	r3, [r7, #8]
  return(result);
 800690e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006912:	2301      	movs	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f383 8810 	msr	PRIMASK, r3
}
 800691c:	46c0      	nop			; (mov r8, r8)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2110      	movs	r1, #16
 800692a:	438a      	bics	r2, r1
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f383 8810 	msr	PRIMASK, r3
}
 8006938:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	228c      	movs	r2, #140	; 0x8c
 800693e:	2120      	movs	r1, #32
 8006940:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	46bd      	mov	sp, r7
 8006952:	b00e      	add	sp, #56	; 0x38
 8006954:	bd80      	pop	{r7, pc}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	fffffedf 	.word	0xfffffedf
 800695c:	effffffe 	.word	0xeffffffe

08006960 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2284      	movs	r2, #132	; 0x84
 800696c:	5c9b      	ldrb	r3, [r3, r2]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_UARTEx_DisableFifoMode+0x16>
 8006972:	2302      	movs	r3, #2
 8006974:	e027      	b.n	80069c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2284      	movs	r2, #132	; 0x84
 800697a:	2101      	movs	r1, #1
 800697c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2288      	movs	r2, #136	; 0x88
 8006982:	2124      	movs	r1, #36	; 0x24
 8006984:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2101      	movs	r1, #1
 800699a:	438a      	bics	r2, r1
 800699c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a0b      	ldr	r2, [pc, #44]	; (80069d0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2288      	movs	r2, #136	; 0x88
 80069b8:	2120      	movs	r1, #32
 80069ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2284      	movs	r2, #132	; 0x84
 80069c0:	2100      	movs	r1, #0
 80069c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	0018      	movs	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	b004      	add	sp, #16
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	dfffffff 	.word	0xdfffffff

080069d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2284      	movs	r2, #132	; 0x84
 80069e2:	5c9b      	ldrb	r3, [r3, r2]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e02e      	b.n	8006a4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2284      	movs	r2, #132	; 0x84
 80069f0:	2101      	movs	r1, #1
 80069f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2288      	movs	r2, #136	; 0x88
 80069f8:	2124      	movs	r1, #36	; 0x24
 80069fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2101      	movs	r1, #1
 8006a10:	438a      	bics	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	08d9      	lsrs	r1, r3, #3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f000 f854 	bl	8006ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2288      	movs	r2, #136	; 0x88
 8006a3c:	2120      	movs	r1, #32
 8006a3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2284      	movs	r2, #132	; 0x84
 8006a44:	2100      	movs	r1, #0
 8006a46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	b004      	add	sp, #16
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2284      	movs	r2, #132	; 0x84
 8006a62:	5c9b      	ldrb	r3, [r3, r2]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e02f      	b.n	8006acc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2284      	movs	r2, #132	; 0x84
 8006a70:	2101      	movs	r1, #1
 8006a72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2288      	movs	r2, #136	; 0x88
 8006a78:	2124      	movs	r1, #36	; 0x24
 8006a7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2101      	movs	r1, #1
 8006a90:	438a      	bics	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	4a0e      	ldr	r2, [pc, #56]	; (8006ad4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	0019      	movs	r1, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f000 f813 	bl	8006ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2288      	movs	r2, #136	; 0x88
 8006abe:	2120      	movs	r1, #32
 8006ac0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2284      	movs	r2, #132	; 0x84
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	0018      	movs	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	b004      	add	sp, #16
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	f1ffffff 	.word	0xf1ffffff

08006ad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	226a      	movs	r2, #106	; 0x6a
 8006aec:	2101      	movs	r1, #1
 8006aee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2268      	movs	r2, #104	; 0x68
 8006af4:	2101      	movs	r1, #1
 8006af6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006af8:	e043      	b.n	8006b82 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006afa:	260f      	movs	r6, #15
 8006afc:	19bb      	adds	r3, r7, r6
 8006afe:	2208      	movs	r2, #8
 8006b00:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b02:	200e      	movs	r0, #14
 8006b04:	183b      	adds	r3, r7, r0
 8006b06:	2208      	movs	r2, #8
 8006b08:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	0e5b      	lsrs	r3, r3, #25
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	240d      	movs	r4, #13
 8006b16:	193b      	adds	r3, r7, r4
 8006b18:	2107      	movs	r1, #7
 8006b1a:	400a      	ands	r2, r1
 8006b1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	0f5b      	lsrs	r3, r3, #29
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	250c      	movs	r5, #12
 8006b2a:	197b      	adds	r3, r7, r5
 8006b2c:	2107      	movs	r1, #7
 8006b2e:	400a      	ands	r2, r1
 8006b30:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b32:	183b      	adds	r3, r7, r0
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	197a      	adds	r2, r7, r5
 8006b38:	7812      	ldrb	r2, [r2, #0]
 8006b3a:	4914      	ldr	r1, [pc, #80]	; (8006b8c <UARTEx_SetNbDataToProcess+0xb4>)
 8006b3c:	5c8a      	ldrb	r2, [r1, r2]
 8006b3e:	435a      	muls	r2, r3
 8006b40:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b42:	197b      	adds	r3, r7, r5
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <UARTEx_SetNbDataToProcess+0xb8>)
 8006b48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b4a:	0019      	movs	r1, r3
 8006b4c:	f7f9 fb76 	bl	800023c <__divsi3>
 8006b50:	0003      	movs	r3, r0
 8006b52:	b299      	uxth	r1, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	226a      	movs	r2, #106	; 0x6a
 8006b58:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b5a:	19bb      	adds	r3, r7, r6
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	193a      	adds	r2, r7, r4
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	490a      	ldr	r1, [pc, #40]	; (8006b8c <UARTEx_SetNbDataToProcess+0xb4>)
 8006b64:	5c8a      	ldrb	r2, [r1, r2]
 8006b66:	435a      	muls	r2, r3
 8006b68:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b6a:	193b      	adds	r3, r7, r4
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	4a08      	ldr	r2, [pc, #32]	; (8006b90 <UARTEx_SetNbDataToProcess+0xb8>)
 8006b70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b72:	0019      	movs	r1, r3
 8006b74:	f7f9 fb62 	bl	800023c <__divsi3>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	b299      	uxth	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2268      	movs	r2, #104	; 0x68
 8006b80:	5299      	strh	r1, [r3, r2]
}
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b005      	add	sp, #20
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	08008e50 	.word	0x08008e50
 8006b90:	08008e58 	.word	0x08008e58

08006b94 <sniprintf>:
 8006b94:	b40c      	push	{r2, r3}
 8006b96:	b530      	push	{r4, r5, lr}
 8006b98:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <sniprintf+0x64>)
 8006b9a:	000c      	movs	r4, r1
 8006b9c:	681d      	ldr	r5, [r3, #0]
 8006b9e:	b09d      	sub	sp, #116	; 0x74
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	da08      	bge.n	8006bb6 <sniprintf+0x22>
 8006ba4:	238b      	movs	r3, #139	; 0x8b
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	602b      	str	r3, [r5, #0]
 8006baa:	4240      	negs	r0, r0
 8006bac:	b01d      	add	sp, #116	; 0x74
 8006bae:	bc30      	pop	{r4, r5}
 8006bb0:	bc08      	pop	{r3}
 8006bb2:	b002      	add	sp, #8
 8006bb4:	4718      	bx	r3
 8006bb6:	2382      	movs	r3, #130	; 0x82
 8006bb8:	466a      	mov	r2, sp
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	8293      	strh	r3, [r2, #20]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9002      	str	r0, [sp, #8]
 8006bc2:	9006      	str	r0, [sp, #24]
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	d000      	beq.n	8006bca <sniprintf+0x36>
 8006bc8:	1e4b      	subs	r3, r1, #1
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	9307      	str	r3, [sp, #28]
 8006bce:	2301      	movs	r3, #1
 8006bd0:	466a      	mov	r2, sp
 8006bd2:	425b      	negs	r3, r3
 8006bd4:	82d3      	strh	r3, [r2, #22]
 8006bd6:	0028      	movs	r0, r5
 8006bd8:	ab21      	add	r3, sp, #132	; 0x84
 8006bda:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006bdc:	a902      	add	r1, sp, #8
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	f000 f9ca 	bl	8006f78 <_svfiprintf_r>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	da01      	bge.n	8006bec <sniprintf+0x58>
 8006be8:	238b      	movs	r3, #139	; 0x8b
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	2c00      	cmp	r4, #0
 8006bee:	d0dd      	beq.n	8006bac <sniprintf+0x18>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	9b02      	ldr	r3, [sp, #8]
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e7d9      	b.n	8006bac <sniprintf+0x18>
 8006bf8:	20000058 	.word	0x20000058

08006bfc <siprintf>:
 8006bfc:	b40e      	push	{r1, r2, r3}
 8006bfe:	b500      	push	{lr}
 8006c00:	490b      	ldr	r1, [pc, #44]	; (8006c30 <siprintf+0x34>)
 8006c02:	b09c      	sub	sp, #112	; 0x70
 8006c04:	ab1d      	add	r3, sp, #116	; 0x74
 8006c06:	9002      	str	r0, [sp, #8]
 8006c08:	9006      	str	r0, [sp, #24]
 8006c0a:	9107      	str	r1, [sp, #28]
 8006c0c:	9104      	str	r1, [sp, #16]
 8006c0e:	4809      	ldr	r0, [pc, #36]	; (8006c34 <siprintf+0x38>)
 8006c10:	4909      	ldr	r1, [pc, #36]	; (8006c38 <siprintf+0x3c>)
 8006c12:	cb04      	ldmia	r3!, {r2}
 8006c14:	9105      	str	r1, [sp, #20]
 8006c16:	6800      	ldr	r0, [r0, #0]
 8006c18:	a902      	add	r1, sp, #8
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	f000 f9ac 	bl	8006f78 <_svfiprintf_r>
 8006c20:	2200      	movs	r2, #0
 8006c22:	9b02      	ldr	r3, [sp, #8]
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	b01c      	add	sp, #112	; 0x70
 8006c28:	bc08      	pop	{r3}
 8006c2a:	b003      	add	sp, #12
 8006c2c:	4718      	bx	r3
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	7fffffff 	.word	0x7fffffff
 8006c34:	20000058 	.word	0x20000058
 8006c38:	ffff0208 	.word	0xffff0208

08006c3c <memset>:
 8006c3c:	0003      	movs	r3, r0
 8006c3e:	1882      	adds	r2, r0, r2
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d100      	bne.n	8006c46 <memset+0xa>
 8006c44:	4770      	bx	lr
 8006c46:	7019      	strb	r1, [r3, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	e7f9      	b.n	8006c40 <memset+0x4>

08006c4c <__errno>:
 8006c4c:	4b01      	ldr	r3, [pc, #4]	; (8006c54 <__errno+0x8>)
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	4770      	bx	lr
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	20000058 	.word	0x20000058

08006c58 <__libc_init_array>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	2600      	movs	r6, #0
 8006c5c:	4c0c      	ldr	r4, [pc, #48]	; (8006c90 <__libc_init_array+0x38>)
 8006c5e:	4d0d      	ldr	r5, [pc, #52]	; (8006c94 <__libc_init_array+0x3c>)
 8006c60:	1b64      	subs	r4, r4, r5
 8006c62:	10a4      	asrs	r4, r4, #2
 8006c64:	42a6      	cmp	r6, r4
 8006c66:	d109      	bne.n	8006c7c <__libc_init_array+0x24>
 8006c68:	2600      	movs	r6, #0
 8006c6a:	f000 fc6d 	bl	8007548 <_init>
 8006c6e:	4c0a      	ldr	r4, [pc, #40]	; (8006c98 <__libc_init_array+0x40>)
 8006c70:	4d0a      	ldr	r5, [pc, #40]	; (8006c9c <__libc_init_array+0x44>)
 8006c72:	1b64      	subs	r4, r4, r5
 8006c74:	10a4      	asrs	r4, r4, #2
 8006c76:	42a6      	cmp	r6, r4
 8006c78:	d105      	bne.n	8006c86 <__libc_init_array+0x2e>
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	00b3      	lsls	r3, r6, #2
 8006c7e:	58eb      	ldr	r3, [r5, r3]
 8006c80:	4798      	blx	r3
 8006c82:	3601      	adds	r6, #1
 8006c84:	e7ee      	b.n	8006c64 <__libc_init_array+0xc>
 8006c86:	00b3      	lsls	r3, r6, #2
 8006c88:	58eb      	ldr	r3, [r5, r3]
 8006c8a:	4798      	blx	r3
 8006c8c:	3601      	adds	r6, #1
 8006c8e:	e7f2      	b.n	8006c76 <__libc_init_array+0x1e>
 8006c90:	08008e9c 	.word	0x08008e9c
 8006c94:	08008e9c 	.word	0x08008e9c
 8006c98:	08008ea0 	.word	0x08008ea0
 8006c9c:	08008e9c 	.word	0x08008e9c

08006ca0 <__retarget_lock_acquire_recursive>:
 8006ca0:	4770      	bx	lr

08006ca2 <__retarget_lock_release_recursive>:
 8006ca2:	4770      	bx	lr

08006ca4 <memcpy>:
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	b510      	push	{r4, lr}
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d100      	bne.n	8006cae <memcpy+0xa>
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	5ccc      	ldrb	r4, [r1, r3]
 8006cb0:	54c4      	strb	r4, [r0, r3]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	e7f8      	b.n	8006ca8 <memcpy+0x4>
	...

08006cb8 <_free_r>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	0005      	movs	r5, r0
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d010      	beq.n	8006ce2 <_free_r+0x2a>
 8006cc0:	1f0c      	subs	r4, r1, #4
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	da00      	bge.n	8006cca <_free_r+0x12>
 8006cc8:	18e4      	adds	r4, r4, r3
 8006cca:	0028      	movs	r0, r5
 8006ccc:	f000 f8e2 	bl	8006e94 <__malloc_lock>
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <_free_r+0x90>)
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <_free_r+0x2c>
 8006cd8:	6063      	str	r3, [r4, #4]
 8006cda:	6014      	str	r4, [r2, #0]
 8006cdc:	0028      	movs	r0, r5
 8006cde:	f000 f8e1 	bl	8006ea4 <__malloc_unlock>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	d908      	bls.n	8006cfa <_free_r+0x42>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	1821      	adds	r1, r4, r0
 8006cec:	428b      	cmp	r3, r1
 8006cee:	d1f3      	bne.n	8006cd8 <_free_r+0x20>
 8006cf0:	6819      	ldr	r1, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	1809      	adds	r1, r1, r0
 8006cf6:	6021      	str	r1, [r4, #0]
 8006cf8:	e7ee      	b.n	8006cd8 <_free_r+0x20>
 8006cfa:	001a      	movs	r2, r3
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <_free_r+0x4e>
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	d9f9      	bls.n	8006cfa <_free_r+0x42>
 8006d06:	6811      	ldr	r1, [r2, #0]
 8006d08:	1850      	adds	r0, r2, r1
 8006d0a:	42a0      	cmp	r0, r4
 8006d0c:	d10b      	bne.n	8006d26 <_free_r+0x6e>
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	1809      	adds	r1, r1, r0
 8006d12:	1850      	adds	r0, r2, r1
 8006d14:	6011      	str	r1, [r2, #0]
 8006d16:	4283      	cmp	r3, r0
 8006d18:	d1e0      	bne.n	8006cdc <_free_r+0x24>
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	1841      	adds	r1, r0, r1
 8006d20:	6011      	str	r1, [r2, #0]
 8006d22:	6053      	str	r3, [r2, #4]
 8006d24:	e7da      	b.n	8006cdc <_free_r+0x24>
 8006d26:	42a0      	cmp	r0, r4
 8006d28:	d902      	bls.n	8006d30 <_free_r+0x78>
 8006d2a:	230c      	movs	r3, #12
 8006d2c:	602b      	str	r3, [r5, #0]
 8006d2e:	e7d5      	b.n	8006cdc <_free_r+0x24>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	1821      	adds	r1, r4, r0
 8006d34:	428b      	cmp	r3, r1
 8006d36:	d103      	bne.n	8006d40 <_free_r+0x88>
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	1809      	adds	r1, r1, r0
 8006d3e:	6021      	str	r1, [r4, #0]
 8006d40:	6063      	str	r3, [r4, #4]
 8006d42:	6054      	str	r4, [r2, #4]
 8006d44:	e7ca      	b.n	8006cdc <_free_r+0x24>
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	20000568 	.word	0x20000568

08006d4c <sbrk_aligned>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4e0f      	ldr	r6, [pc, #60]	; (8006d8c <sbrk_aligned+0x40>)
 8006d50:	000d      	movs	r5, r1
 8006d52:	6831      	ldr	r1, [r6, #0]
 8006d54:	0004      	movs	r4, r0
 8006d56:	2900      	cmp	r1, #0
 8006d58:	d102      	bne.n	8006d60 <sbrk_aligned+0x14>
 8006d5a:	f000 fba1 	bl	80074a0 <_sbrk_r>
 8006d5e:	6030      	str	r0, [r6, #0]
 8006d60:	0029      	movs	r1, r5
 8006d62:	0020      	movs	r0, r4
 8006d64:	f000 fb9c 	bl	80074a0 <_sbrk_r>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d00a      	beq.n	8006d82 <sbrk_aligned+0x36>
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	1cc5      	adds	r5, r0, #3
 8006d70:	439d      	bics	r5, r3
 8006d72:	42a8      	cmp	r0, r5
 8006d74:	d007      	beq.n	8006d86 <sbrk_aligned+0x3a>
 8006d76:	1a29      	subs	r1, r5, r0
 8006d78:	0020      	movs	r0, r4
 8006d7a:	f000 fb91 	bl	80074a0 <_sbrk_r>
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d101      	bne.n	8006d86 <sbrk_aligned+0x3a>
 8006d82:	2501      	movs	r5, #1
 8006d84:	426d      	negs	r5, r5
 8006d86:	0028      	movs	r0, r5
 8006d88:	bd70      	pop	{r4, r5, r6, pc}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	2000056c 	.word	0x2000056c

08006d90 <_malloc_r>:
 8006d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d92:	2203      	movs	r2, #3
 8006d94:	1ccb      	adds	r3, r1, #3
 8006d96:	4393      	bics	r3, r2
 8006d98:	3308      	adds	r3, #8
 8006d9a:	0006      	movs	r6, r0
 8006d9c:	001f      	movs	r7, r3
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d238      	bcs.n	8006e14 <_malloc_r+0x84>
 8006da2:	270c      	movs	r7, #12
 8006da4:	42b9      	cmp	r1, r7
 8006da6:	d837      	bhi.n	8006e18 <_malloc_r+0x88>
 8006da8:	0030      	movs	r0, r6
 8006daa:	f000 f873 	bl	8006e94 <__malloc_lock>
 8006dae:	4b38      	ldr	r3, [pc, #224]	; (8006e90 <_malloc_r+0x100>)
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	001c      	movs	r4, r3
 8006db6:	2c00      	cmp	r4, #0
 8006db8:	d133      	bne.n	8006e22 <_malloc_r+0x92>
 8006dba:	0039      	movs	r1, r7
 8006dbc:	0030      	movs	r0, r6
 8006dbe:	f7ff ffc5 	bl	8006d4c <sbrk_aligned>
 8006dc2:	0004      	movs	r4, r0
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d15e      	bne.n	8006e86 <_malloc_r+0xf6>
 8006dc8:	9b00      	ldr	r3, [sp, #0]
 8006dca:	681c      	ldr	r4, [r3, #0]
 8006dcc:	0025      	movs	r5, r4
 8006dce:	2d00      	cmp	r5, #0
 8006dd0:	d14e      	bne.n	8006e70 <_malloc_r+0xe0>
 8006dd2:	2c00      	cmp	r4, #0
 8006dd4:	d051      	beq.n	8006e7a <_malloc_r+0xea>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	0029      	movs	r1, r5
 8006dda:	18e3      	adds	r3, r4, r3
 8006ddc:	0030      	movs	r0, r6
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	f000 fb5e 	bl	80074a0 <_sbrk_r>
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	4283      	cmp	r3, r0
 8006de8:	d147      	bne.n	8006e7a <_malloc_r+0xea>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	0030      	movs	r0, r6
 8006dee:	1aff      	subs	r7, r7, r3
 8006df0:	0039      	movs	r1, r7
 8006df2:	f7ff ffab 	bl	8006d4c <sbrk_aligned>
 8006df6:	3001      	adds	r0, #1
 8006df8:	d03f      	beq.n	8006e7a <_malloc_r+0xea>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	19db      	adds	r3, r3, r7
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d040      	beq.n	8006e8a <_malloc_r+0xfa>
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	42a2      	cmp	r2, r4
 8006e0c:	d133      	bne.n	8006e76 <_malloc_r+0xe6>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	605a      	str	r2, [r3, #4]
 8006e12:	e014      	b.n	8006e3e <_malloc_r+0xae>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dac5      	bge.n	8006da4 <_malloc_r+0x14>
 8006e18:	230c      	movs	r3, #12
 8006e1a:	2500      	movs	r5, #0
 8006e1c:	6033      	str	r3, [r6, #0]
 8006e1e:	0028      	movs	r0, r5
 8006e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e22:	6821      	ldr	r1, [r4, #0]
 8006e24:	1bc9      	subs	r1, r1, r7
 8006e26:	d420      	bmi.n	8006e6a <_malloc_r+0xda>
 8006e28:	290b      	cmp	r1, #11
 8006e2a:	d918      	bls.n	8006e5e <_malloc_r+0xce>
 8006e2c:	19e2      	adds	r2, r4, r7
 8006e2e:	6027      	str	r7, [r4, #0]
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	d112      	bne.n	8006e5a <_malloc_r+0xca>
 8006e34:	9b00      	ldr	r3, [sp, #0]
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	6863      	ldr	r3, [r4, #4]
 8006e3a:	6011      	str	r1, [r2, #0]
 8006e3c:	6053      	str	r3, [r2, #4]
 8006e3e:	0030      	movs	r0, r6
 8006e40:	0025      	movs	r5, r4
 8006e42:	f000 f82f 	bl	8006ea4 <__malloc_unlock>
 8006e46:	2207      	movs	r2, #7
 8006e48:	350b      	adds	r5, #11
 8006e4a:	1d23      	adds	r3, r4, #4
 8006e4c:	4395      	bics	r5, r2
 8006e4e:	1aea      	subs	r2, r5, r3
 8006e50:	429d      	cmp	r5, r3
 8006e52:	d0e4      	beq.n	8006e1e <_malloc_r+0x8e>
 8006e54:	1b5b      	subs	r3, r3, r5
 8006e56:	50a3      	str	r3, [r4, r2]
 8006e58:	e7e1      	b.n	8006e1e <_malloc_r+0x8e>
 8006e5a:	605a      	str	r2, [r3, #4]
 8006e5c:	e7ec      	b.n	8006e38 <_malloc_r+0xa8>
 8006e5e:	6862      	ldr	r2, [r4, #4]
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d1d5      	bne.n	8006e10 <_malloc_r+0x80>
 8006e64:	9b00      	ldr	r3, [sp, #0]
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	e7e9      	b.n	8006e3e <_malloc_r+0xae>
 8006e6a:	0023      	movs	r3, r4
 8006e6c:	6864      	ldr	r4, [r4, #4]
 8006e6e:	e7a2      	b.n	8006db6 <_malloc_r+0x26>
 8006e70:	002c      	movs	r4, r5
 8006e72:	686d      	ldr	r5, [r5, #4]
 8006e74:	e7ab      	b.n	8006dce <_malloc_r+0x3e>
 8006e76:	0013      	movs	r3, r2
 8006e78:	e7c4      	b.n	8006e04 <_malloc_r+0x74>
 8006e7a:	230c      	movs	r3, #12
 8006e7c:	0030      	movs	r0, r6
 8006e7e:	6033      	str	r3, [r6, #0]
 8006e80:	f000 f810 	bl	8006ea4 <__malloc_unlock>
 8006e84:	e7cb      	b.n	8006e1e <_malloc_r+0x8e>
 8006e86:	6027      	str	r7, [r4, #0]
 8006e88:	e7d9      	b.n	8006e3e <_malloc_r+0xae>
 8006e8a:	605b      	str	r3, [r3, #4]
 8006e8c:	deff      	udf	#255	; 0xff
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	20000568 	.word	0x20000568

08006e94 <__malloc_lock>:
 8006e94:	b510      	push	{r4, lr}
 8006e96:	4802      	ldr	r0, [pc, #8]	; (8006ea0 <__malloc_lock+0xc>)
 8006e98:	f7ff ff02 	bl	8006ca0 <__retarget_lock_acquire_recursive>
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	20000564 	.word	0x20000564

08006ea4 <__malloc_unlock>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	4802      	ldr	r0, [pc, #8]	; (8006eb0 <__malloc_unlock+0xc>)
 8006ea8:	f7ff fefb 	bl	8006ca2 <__retarget_lock_release_recursive>
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	20000564 	.word	0x20000564

08006eb4 <__ssputs_r>:
 8006eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	9203      	str	r2, [sp, #12]
 8006ebc:	688e      	ldr	r6, [r1, #8]
 8006ebe:	9a01      	ldr	r2, [sp, #4]
 8006ec0:	0007      	movs	r7, r0
 8006ec2:	000c      	movs	r4, r1
 8006ec4:	680b      	ldr	r3, [r1, #0]
 8006ec6:	4296      	cmp	r6, r2
 8006ec8:	d831      	bhi.n	8006f2e <__ssputs_r+0x7a>
 8006eca:	898a      	ldrh	r2, [r1, #12]
 8006ecc:	2190      	movs	r1, #144	; 0x90
 8006ece:	00c9      	lsls	r1, r1, #3
 8006ed0:	420a      	tst	r2, r1
 8006ed2:	d029      	beq.n	8006f28 <__ssputs_r+0x74>
 8006ed4:	2003      	movs	r0, #3
 8006ed6:	6921      	ldr	r1, [r4, #16]
 8006ed8:	1a5b      	subs	r3, r3, r1
 8006eda:	9302      	str	r3, [sp, #8]
 8006edc:	6963      	ldr	r3, [r4, #20]
 8006ede:	4343      	muls	r3, r0
 8006ee0:	0fdd      	lsrs	r5, r3, #31
 8006ee2:	18ed      	adds	r5, r5, r3
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	9802      	ldr	r0, [sp, #8]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	181b      	adds	r3, r3, r0
 8006eec:	106d      	asrs	r5, r5, #1
 8006eee:	42ab      	cmp	r3, r5
 8006ef0:	d900      	bls.n	8006ef4 <__ssputs_r+0x40>
 8006ef2:	001d      	movs	r5, r3
 8006ef4:	0552      	lsls	r2, r2, #21
 8006ef6:	d529      	bpl.n	8006f4c <__ssputs_r+0x98>
 8006ef8:	0029      	movs	r1, r5
 8006efa:	0038      	movs	r0, r7
 8006efc:	f7ff ff48 	bl	8006d90 <_malloc_r>
 8006f00:	1e06      	subs	r6, r0, #0
 8006f02:	d02d      	beq.n	8006f60 <__ssputs_r+0xac>
 8006f04:	9a02      	ldr	r2, [sp, #8]
 8006f06:	6921      	ldr	r1, [r4, #16]
 8006f08:	f7ff fecc 	bl	8006ca4 <memcpy>
 8006f0c:	89a2      	ldrh	r2, [r4, #12]
 8006f0e:	4b19      	ldr	r3, [pc, #100]	; (8006f74 <__ssputs_r+0xc0>)
 8006f10:	401a      	ands	r2, r3
 8006f12:	2380      	movs	r3, #128	; 0x80
 8006f14:	4313      	orrs	r3, r2
 8006f16:	81a3      	strh	r3, [r4, #12]
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	6126      	str	r6, [r4, #16]
 8006f1c:	18f6      	adds	r6, r6, r3
 8006f1e:	6026      	str	r6, [r4, #0]
 8006f20:	6165      	str	r5, [r4, #20]
 8006f22:	9e01      	ldr	r6, [sp, #4]
 8006f24:	1aed      	subs	r5, r5, r3
 8006f26:	60a5      	str	r5, [r4, #8]
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	429e      	cmp	r6, r3
 8006f2c:	d900      	bls.n	8006f30 <__ssputs_r+0x7c>
 8006f2e:	9e01      	ldr	r6, [sp, #4]
 8006f30:	0032      	movs	r2, r6
 8006f32:	9903      	ldr	r1, [sp, #12]
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	f000 fa9f 	bl	8007478 <memmove>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	68a3      	ldr	r3, [r4, #8]
 8006f3e:	1b9b      	subs	r3, r3, r6
 8006f40:	60a3      	str	r3, [r4, #8]
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	199b      	adds	r3, r3, r6
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	b005      	add	sp, #20
 8006f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4c:	002a      	movs	r2, r5
 8006f4e:	0038      	movs	r0, r7
 8006f50:	f000 fac3 	bl	80074da <_realloc_r>
 8006f54:	1e06      	subs	r6, r0, #0
 8006f56:	d1df      	bne.n	8006f18 <__ssputs_r+0x64>
 8006f58:	0038      	movs	r0, r7
 8006f5a:	6921      	ldr	r1, [r4, #16]
 8006f5c:	f7ff feac 	bl	8006cb8 <_free_r>
 8006f60:	230c      	movs	r3, #12
 8006f62:	2001      	movs	r0, #1
 8006f64:	603b      	str	r3, [r7, #0]
 8006f66:	89a2      	ldrh	r2, [r4, #12]
 8006f68:	3334      	adds	r3, #52	; 0x34
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	4240      	negs	r0, r0
 8006f70:	e7ea      	b.n	8006f48 <__ssputs_r+0x94>
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	fffffb7f 	.word	0xfffffb7f

08006f78 <_svfiprintf_r>:
 8006f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f7a:	b0a1      	sub	sp, #132	; 0x84
 8006f7c:	9003      	str	r0, [sp, #12]
 8006f7e:	001d      	movs	r5, r3
 8006f80:	898b      	ldrh	r3, [r1, #12]
 8006f82:	000f      	movs	r7, r1
 8006f84:	0016      	movs	r6, r2
 8006f86:	061b      	lsls	r3, r3, #24
 8006f88:	d511      	bpl.n	8006fae <_svfiprintf_r+0x36>
 8006f8a:	690b      	ldr	r3, [r1, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10e      	bne.n	8006fae <_svfiprintf_r+0x36>
 8006f90:	2140      	movs	r1, #64	; 0x40
 8006f92:	f7ff fefd 	bl	8006d90 <_malloc_r>
 8006f96:	6038      	str	r0, [r7, #0]
 8006f98:	6138      	str	r0, [r7, #16]
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d105      	bne.n	8006faa <_svfiprintf_r+0x32>
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	9a03      	ldr	r2, [sp, #12]
 8006fa2:	3801      	subs	r0, #1
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	b021      	add	sp, #132	; 0x84
 8006fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006faa:	2340      	movs	r3, #64	; 0x40
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	ac08      	add	r4, sp, #32
 8006fb2:	6163      	str	r3, [r4, #20]
 8006fb4:	3320      	adds	r3, #32
 8006fb6:	7663      	strb	r3, [r4, #25]
 8006fb8:	3310      	adds	r3, #16
 8006fba:	76a3      	strb	r3, [r4, #26]
 8006fbc:	9507      	str	r5, [sp, #28]
 8006fbe:	0035      	movs	r5, r6
 8006fc0:	782b      	ldrb	r3, [r5, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <_svfiprintf_r+0x52>
 8006fc6:	2b25      	cmp	r3, #37	; 0x25
 8006fc8:	d148      	bne.n	800705c <_svfiprintf_r+0xe4>
 8006fca:	1bab      	subs	r3, r5, r6
 8006fcc:	9305      	str	r3, [sp, #20]
 8006fce:	42b5      	cmp	r5, r6
 8006fd0:	d00b      	beq.n	8006fea <_svfiprintf_r+0x72>
 8006fd2:	0032      	movs	r2, r6
 8006fd4:	0039      	movs	r1, r7
 8006fd6:	9803      	ldr	r0, [sp, #12]
 8006fd8:	f7ff ff6c 	bl	8006eb4 <__ssputs_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d100      	bne.n	8006fe2 <_svfiprintf_r+0x6a>
 8006fe0:	e0af      	b.n	8007142 <_svfiprintf_r+0x1ca>
 8006fe2:	6963      	ldr	r3, [r4, #20]
 8006fe4:	9a05      	ldr	r2, [sp, #20]
 8006fe6:	189b      	adds	r3, r3, r2
 8006fe8:	6163      	str	r3, [r4, #20]
 8006fea:	782b      	ldrb	r3, [r5, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d100      	bne.n	8006ff2 <_svfiprintf_r+0x7a>
 8006ff0:	e0a7      	b.n	8007142 <_svfiprintf_r+0x1ca>
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4252      	negs	r2, r2
 8006ff8:	6062      	str	r2, [r4, #4]
 8006ffa:	a904      	add	r1, sp, #16
 8006ffc:	3254      	adds	r2, #84	; 0x54
 8006ffe:	1852      	adds	r2, r2, r1
 8007000:	1c6e      	adds	r6, r5, #1
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	60e3      	str	r3, [r4, #12]
 8007006:	60a3      	str	r3, [r4, #8]
 8007008:	7013      	strb	r3, [r2, #0]
 800700a:	65a3      	str	r3, [r4, #88]	; 0x58
 800700c:	4b55      	ldr	r3, [pc, #340]	; (8007164 <_svfiprintf_r+0x1ec>)
 800700e:	2205      	movs	r2, #5
 8007010:	0018      	movs	r0, r3
 8007012:	7831      	ldrb	r1, [r6, #0]
 8007014:	9305      	str	r3, [sp, #20]
 8007016:	f000 fa55 	bl	80074c4 <memchr>
 800701a:	1c75      	adds	r5, r6, #1
 800701c:	2800      	cmp	r0, #0
 800701e:	d11f      	bne.n	8007060 <_svfiprintf_r+0xe8>
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	06d3      	lsls	r3, r2, #27
 8007024:	d504      	bpl.n	8007030 <_svfiprintf_r+0xb8>
 8007026:	2353      	movs	r3, #83	; 0x53
 8007028:	a904      	add	r1, sp, #16
 800702a:	185b      	adds	r3, r3, r1
 800702c:	2120      	movs	r1, #32
 800702e:	7019      	strb	r1, [r3, #0]
 8007030:	0713      	lsls	r3, r2, #28
 8007032:	d504      	bpl.n	800703e <_svfiprintf_r+0xc6>
 8007034:	2353      	movs	r3, #83	; 0x53
 8007036:	a904      	add	r1, sp, #16
 8007038:	185b      	adds	r3, r3, r1
 800703a:	212b      	movs	r1, #43	; 0x2b
 800703c:	7019      	strb	r1, [r3, #0]
 800703e:	7833      	ldrb	r3, [r6, #0]
 8007040:	2b2a      	cmp	r3, #42	; 0x2a
 8007042:	d016      	beq.n	8007072 <_svfiprintf_r+0xfa>
 8007044:	0035      	movs	r5, r6
 8007046:	2100      	movs	r1, #0
 8007048:	200a      	movs	r0, #10
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	782a      	ldrb	r2, [r5, #0]
 800704e:	1c6e      	adds	r6, r5, #1
 8007050:	3a30      	subs	r2, #48	; 0x30
 8007052:	2a09      	cmp	r2, #9
 8007054:	d94e      	bls.n	80070f4 <_svfiprintf_r+0x17c>
 8007056:	2900      	cmp	r1, #0
 8007058:	d111      	bne.n	800707e <_svfiprintf_r+0x106>
 800705a:	e017      	b.n	800708c <_svfiprintf_r+0x114>
 800705c:	3501      	adds	r5, #1
 800705e:	e7af      	b.n	8006fc0 <_svfiprintf_r+0x48>
 8007060:	9b05      	ldr	r3, [sp, #20]
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	1ac0      	subs	r0, r0, r3
 8007066:	2301      	movs	r3, #1
 8007068:	4083      	lsls	r3, r0
 800706a:	4313      	orrs	r3, r2
 800706c:	002e      	movs	r6, r5
 800706e:	6023      	str	r3, [r4, #0]
 8007070:	e7cc      	b.n	800700c <_svfiprintf_r+0x94>
 8007072:	9b07      	ldr	r3, [sp, #28]
 8007074:	1d19      	adds	r1, r3, #4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	9107      	str	r1, [sp, #28]
 800707a:	2b00      	cmp	r3, #0
 800707c:	db01      	blt.n	8007082 <_svfiprintf_r+0x10a>
 800707e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007080:	e004      	b.n	800708c <_svfiprintf_r+0x114>
 8007082:	425b      	negs	r3, r3
 8007084:	60e3      	str	r3, [r4, #12]
 8007086:	2302      	movs	r3, #2
 8007088:	4313      	orrs	r3, r2
 800708a:	6023      	str	r3, [r4, #0]
 800708c:	782b      	ldrb	r3, [r5, #0]
 800708e:	2b2e      	cmp	r3, #46	; 0x2e
 8007090:	d10a      	bne.n	80070a8 <_svfiprintf_r+0x130>
 8007092:	786b      	ldrb	r3, [r5, #1]
 8007094:	2b2a      	cmp	r3, #42	; 0x2a
 8007096:	d135      	bne.n	8007104 <_svfiprintf_r+0x18c>
 8007098:	9b07      	ldr	r3, [sp, #28]
 800709a:	3502      	adds	r5, #2
 800709c:	1d1a      	adds	r2, r3, #4
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	9207      	str	r2, [sp, #28]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db2b      	blt.n	80070fe <_svfiprintf_r+0x186>
 80070a6:	9309      	str	r3, [sp, #36]	; 0x24
 80070a8:	4e2f      	ldr	r6, [pc, #188]	; (8007168 <_svfiprintf_r+0x1f0>)
 80070aa:	2203      	movs	r2, #3
 80070ac:	0030      	movs	r0, r6
 80070ae:	7829      	ldrb	r1, [r5, #0]
 80070b0:	f000 fa08 	bl	80074c4 <memchr>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d006      	beq.n	80070c6 <_svfiprintf_r+0x14e>
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	1b80      	subs	r0, r0, r6
 80070bc:	4083      	lsls	r3, r0
 80070be:	6822      	ldr	r2, [r4, #0]
 80070c0:	3501      	adds	r5, #1
 80070c2:	4313      	orrs	r3, r2
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	7829      	ldrb	r1, [r5, #0]
 80070c8:	2206      	movs	r2, #6
 80070ca:	4828      	ldr	r0, [pc, #160]	; (800716c <_svfiprintf_r+0x1f4>)
 80070cc:	1c6e      	adds	r6, r5, #1
 80070ce:	7621      	strb	r1, [r4, #24]
 80070d0:	f000 f9f8 	bl	80074c4 <memchr>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d03c      	beq.n	8007152 <_svfiprintf_r+0x1da>
 80070d8:	4b25      	ldr	r3, [pc, #148]	; (8007170 <_svfiprintf_r+0x1f8>)
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d125      	bne.n	800712a <_svfiprintf_r+0x1b2>
 80070de:	2207      	movs	r2, #7
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	3307      	adds	r3, #7
 80070e4:	4393      	bics	r3, r2
 80070e6:	3308      	adds	r3, #8
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	6963      	ldr	r3, [r4, #20]
 80070ec:	9a04      	ldr	r2, [sp, #16]
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	6163      	str	r3, [r4, #20]
 80070f2:	e764      	b.n	8006fbe <_svfiprintf_r+0x46>
 80070f4:	4343      	muls	r3, r0
 80070f6:	0035      	movs	r5, r6
 80070f8:	2101      	movs	r1, #1
 80070fa:	189b      	adds	r3, r3, r2
 80070fc:	e7a6      	b.n	800704c <_svfiprintf_r+0xd4>
 80070fe:	2301      	movs	r3, #1
 8007100:	425b      	negs	r3, r3
 8007102:	e7d0      	b.n	80070a6 <_svfiprintf_r+0x12e>
 8007104:	2300      	movs	r3, #0
 8007106:	200a      	movs	r0, #10
 8007108:	001a      	movs	r2, r3
 800710a:	3501      	adds	r5, #1
 800710c:	6063      	str	r3, [r4, #4]
 800710e:	7829      	ldrb	r1, [r5, #0]
 8007110:	1c6e      	adds	r6, r5, #1
 8007112:	3930      	subs	r1, #48	; 0x30
 8007114:	2909      	cmp	r1, #9
 8007116:	d903      	bls.n	8007120 <_svfiprintf_r+0x1a8>
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0c5      	beq.n	80070a8 <_svfiprintf_r+0x130>
 800711c:	9209      	str	r2, [sp, #36]	; 0x24
 800711e:	e7c3      	b.n	80070a8 <_svfiprintf_r+0x130>
 8007120:	4342      	muls	r2, r0
 8007122:	0035      	movs	r5, r6
 8007124:	2301      	movs	r3, #1
 8007126:	1852      	adds	r2, r2, r1
 8007128:	e7f1      	b.n	800710e <_svfiprintf_r+0x196>
 800712a:	aa07      	add	r2, sp, #28
 800712c:	9200      	str	r2, [sp, #0]
 800712e:	0021      	movs	r1, r4
 8007130:	003a      	movs	r2, r7
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <_svfiprintf_r+0x1fc>)
 8007134:	9803      	ldr	r0, [sp, #12]
 8007136:	e000      	b.n	800713a <_svfiprintf_r+0x1c2>
 8007138:	bf00      	nop
 800713a:	9004      	str	r0, [sp, #16]
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	3301      	adds	r3, #1
 8007140:	d1d3      	bne.n	80070ea <_svfiprintf_r+0x172>
 8007142:	89bb      	ldrh	r3, [r7, #12]
 8007144:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007146:	065b      	lsls	r3, r3, #25
 8007148:	d400      	bmi.n	800714c <_svfiprintf_r+0x1d4>
 800714a:	e72c      	b.n	8006fa6 <_svfiprintf_r+0x2e>
 800714c:	2001      	movs	r0, #1
 800714e:	4240      	negs	r0, r0
 8007150:	e729      	b.n	8006fa6 <_svfiprintf_r+0x2e>
 8007152:	aa07      	add	r2, sp, #28
 8007154:	9200      	str	r2, [sp, #0]
 8007156:	0021      	movs	r1, r4
 8007158:	003a      	movs	r2, r7
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <_svfiprintf_r+0x1fc>)
 800715c:	9803      	ldr	r0, [sp, #12]
 800715e:	f000 f87b 	bl	8007258 <_printf_i>
 8007162:	e7ea      	b.n	800713a <_svfiprintf_r+0x1c2>
 8007164:	08008e60 	.word	0x08008e60
 8007168:	08008e66 	.word	0x08008e66
 800716c:	08008e6a 	.word	0x08008e6a
 8007170:	00000000 	.word	0x00000000
 8007174:	08006eb5 	.word	0x08006eb5

08007178 <_printf_common>:
 8007178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800717a:	0016      	movs	r6, r2
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	688a      	ldr	r2, [r1, #8]
 8007180:	690b      	ldr	r3, [r1, #16]
 8007182:	000c      	movs	r4, r1
 8007184:	9000      	str	r0, [sp, #0]
 8007186:	4293      	cmp	r3, r2
 8007188:	da00      	bge.n	800718c <_printf_common+0x14>
 800718a:	0013      	movs	r3, r2
 800718c:	0022      	movs	r2, r4
 800718e:	6033      	str	r3, [r6, #0]
 8007190:	3243      	adds	r2, #67	; 0x43
 8007192:	7812      	ldrb	r2, [r2, #0]
 8007194:	2a00      	cmp	r2, #0
 8007196:	d001      	beq.n	800719c <_printf_common+0x24>
 8007198:	3301      	adds	r3, #1
 800719a:	6033      	str	r3, [r6, #0]
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	069b      	lsls	r3, r3, #26
 80071a0:	d502      	bpl.n	80071a8 <_printf_common+0x30>
 80071a2:	6833      	ldr	r3, [r6, #0]
 80071a4:	3302      	adds	r3, #2
 80071a6:	6033      	str	r3, [r6, #0]
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	2306      	movs	r3, #6
 80071ac:	0015      	movs	r5, r2
 80071ae:	401d      	ands	r5, r3
 80071b0:	421a      	tst	r2, r3
 80071b2:	d027      	beq.n	8007204 <_printf_common+0x8c>
 80071b4:	0023      	movs	r3, r4
 80071b6:	3343      	adds	r3, #67	; 0x43
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	1e5a      	subs	r2, r3, #1
 80071bc:	4193      	sbcs	r3, r2
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	0692      	lsls	r2, r2, #26
 80071c2:	d430      	bmi.n	8007226 <_printf_common+0xae>
 80071c4:	0022      	movs	r2, r4
 80071c6:	9901      	ldr	r1, [sp, #4]
 80071c8:	9800      	ldr	r0, [sp, #0]
 80071ca:	9d08      	ldr	r5, [sp, #32]
 80071cc:	3243      	adds	r2, #67	; 0x43
 80071ce:	47a8      	blx	r5
 80071d0:	3001      	adds	r0, #1
 80071d2:	d025      	beq.n	8007220 <_printf_common+0xa8>
 80071d4:	2206      	movs	r2, #6
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	2500      	movs	r5, #0
 80071da:	4013      	ands	r3, r2
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d105      	bne.n	80071ec <_printf_common+0x74>
 80071e0:	6833      	ldr	r3, [r6, #0]
 80071e2:	68e5      	ldr	r5, [r4, #12]
 80071e4:	1aed      	subs	r5, r5, r3
 80071e6:	43eb      	mvns	r3, r5
 80071e8:	17db      	asrs	r3, r3, #31
 80071ea:	401d      	ands	r5, r3
 80071ec:	68a3      	ldr	r3, [r4, #8]
 80071ee:	6922      	ldr	r2, [r4, #16]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	dd01      	ble.n	80071f8 <_printf_common+0x80>
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	18ed      	adds	r5, r5, r3
 80071f8:	2600      	movs	r6, #0
 80071fa:	42b5      	cmp	r5, r6
 80071fc:	d120      	bne.n	8007240 <_printf_common+0xc8>
 80071fe:	2000      	movs	r0, #0
 8007200:	e010      	b.n	8007224 <_printf_common+0xac>
 8007202:	3501      	adds	r5, #1
 8007204:	68e3      	ldr	r3, [r4, #12]
 8007206:	6832      	ldr	r2, [r6, #0]
 8007208:	1a9b      	subs	r3, r3, r2
 800720a:	42ab      	cmp	r3, r5
 800720c:	ddd2      	ble.n	80071b4 <_printf_common+0x3c>
 800720e:	0022      	movs	r2, r4
 8007210:	2301      	movs	r3, #1
 8007212:	9901      	ldr	r1, [sp, #4]
 8007214:	9800      	ldr	r0, [sp, #0]
 8007216:	9f08      	ldr	r7, [sp, #32]
 8007218:	3219      	adds	r2, #25
 800721a:	47b8      	blx	r7
 800721c:	3001      	adds	r0, #1
 800721e:	d1f0      	bne.n	8007202 <_printf_common+0x8a>
 8007220:	2001      	movs	r0, #1
 8007222:	4240      	negs	r0, r0
 8007224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007226:	2030      	movs	r0, #48	; 0x30
 8007228:	18e1      	adds	r1, r4, r3
 800722a:	3143      	adds	r1, #67	; 0x43
 800722c:	7008      	strb	r0, [r1, #0]
 800722e:	0021      	movs	r1, r4
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	3145      	adds	r1, #69	; 0x45
 8007234:	7809      	ldrb	r1, [r1, #0]
 8007236:	18a2      	adds	r2, r4, r2
 8007238:	3243      	adds	r2, #67	; 0x43
 800723a:	3302      	adds	r3, #2
 800723c:	7011      	strb	r1, [r2, #0]
 800723e:	e7c1      	b.n	80071c4 <_printf_common+0x4c>
 8007240:	0022      	movs	r2, r4
 8007242:	2301      	movs	r3, #1
 8007244:	9901      	ldr	r1, [sp, #4]
 8007246:	9800      	ldr	r0, [sp, #0]
 8007248:	9f08      	ldr	r7, [sp, #32]
 800724a:	321a      	adds	r2, #26
 800724c:	47b8      	blx	r7
 800724e:	3001      	adds	r0, #1
 8007250:	d0e6      	beq.n	8007220 <_printf_common+0xa8>
 8007252:	3601      	adds	r6, #1
 8007254:	e7d1      	b.n	80071fa <_printf_common+0x82>
	...

08007258 <_printf_i>:
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	b08b      	sub	sp, #44	; 0x2c
 800725c:	9206      	str	r2, [sp, #24]
 800725e:	000a      	movs	r2, r1
 8007260:	3243      	adds	r2, #67	; 0x43
 8007262:	9307      	str	r3, [sp, #28]
 8007264:	9005      	str	r0, [sp, #20]
 8007266:	9204      	str	r2, [sp, #16]
 8007268:	7e0a      	ldrb	r2, [r1, #24]
 800726a:	000c      	movs	r4, r1
 800726c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800726e:	2a78      	cmp	r2, #120	; 0x78
 8007270:	d809      	bhi.n	8007286 <_printf_i+0x2e>
 8007272:	2a62      	cmp	r2, #98	; 0x62
 8007274:	d80b      	bhi.n	800728e <_printf_i+0x36>
 8007276:	2a00      	cmp	r2, #0
 8007278:	d100      	bne.n	800727c <_printf_i+0x24>
 800727a:	e0be      	b.n	80073fa <_printf_i+0x1a2>
 800727c:	497c      	ldr	r1, [pc, #496]	; (8007470 <_printf_i+0x218>)
 800727e:	9103      	str	r1, [sp, #12]
 8007280:	2a58      	cmp	r2, #88	; 0x58
 8007282:	d100      	bne.n	8007286 <_printf_i+0x2e>
 8007284:	e093      	b.n	80073ae <_printf_i+0x156>
 8007286:	0026      	movs	r6, r4
 8007288:	3642      	adds	r6, #66	; 0x42
 800728a:	7032      	strb	r2, [r6, #0]
 800728c:	e022      	b.n	80072d4 <_printf_i+0x7c>
 800728e:	0010      	movs	r0, r2
 8007290:	3863      	subs	r0, #99	; 0x63
 8007292:	2815      	cmp	r0, #21
 8007294:	d8f7      	bhi.n	8007286 <_printf_i+0x2e>
 8007296:	f7f8 ff3d 	bl	8000114 <__gnu_thumb1_case_shi>
 800729a:	0016      	.short	0x0016
 800729c:	fff6001f 	.word	0xfff6001f
 80072a0:	fff6fff6 	.word	0xfff6fff6
 80072a4:	001ffff6 	.word	0x001ffff6
 80072a8:	fff6fff6 	.word	0xfff6fff6
 80072ac:	fff6fff6 	.word	0xfff6fff6
 80072b0:	003600a3 	.word	0x003600a3
 80072b4:	fff60083 	.word	0xfff60083
 80072b8:	00b4fff6 	.word	0x00b4fff6
 80072bc:	0036fff6 	.word	0x0036fff6
 80072c0:	fff6fff6 	.word	0xfff6fff6
 80072c4:	0087      	.short	0x0087
 80072c6:	0026      	movs	r6, r4
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	3642      	adds	r6, #66	; 0x42
 80072cc:	1d11      	adds	r1, r2, #4
 80072ce:	6019      	str	r1, [r3, #0]
 80072d0:	6813      	ldr	r3, [r2, #0]
 80072d2:	7033      	strb	r3, [r6, #0]
 80072d4:	2301      	movs	r3, #1
 80072d6:	e0a2      	b.n	800741e <_printf_i+0x1c6>
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	6809      	ldr	r1, [r1, #0]
 80072dc:	1d02      	adds	r2, r0, #4
 80072de:	060d      	lsls	r5, r1, #24
 80072e0:	d50b      	bpl.n	80072fa <_printf_i+0xa2>
 80072e2:	6805      	ldr	r5, [r0, #0]
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	da03      	bge.n	80072f2 <_printf_i+0x9a>
 80072ea:	232d      	movs	r3, #45	; 0x2d
 80072ec:	9a04      	ldr	r2, [sp, #16]
 80072ee:	426d      	negs	r5, r5
 80072f0:	7013      	strb	r3, [r2, #0]
 80072f2:	4b5f      	ldr	r3, [pc, #380]	; (8007470 <_printf_i+0x218>)
 80072f4:	270a      	movs	r7, #10
 80072f6:	9303      	str	r3, [sp, #12]
 80072f8:	e01b      	b.n	8007332 <_printf_i+0xda>
 80072fa:	6805      	ldr	r5, [r0, #0]
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	0649      	lsls	r1, r1, #25
 8007300:	d5f1      	bpl.n	80072e6 <_printf_i+0x8e>
 8007302:	b22d      	sxth	r5, r5
 8007304:	e7ef      	b.n	80072e6 <_printf_i+0x8e>
 8007306:	680d      	ldr	r5, [r1, #0]
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	1d08      	adds	r0, r1, #4
 800730c:	6018      	str	r0, [r3, #0]
 800730e:	062e      	lsls	r6, r5, #24
 8007310:	d501      	bpl.n	8007316 <_printf_i+0xbe>
 8007312:	680d      	ldr	r5, [r1, #0]
 8007314:	e003      	b.n	800731e <_printf_i+0xc6>
 8007316:	066d      	lsls	r5, r5, #25
 8007318:	d5fb      	bpl.n	8007312 <_printf_i+0xba>
 800731a:	680d      	ldr	r5, [r1, #0]
 800731c:	b2ad      	uxth	r5, r5
 800731e:	4b54      	ldr	r3, [pc, #336]	; (8007470 <_printf_i+0x218>)
 8007320:	2708      	movs	r7, #8
 8007322:	9303      	str	r3, [sp, #12]
 8007324:	2a6f      	cmp	r2, #111	; 0x6f
 8007326:	d000      	beq.n	800732a <_printf_i+0xd2>
 8007328:	3702      	adds	r7, #2
 800732a:	0023      	movs	r3, r4
 800732c:	2200      	movs	r2, #0
 800732e:	3343      	adds	r3, #67	; 0x43
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	6863      	ldr	r3, [r4, #4]
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	db03      	blt.n	8007342 <_printf_i+0xea>
 800733a:	2104      	movs	r1, #4
 800733c:	6822      	ldr	r2, [r4, #0]
 800733e:	438a      	bics	r2, r1
 8007340:	6022      	str	r2, [r4, #0]
 8007342:	2d00      	cmp	r5, #0
 8007344:	d102      	bne.n	800734c <_printf_i+0xf4>
 8007346:	9e04      	ldr	r6, [sp, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00c      	beq.n	8007366 <_printf_i+0x10e>
 800734c:	9e04      	ldr	r6, [sp, #16]
 800734e:	0028      	movs	r0, r5
 8007350:	0039      	movs	r1, r7
 8007352:	f7f8 ff6f 	bl	8000234 <__aeabi_uidivmod>
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	3e01      	subs	r6, #1
 800735a:	5c5b      	ldrb	r3, [r3, r1]
 800735c:	7033      	strb	r3, [r6, #0]
 800735e:	002b      	movs	r3, r5
 8007360:	0005      	movs	r5, r0
 8007362:	429f      	cmp	r7, r3
 8007364:	d9f3      	bls.n	800734e <_printf_i+0xf6>
 8007366:	2f08      	cmp	r7, #8
 8007368:	d109      	bne.n	800737e <_printf_i+0x126>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	07db      	lsls	r3, r3, #31
 800736e:	d506      	bpl.n	800737e <_printf_i+0x126>
 8007370:	6862      	ldr	r2, [r4, #4]
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	429a      	cmp	r2, r3
 8007376:	dc02      	bgt.n	800737e <_printf_i+0x126>
 8007378:	2330      	movs	r3, #48	; 0x30
 800737a:	3e01      	subs	r6, #1
 800737c:	7033      	strb	r3, [r6, #0]
 800737e:	9b04      	ldr	r3, [sp, #16]
 8007380:	1b9b      	subs	r3, r3, r6
 8007382:	6123      	str	r3, [r4, #16]
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	0021      	movs	r1, r4
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	9805      	ldr	r0, [sp, #20]
 800738c:	9b06      	ldr	r3, [sp, #24]
 800738e:	aa09      	add	r2, sp, #36	; 0x24
 8007390:	f7ff fef2 	bl	8007178 <_printf_common>
 8007394:	3001      	adds	r0, #1
 8007396:	d147      	bne.n	8007428 <_printf_i+0x1d0>
 8007398:	2001      	movs	r0, #1
 800739a:	4240      	negs	r0, r0
 800739c:	b00b      	add	sp, #44	; 0x2c
 800739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a0:	2220      	movs	r2, #32
 80073a2:	6809      	ldr	r1, [r1, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	6022      	str	r2, [r4, #0]
 80073a8:	2278      	movs	r2, #120	; 0x78
 80073aa:	4932      	ldr	r1, [pc, #200]	; (8007474 <_printf_i+0x21c>)
 80073ac:	9103      	str	r1, [sp, #12]
 80073ae:	0021      	movs	r1, r4
 80073b0:	3145      	adds	r1, #69	; 0x45
 80073b2:	700a      	strb	r2, [r1, #0]
 80073b4:	6819      	ldr	r1, [r3, #0]
 80073b6:	6822      	ldr	r2, [r4, #0]
 80073b8:	c920      	ldmia	r1!, {r5}
 80073ba:	0610      	lsls	r0, r2, #24
 80073bc:	d402      	bmi.n	80073c4 <_printf_i+0x16c>
 80073be:	0650      	lsls	r0, r2, #25
 80073c0:	d500      	bpl.n	80073c4 <_printf_i+0x16c>
 80073c2:	b2ad      	uxth	r5, r5
 80073c4:	6019      	str	r1, [r3, #0]
 80073c6:	07d3      	lsls	r3, r2, #31
 80073c8:	d502      	bpl.n	80073d0 <_printf_i+0x178>
 80073ca:	2320      	movs	r3, #32
 80073cc:	4313      	orrs	r3, r2
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	2710      	movs	r7, #16
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	d1a9      	bne.n	800732a <_printf_i+0xd2>
 80073d6:	2220      	movs	r2, #32
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	4393      	bics	r3, r2
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	e7a4      	b.n	800732a <_printf_i+0xd2>
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	680d      	ldr	r5, [r1, #0]
 80073e4:	1d10      	adds	r0, r2, #4
 80073e6:	6949      	ldr	r1, [r1, #20]
 80073e8:	6018      	str	r0, [r3, #0]
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	062e      	lsls	r6, r5, #24
 80073ee:	d501      	bpl.n	80073f4 <_printf_i+0x19c>
 80073f0:	6019      	str	r1, [r3, #0]
 80073f2:	e002      	b.n	80073fa <_printf_i+0x1a2>
 80073f4:	066d      	lsls	r5, r5, #25
 80073f6:	d5fb      	bpl.n	80073f0 <_printf_i+0x198>
 80073f8:	8019      	strh	r1, [r3, #0]
 80073fa:	2300      	movs	r3, #0
 80073fc:	9e04      	ldr	r6, [sp, #16]
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	e7c0      	b.n	8007384 <_printf_i+0x12c>
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	1d11      	adds	r1, r2, #4
 8007406:	6019      	str	r1, [r3, #0]
 8007408:	6816      	ldr	r6, [r2, #0]
 800740a:	2100      	movs	r1, #0
 800740c:	0030      	movs	r0, r6
 800740e:	6862      	ldr	r2, [r4, #4]
 8007410:	f000 f858 	bl	80074c4 <memchr>
 8007414:	2800      	cmp	r0, #0
 8007416:	d001      	beq.n	800741c <_printf_i+0x1c4>
 8007418:	1b80      	subs	r0, r0, r6
 800741a:	6060      	str	r0, [r4, #4]
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	6123      	str	r3, [r4, #16]
 8007420:	2300      	movs	r3, #0
 8007422:	9a04      	ldr	r2, [sp, #16]
 8007424:	7013      	strb	r3, [r2, #0]
 8007426:	e7ad      	b.n	8007384 <_printf_i+0x12c>
 8007428:	0032      	movs	r2, r6
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	9906      	ldr	r1, [sp, #24]
 800742e:	9805      	ldr	r0, [sp, #20]
 8007430:	9d07      	ldr	r5, [sp, #28]
 8007432:	47a8      	blx	r5
 8007434:	3001      	adds	r0, #1
 8007436:	d0af      	beq.n	8007398 <_printf_i+0x140>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	079b      	lsls	r3, r3, #30
 800743c:	d415      	bmi.n	800746a <_printf_i+0x212>
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	68e0      	ldr	r0, [r4, #12]
 8007442:	4298      	cmp	r0, r3
 8007444:	daaa      	bge.n	800739c <_printf_i+0x144>
 8007446:	0018      	movs	r0, r3
 8007448:	e7a8      	b.n	800739c <_printf_i+0x144>
 800744a:	0022      	movs	r2, r4
 800744c:	2301      	movs	r3, #1
 800744e:	9906      	ldr	r1, [sp, #24]
 8007450:	9805      	ldr	r0, [sp, #20]
 8007452:	9e07      	ldr	r6, [sp, #28]
 8007454:	3219      	adds	r2, #25
 8007456:	47b0      	blx	r6
 8007458:	3001      	adds	r0, #1
 800745a:	d09d      	beq.n	8007398 <_printf_i+0x140>
 800745c:	3501      	adds	r5, #1
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	42ab      	cmp	r3, r5
 8007466:	dcf0      	bgt.n	800744a <_printf_i+0x1f2>
 8007468:	e7e9      	b.n	800743e <_printf_i+0x1e6>
 800746a:	2500      	movs	r5, #0
 800746c:	e7f7      	b.n	800745e <_printf_i+0x206>
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	08008e71 	.word	0x08008e71
 8007474:	08008e82 	.word	0x08008e82

08007478 <memmove>:
 8007478:	b510      	push	{r4, lr}
 800747a:	4288      	cmp	r0, r1
 800747c:	d902      	bls.n	8007484 <memmove+0xc>
 800747e:	188b      	adds	r3, r1, r2
 8007480:	4298      	cmp	r0, r3
 8007482:	d303      	bcc.n	800748c <memmove+0x14>
 8007484:	2300      	movs	r3, #0
 8007486:	e007      	b.n	8007498 <memmove+0x20>
 8007488:	5c8b      	ldrb	r3, [r1, r2]
 800748a:	5483      	strb	r3, [r0, r2]
 800748c:	3a01      	subs	r2, #1
 800748e:	d2fb      	bcs.n	8007488 <memmove+0x10>
 8007490:	bd10      	pop	{r4, pc}
 8007492:	5ccc      	ldrb	r4, [r1, r3]
 8007494:	54c4      	strb	r4, [r0, r3]
 8007496:	3301      	adds	r3, #1
 8007498:	429a      	cmp	r2, r3
 800749a:	d1fa      	bne.n	8007492 <memmove+0x1a>
 800749c:	e7f8      	b.n	8007490 <memmove+0x18>
	...

080074a0 <_sbrk_r>:
 80074a0:	2300      	movs	r3, #0
 80074a2:	b570      	push	{r4, r5, r6, lr}
 80074a4:	4d06      	ldr	r5, [pc, #24]	; (80074c0 <_sbrk_r+0x20>)
 80074a6:	0004      	movs	r4, r0
 80074a8:	0008      	movs	r0, r1
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	f7fb fb3a 	bl	8002b24 <_sbrk>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d103      	bne.n	80074bc <_sbrk_r+0x1c>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d000      	beq.n	80074bc <_sbrk_r+0x1c>
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	20000560 	.word	0x20000560

080074c4 <memchr>:
 80074c4:	b2c9      	uxtb	r1, r1
 80074c6:	1882      	adds	r2, r0, r2
 80074c8:	4290      	cmp	r0, r2
 80074ca:	d101      	bne.n	80074d0 <memchr+0xc>
 80074cc:	2000      	movs	r0, #0
 80074ce:	4770      	bx	lr
 80074d0:	7803      	ldrb	r3, [r0, #0]
 80074d2:	428b      	cmp	r3, r1
 80074d4:	d0fb      	beq.n	80074ce <memchr+0xa>
 80074d6:	3001      	adds	r0, #1
 80074d8:	e7f6      	b.n	80074c8 <memchr+0x4>

080074da <_realloc_r>:
 80074da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074dc:	0007      	movs	r7, r0
 80074de:	000e      	movs	r6, r1
 80074e0:	0014      	movs	r4, r2
 80074e2:	2900      	cmp	r1, #0
 80074e4:	d105      	bne.n	80074f2 <_realloc_r+0x18>
 80074e6:	0011      	movs	r1, r2
 80074e8:	f7ff fc52 	bl	8006d90 <_malloc_r>
 80074ec:	0005      	movs	r5, r0
 80074ee:	0028      	movs	r0, r5
 80074f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d103      	bne.n	80074fe <_realloc_r+0x24>
 80074f6:	f7ff fbdf 	bl	8006cb8 <_free_r>
 80074fa:	0025      	movs	r5, r4
 80074fc:	e7f7      	b.n	80074ee <_realloc_r+0x14>
 80074fe:	f000 f81b 	bl	8007538 <_malloc_usable_size_r>
 8007502:	9001      	str	r0, [sp, #4]
 8007504:	4284      	cmp	r4, r0
 8007506:	d803      	bhi.n	8007510 <_realloc_r+0x36>
 8007508:	0035      	movs	r5, r6
 800750a:	0843      	lsrs	r3, r0, #1
 800750c:	42a3      	cmp	r3, r4
 800750e:	d3ee      	bcc.n	80074ee <_realloc_r+0x14>
 8007510:	0021      	movs	r1, r4
 8007512:	0038      	movs	r0, r7
 8007514:	f7ff fc3c 	bl	8006d90 <_malloc_r>
 8007518:	1e05      	subs	r5, r0, #0
 800751a:	d0e8      	beq.n	80074ee <_realloc_r+0x14>
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	0022      	movs	r2, r4
 8007520:	429c      	cmp	r4, r3
 8007522:	d900      	bls.n	8007526 <_realloc_r+0x4c>
 8007524:	001a      	movs	r2, r3
 8007526:	0031      	movs	r1, r6
 8007528:	0028      	movs	r0, r5
 800752a:	f7ff fbbb 	bl	8006ca4 <memcpy>
 800752e:	0031      	movs	r1, r6
 8007530:	0038      	movs	r0, r7
 8007532:	f7ff fbc1 	bl	8006cb8 <_free_r>
 8007536:	e7da      	b.n	80074ee <_realloc_r+0x14>

08007538 <_malloc_usable_size_r>:
 8007538:	1f0b      	subs	r3, r1, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	1f18      	subs	r0, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	da01      	bge.n	8007546 <_malloc_usable_size_r+0xe>
 8007542:	580b      	ldr	r3, [r1, r0]
 8007544:	18c0      	adds	r0, r0, r3
 8007546:	4770      	bx	lr

08007548 <_init>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr

08007554 <_fini>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755a:	bc08      	pop	{r3}
 800755c:	469e      	mov	lr, r3
 800755e:	4770      	bx	lr
