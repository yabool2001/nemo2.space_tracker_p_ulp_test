
nemo2.space_tracker_p_ulp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006530  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001934  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f20  08007f20  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f28  08007f28  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f28  08007f28  00017f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  2000005c  08007f8c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08007f8c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126ad  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002799  00000000  00000000  00032774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00034f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d17  00000000  00000000  00035ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d093  00000000  00000000  00036d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125f6  00000000  00000000  00053d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7581  00000000  00000000  00066390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004238  00000000  00000000  0011d914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00121b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080065d4 	.word	0x080065d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080065d4 	.word	0x080065d4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8d8 	bl	8000628 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8d3 	bl	8000628 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b0e4      	sub	sp, #400	; 0x190
 8000644:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000646:	24c8      	movs	r4, #200	; 0xc8
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	23c6      	movs	r3, #198	; 0xc6
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f005 fb39 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <astronode_send_cfg_sr+0x64>)
 8000658:	25c8      	movs	r5, #200	; 0xc8
 800065a:	006d      	lsls	r5, r5, #1
 800065c:	195b      	adds	r3, r3, r5
 800065e:	19db      	adds	r3, r3, r7
 8000660:	0018      	movs	r0, r3
 8000662:	23c6      	movs	r3, #198	; 0xc6
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f005 fb2e 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2210      	movs	r2, #16
 8000670:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8000672:	003a      	movs	r2, r7
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0011      	movs	r1, r2
 8000678:	0018      	movs	r0, r3
 800067a:	f000 ff79 	bl	8001570 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <astronode_send_cfg_sr+0x64>)
 8000680:	195b      	adds	r3, r3, r5
 8000682:	19db      	adds	r3, r3, r7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b90      	cmp	r3, #144	; 0x90
 8000688:	d104      	bne.n	8000694 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <astronode_send_cfg_sr+0x68>)
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fd59 	bl	8002144 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8000692:	e003      	b.n	800069c <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <astronode_send_cfg_sr+0x6c>)
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fd54 	bl	8002144 <send_debug_logs>
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b064      	add	sp, #400	; 0x190
 80006a2:	bdb0      	pop	{r4, r5, r7, pc}
 80006a4:	fffffe70 	.word	0xfffffe70
 80006a8:	080069fc 	.word	0x080069fc
 80006ac:	08006a30 	.word	0x08006a30

080006b0 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	b0e7      	sub	sp, #412	; 0x19c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	0005      	movs	r5, r0
 80006b8:	000c      	movs	r4, r1
 80006ba:	0010      	movs	r0, r2
 80006bc:	0019      	movs	r1, r3
 80006be:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <astronode_send_cfg_wr+0x13c>)
 80006c0:	26cc      	movs	r6, #204	; 0xcc
 80006c2:	0076      	lsls	r6, r6, #1
 80006c4:	199b      	adds	r3, r3, r6
 80006c6:	19db      	adds	r3, r3, r7
 80006c8:	1c2a      	adds	r2, r5, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <astronode_send_cfg_wr+0x140>)
 80006ce:	0035      	movs	r5, r6
 80006d0:	195b      	adds	r3, r3, r5
 80006d2:	19db      	adds	r3, r3, r7
 80006d4:	1c22      	adds	r2, r4, #0
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <astronode_send_cfg_wr+0x144>)
 80006da:	002c      	movs	r4, r5
 80006dc:	191b      	adds	r3, r3, r4
 80006de:	19db      	adds	r3, r3, r7
 80006e0:	1c02      	adds	r2, r0, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <astronode_send_cfg_wr+0x148>)
 80006e6:	191b      	adds	r3, r3, r4
 80006e8:	19db      	adds	r3, r3, r7
 80006ea:	1c0a      	adds	r2, r1, #0
 80006ec:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80006ee:	25d0      	movs	r5, #208	; 0xd0
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	0018      	movs	r0, r3
 80006f4:	23c6      	movs	r3, #198	; 0xc6
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f005 fae5 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 80006fe:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <astronode_send_cfg_wr+0x14c>)
 8000700:	191b      	adds	r3, r3, r4
 8000702:	19db      	adds	r3, r3, r7
 8000704:	0018      	movs	r0, r3
 8000706:	23c6      	movs	r3, #198	; 0xc6
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f005 fadc 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8000710:	0029      	movs	r1, r5
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2205      	movs	r2, #5
 8000716:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8000718:	4b34      	ldr	r3, [pc, #208]	; (80007ec <astronode_send_cfg_wr+0x13c>)
 800071a:	191b      	adds	r3, r3, r4
 800071c:	19db      	adds	r3, r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	569a      	ldrsb	r2, [r3, r2]
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <astronode_send_cfg_wr+0x140>)
 8000724:	191b      	adds	r3, r3, r4
 8000726:	19db      	adds	r3, r3, r7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8000732:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <astronode_send_cfg_wr+0x144>)
 8000734:	191b      	adds	r3, r3, r4
 8000736:	19db      	adds	r3, r3, r7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <astronode_send_cfg_wr+0x148>)
 8000744:	191b      	adds	r3, r3, r4
 8000746:	19db      	adds	r3, r3, r7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b25b      	sxtb	r3, r3
 8000752:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8000754:	187b      	adds	r3, r7, r1
 8000756:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8000758:	23d4      	movs	r3, #212	; 0xd4
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2508      	movs	r5, #8
 800075e:	195b      	adds	r3, r3, r5
 8000760:	19db      	adds	r3, r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	569a      	ldrsb	r2, [r3, r2]
 8000766:	23d6      	movs	r3, #214	; 0xd6
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	195b      	adds	r3, r3, r5
 800076c:	19db      	adds	r3, r3, r7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b25b      	sxtb	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8000778:	23d8      	movs	r3, #216	; 0xd8
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	195b      	adds	r3, r3, r5
 800077e:	19db      	adds	r3, r3, r7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800078a:	23da      	movs	r3, #218	; 0xda
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	195b      	adds	r3, r3, r5
 8000790:	19db      	adds	r3, r3, r7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b25b      	sxtb	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b25b      	sxtb	r3, r3
 800079c:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80007a2:	0008      	movs	r0, r1
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	22c4      	movs	r2, #196	; 0xc4
 80007a8:	2103      	movs	r1, #3
 80007aa:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80007ac:	002b      	movs	r3, r5
 80007ae:	18fa      	adds	r2, r7, r3
 80007b0:	183b      	adds	r3, r7, r0
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fedb 	bl	8001570 <astronode_transport_send_receive>
 80007ba:	0003      	movs	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10f      	bne.n	80007e0 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <astronode_send_cfg_wr+0x14c>)
 80007c2:	191b      	adds	r3, r3, r4
 80007c4:	19db      	adds	r3, r3, r7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b85      	cmp	r3, #133	; 0x85
 80007ca:	d105      	bne.n	80007d8 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <astronode_send_cfg_wr+0x150>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fcb8 	bl	8002144 <send_debug_logs>
            return true ;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e004      	b.n	80007e2 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <astronode_send_cfg_wr+0x154>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fcb2 	bl	8002144 <send_debug_logs>
        }
    }
    return false ;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b067      	add	sp, #412	; 0x19c
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	fffffe6f 	.word	0xfffffe6f
 80007f0:	fffffe6e 	.word	0xfffffe6e
 80007f4:	fffffe6d 	.word	0xfffffe6d
 80007f8:	fffffe6c 	.word	0xfffffe6c
 80007fc:	fffffe70 	.word	0xfffffe70
 8000800:	08006a64 	.word	0x08006a64
 8000804:	08006a90 	.word	0x08006a90

08000808 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	b0ed      	sub	sp, #436	; 0x1b4
 800080c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800080e:	21c8      	movs	r1, #200	; 0xc8
 8000810:	2318      	movs	r3, #24
 8000812:	18cb      	adds	r3, r1, r3
 8000814:	19db      	adds	r3, r3, r7
 8000816:	0018      	movs	r0, r3
 8000818:	23c6      	movs	r3, #198	; 0xc6
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f005 fa53 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000822:	4b4a      	ldr	r3, [pc, #296]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000824:	26cc      	movs	r6, #204	; 0xcc
 8000826:	0076      	lsls	r6, r6, #1
 8000828:	199b      	adds	r3, r3, r6
 800082a:	2218      	movs	r2, #24
 800082c:	4694      	mov	ip, r2
 800082e:	44bc      	add	ip, r7
 8000830:	4463      	add	r3, ip
 8000832:	0018      	movs	r0, r3
 8000834:	23c6      	movs	r3, #198	; 0xc6
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f005 fa45 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800083e:	21c8      	movs	r1, #200	; 0xc8
 8000840:	2318      	movs	r3, #24
 8000842:	18cb      	adds	r3, r1, r3
 8000844:	19db      	adds	r3, r3, r7
 8000846:	2219      	movs	r2, #25
 8000848:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800084a:	2318      	movs	r3, #24
 800084c:	18fa      	adds	r2, r7, r3
 800084e:	2318      	movs	r3, #24
 8000850:	18cb      	adds	r3, r1, r3
 8000852:	19db      	adds	r3, r3, r7
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fe8a 	bl	8001570 <astronode_transport_send_receive>
 800085c:	0003      	movs	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d16f      	bne.n	8000942 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000864:	0032      	movs	r2, r6
 8000866:	189b      	adds	r3, r3, r2
 8000868:	2118      	movs	r1, #24
 800086a:	468c      	mov	ip, r1
 800086c:	44bc      	add	ip, r7
 800086e:	4463      	add	r3, ip
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b99      	cmp	r3, #153	; 0x99
 8000874:	d161      	bne.n	800093a <astronode_send_mgi_rr+0x132>
        {
 8000876:	466b      	mov	r3, sp
 8000878:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <astronode_send_mgi_rr+0x144>)
 800087c:	189b      	adds	r3, r3, r2
 800087e:	2218      	movs	r2, #24
 8000880:	4694      	mov	ip, r2
 8000882:	44bc      	add	ip, r7
 8000884:	4463      	add	r3, ip
 8000886:	22c4      	movs	r2, #196	; 0xc4
 8000888:	5a9b      	ldrh	r3, [r3, r2]
 800088a:	001a      	movs	r2, r3
 800088c:	3a01      	subs	r2, #1
 800088e:	21ca      	movs	r1, #202	; 0xca
 8000890:	0049      	lsls	r1, r1, #1
 8000892:	2018      	movs	r0, #24
 8000894:	1809      	adds	r1, r1, r0
 8000896:	19c9      	adds	r1, r1, r7
 8000898:	600a      	str	r2, [r1, #0]
 800089a:	001c      	movs	r4, r3
 800089c:	2200      	movs	r2, #0
 800089e:	0015      	movs	r5, r2
 80008a0:	0020      	movs	r0, r4
 80008a2:	0029      	movs	r1, r5
 80008a4:	0004      	movs	r4, r0
 80008a6:	0f62      	lsrs	r2, r4, #29
 80008a8:	000c      	movs	r4, r1
 80008aa:	00e4      	lsls	r4, r4, #3
 80008ac:	617c      	str	r4, [r7, #20]
 80008ae:	697c      	ldr	r4, [r7, #20]
 80008b0:	4314      	orrs	r4, r2
 80008b2:	617c      	str	r4, [r7, #20]
 80008b4:	0001      	movs	r1, r0
 80008b6:	00c9      	lsls	r1, r1, #3
 80008b8:	6139      	str	r1, [r7, #16]
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	0004      	movs	r4, r0
 80008c6:	0f62      	lsrs	r2, r4, #29
 80008c8:	000c      	movs	r4, r1
 80008ca:	00e4      	lsls	r4, r4, #3
 80008cc:	60fc      	str	r4, [r7, #12]
 80008ce:	68fc      	ldr	r4, [r7, #12]
 80008d0:	4314      	orrs	r4, r2
 80008d2:	60fc      	str	r4, [r7, #12]
 80008d4:	0001      	movs	r1, r0
 80008d6:	00ca      	lsls	r2, r1, #3
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	3307      	adds	r3, #7
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4669      	mov	r1, sp
 80008e2:	1acb      	subs	r3, r1, r3
 80008e4:	469d      	mov	sp, r3
 80008e6:	466b      	mov	r3, sp
 80008e8:	3300      	adds	r3, #0
 80008ea:	24c8      	movs	r4, #200	; 0xc8
 80008ec:	0064      	lsls	r4, r4, #1
 80008ee:	2218      	movs	r2, #24
 80008f0:	18a2      	adds	r2, r4, r2
 80008f2:	19d1      	adds	r1, r2, r7
 80008f4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <astronode_send_mgi_rr+0x148>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fc23 	bl	8002144 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000900:	22cc      	movs	r2, #204	; 0xcc
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	189b      	adds	r3, r3, r2
 8000906:	2218      	movs	r2, #24
 8000908:	4694      	mov	ip, r2
 800090a:	44bc      	add	ip, r7
 800090c:	4463      	add	r3, ip
 800090e:	22c4      	movs	r2, #196	; 0xc4
 8000910:	5a9b      	ldrh	r3, [r3, r2]
 8000912:	0019      	movs	r1, r3
 8000914:	2318      	movs	r3, #24
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	3301      	adds	r3, #1
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <astronode_send_mgi_rr+0x14c>)
 800091c:	2018      	movs	r0, #24
 800091e:	1820      	adds	r0, r4, r0
 8000920:	19c0      	adds	r0, r0, r7
 8000922:	6800      	ldr	r0, [r0, #0]
 8000924:	f005 f97c 	bl	8005c20 <sniprintf>
            send_debug_logs(guid);
 8000928:	2318      	movs	r3, #24
 800092a:	18e3      	adds	r3, r4, r3
 800092c:	19db      	adds	r3, r3, r7
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0018      	movs	r0, r3
 8000932:	f001 fc07 	bl	8002144 <send_debug_logs>
 8000936:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8000938:	e003      	b.n	8000942 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <astronode_send_mgi_rr+0x150>)
 800093c:	0018      	movs	r0, r3
 800093e:	f001 fc01 	bl	8002144 <send_debug_logs>
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b06d      	add	sp, #436	; 0x1b4
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	fffffe68 	.word	0xfffffe68
 8000950:	08006b1c 	.word	0x08006b1c
 8000954:	08006b2c 	.word	0x08006b2c
 8000958:	08006b30 	.word	0x08006b30

0800095c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	b0ed      	sub	sp, #436	; 0x1b4
 8000960:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000962:	21c8      	movs	r1, #200	; 0xc8
 8000964:	2318      	movs	r3, #24
 8000966:	18cb      	adds	r3, r1, r3
 8000968:	19db      	adds	r3, r3, r7
 800096a:	0018      	movs	r0, r3
 800096c:	23c6      	movs	r3, #198	; 0xc6
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f005 f9a9 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000976:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 8000978:	26cc      	movs	r6, #204	; 0xcc
 800097a:	0076      	lsls	r6, r6, #1
 800097c:	199b      	adds	r3, r3, r6
 800097e:	2218      	movs	r2, #24
 8000980:	4694      	mov	ip, r2
 8000982:	44bc      	add	ip, r7
 8000984:	4463      	add	r3, ip
 8000986:	0018      	movs	r0, r3
 8000988:	23c6      	movs	r3, #198	; 0xc6
 800098a:	001a      	movs	r2, r3
 800098c:	2100      	movs	r1, #0
 800098e:	f005 f99b 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8000992:	21c8      	movs	r1, #200	; 0xc8
 8000994:	2318      	movs	r3, #24
 8000996:	18cb      	adds	r3, r1, r3
 8000998:	19db      	adds	r3, r3, r7
 800099a:	221a      	movs	r2, #26
 800099c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800099e:	2318      	movs	r3, #24
 80009a0:	18fa      	adds	r2, r7, r3
 80009a2:	2318      	movs	r3, #24
 80009a4:	18cb      	adds	r3, r1, r3
 80009a6:	19db      	adds	r3, r3, r7
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fde0 	bl	8001570 <astronode_transport_send_receive>
 80009b0:	0003      	movs	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d16f      	bne.n	8000a96 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 80009b8:	0032      	movs	r2, r6
 80009ba:	189b      	adds	r3, r3, r2
 80009bc:	2118      	movs	r1, #24
 80009be:	468c      	mov	ip, r1
 80009c0:	44bc      	add	ip, r7
 80009c2:	4463      	add	r3, ip
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b9a      	cmp	r3, #154	; 0x9a
 80009c8:	d161      	bne.n	8000a8e <astronode_send_msn_rr+0x132>
        {
 80009ca:	466b      	mov	r3, sp
 80009cc:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 80009d0:	189b      	adds	r3, r3, r2
 80009d2:	2218      	movs	r2, #24
 80009d4:	4694      	mov	ip, r2
 80009d6:	44bc      	add	ip, r7
 80009d8:	4463      	add	r3, ip
 80009da:	22c4      	movs	r2, #196	; 0xc4
 80009dc:	5a9b      	ldrh	r3, [r3, r2]
 80009de:	001a      	movs	r2, r3
 80009e0:	3a01      	subs	r2, #1
 80009e2:	21ca      	movs	r1, #202	; 0xca
 80009e4:	0049      	lsls	r1, r1, #1
 80009e6:	2018      	movs	r0, #24
 80009e8:	1809      	adds	r1, r1, r0
 80009ea:	19c9      	adds	r1, r1, r7
 80009ec:	600a      	str	r2, [r1, #0]
 80009ee:	001c      	movs	r4, r3
 80009f0:	2200      	movs	r2, #0
 80009f2:	0015      	movs	r5, r2
 80009f4:	0020      	movs	r0, r4
 80009f6:	0029      	movs	r1, r5
 80009f8:	0004      	movs	r4, r0
 80009fa:	0f62      	lsrs	r2, r4, #29
 80009fc:	000c      	movs	r4, r1
 80009fe:	00e4      	lsls	r4, r4, #3
 8000a00:	617c      	str	r4, [r7, #20]
 8000a02:	697c      	ldr	r4, [r7, #20]
 8000a04:	4314      	orrs	r4, r2
 8000a06:	617c      	str	r4, [r7, #20]
 8000a08:	0001      	movs	r1, r0
 8000a0a:	00c9      	lsls	r1, r1, #3
 8000a0c:	6139      	str	r1, [r7, #16]
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	0004      	movs	r4, r0
 8000a1a:	0f62      	lsrs	r2, r4, #29
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	00e4      	lsls	r4, r4, #3
 8000a20:	60fc      	str	r4, [r7, #12]
 8000a22:	68fc      	ldr	r4, [r7, #12]
 8000a24:	4314      	orrs	r4, r2
 8000a26:	60fc      	str	r4, [r7, #12]
 8000a28:	0001      	movs	r1, r0
 8000a2a:	00ca      	lsls	r2, r1, #3
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	3307      	adds	r3, #7
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	4669      	mov	r1, sp
 8000a36:	1acb      	subs	r3, r1, r3
 8000a38:	469d      	mov	sp, r3
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	3300      	adds	r3, #0
 8000a3e:	24c8      	movs	r4, #200	; 0xc8
 8000a40:	0064      	lsls	r4, r4, #1
 8000a42:	2218      	movs	r2, #24
 8000a44:	18a2      	adds	r2, r4, r2
 8000a46:	19d1      	adds	r1, r2, r7
 8000a48:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <astronode_send_msn_rr+0x148>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 fb79 	bl	8002144 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 8000a54:	22cc      	movs	r2, #204	; 0xcc
 8000a56:	0052      	lsls	r2, r2, #1
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	44bc      	add	ip, r7
 8000a60:	4463      	add	r3, ip
 8000a62:	22c4      	movs	r2, #196	; 0xc4
 8000a64:	5a9b      	ldrh	r3, [r3, r2]
 8000a66:	0019      	movs	r1, r3
 8000a68:	2318      	movs	r3, #24
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <astronode_send_msn_rr+0x14c>)
 8000a70:	2018      	movs	r0, #24
 8000a72:	1820      	adds	r0, r4, r0
 8000a74:	19c0      	adds	r0, r0, r7
 8000a76:	6800      	ldr	r0, [r0, #0]
 8000a78:	f005 f8d2 	bl	8005c20 <sniprintf>
            send_debug_logs(serial_number);
 8000a7c:	2318      	movs	r3, #24
 8000a7e:	18e3      	adds	r3, r4, r3
 8000a80:	19db      	adds	r3, r3, r7
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fb5d 	bl	8002144 <send_debug_logs>
 8000a8a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8000a8c:	e003      	b.n	8000a96 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <astronode_send_msn_rr+0x150>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 fb57 	bl	8002144 <send_debug_logs>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b06d      	add	sp, #436	; 0x1b4
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	fffffe68 	.word	0xfffffe68
 8000aa4:	08006b4c 	.word	0x08006b4c
 8000aa8:	08006b2c 	.word	0x08006b2c
 8000aac:	08006b68 	.word	0x08006b68

08000ab0 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b0e4      	sub	sp, #400	; 0x190
 8000ab4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ab6:	24c8      	movs	r4, #200	; 0xc8
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	0018      	movs	r0, r3
 8000abc:	23c6      	movs	r3, #198	; 0xc6
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f005 f901 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000ac8:	25c8      	movs	r5, #200	; 0xc8
 8000aca:	006d      	lsls	r5, r5, #1
 8000acc:	195b      	adds	r3, r3, r5
 8000ace:	19db      	adds	r3, r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	23c6      	movs	r3, #198	; 0xc6
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f005 f8f6 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2265      	movs	r2, #101	; 0x65
 8000ae0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fd41 	bl	8001570 <astronode_transport_send_receive>
 8000aee:	0003      	movs	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d147      	bne.n	8000b84 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000af6:	195b      	adds	r3, r3, r5
 8000af8:	19db      	adds	r3, r3, r7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2be5      	cmp	r3, #229	; 0xe5
 8000afe:	d141      	bne.n	8000b84 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b02:	195b      	adds	r3, r3, r5
 8000b04:	19db      	adds	r3, r3, r7
 8000b06:	785b      	ldrb	r3, [r3, #1]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d006      	beq.n	8000b1e <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <astronode_send_evt_rr+0xe0>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <astronode_send_evt_rr+0xe4>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 fb13 	bl	8002144 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b20:	22c8      	movs	r2, #200	; 0xc8
 8000b22:	0052      	lsls	r2, r2, #1
 8000b24:	189b      	adds	r3, r3, r2
 8000b26:	19db      	adds	r3, r3, r7
 8000b28:	785b      	ldrb	r3, [r3, #1]
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d006      	beq.n	8000b40 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <astronode_send_evt_rr+0xe8>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <astronode_send_evt_rr+0xec>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 fb02 	bl	8002144 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b42:	22c8      	movs	r2, #200	; 0xc8
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	189b      	adds	r3, r3, r2
 8000b48:	19db      	adds	r3, r3, r7
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2304      	movs	r3, #4
 8000b50:	4013      	ands	r3, r2
 8000b52:	d006      	beq.n	8000b62 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <astronode_send_evt_rr+0xf0>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <astronode_send_evt_rr+0xf4>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 faf1 	bl	8002144 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b64:	22c8      	movs	r2, #200	; 0xc8
 8000b66:	0052      	lsls	r2, r2, #1
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	19db      	adds	r3, r3, r7
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2308      	movs	r3, #8
 8000b72:	4013      	ands	r3, r2
 8000b74:	d006      	beq.n	8000b84 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <astronode_send_evt_rr+0xf8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <astronode_send_evt_rr+0xfc>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fae0 	bl	8002144 <send_debug_logs>
            }

        }
    }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b064      	add	sp, #400	; 0x190
 8000b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8c:	fffffe70 	.word	0xfffffe70
 8000b90:	20000078 	.word	0x20000078
 8000b94:	08006c10 	.word	0x08006c10
 8000b98:	20000079 	.word	0x20000079
 8000b9c:	08006c34 	.word	0x08006c34
 8000ba0:	2000007a 	.word	0x2000007a
 8000ba4:	08006c4c 	.word	0x08006c4c
 8000ba8:	2000007b 	.word	0x2000007b
 8000bac:	08006c60 	.word	0x08006c60

08000bb0 <astronode_send_pld_fr>:
    }
    return false ;
}

void astronode_send_pld_fr(void)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b0e4      	sub	sp, #400	; 0x190
 8000bb4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000bb6:	24c8      	movs	r4, #200	; 0xc8
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	23c6      	movs	r3, #198	; 0xc6
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f005 f881 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <astronode_send_pld_fr+0x6c>)
 8000bc8:	25c8      	movs	r5, #200	; 0xc8
 8000bca:	006d      	lsls	r5, r5, #1
 8000bcc:	195b      	adds	r3, r3, r5
 8000bce:	19db      	adds	r3, r3, r7
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	23c6      	movs	r3, #198	; 0xc6
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f005 f876 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2227      	movs	r2, #39	; 0x27
 8000be0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000be2:	003a      	movs	r2, r7
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 fcc1 	bl	8001570 <astronode_transport_send_receive>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10e      	bne.n	8000c12 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <astronode_send_pld_fr+0x6c>)
 8000bf6:	195b      	adds	r3, r3, r5
 8000bf8:	19db      	adds	r3, r3, r7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2ba7      	cmp	r3, #167	; 0xa7
 8000bfe:	d104      	bne.n	8000c0a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <astronode_send_pld_fr+0x70>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f001 fa9e 	bl	8002144 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8000c08:	e003      	b.n	8000c12 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <astronode_send_pld_fr+0x74>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 fa99 	bl	8002144 <send_debug_logs>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b064      	add	sp, #400	; 0x190
 8000c18:	bdb0      	pop	{r4, r5, r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	fffffe70 	.word	0xfffffe70
 8000c20:	08006d88 	.word	0x08006d88
 8000c24:	08006dc0 	.word	0x08006dc0

08000c28 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b0e4      	sub	sp, #400	; 0x190
 8000c2c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000c2e:	24c8      	movs	r4, #200	; 0xc8
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	0018      	movs	r0, r3
 8000c34:	23c6      	movs	r3, #198	; 0xc6
 8000c36:	001a      	movs	r2, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f005 f845 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <astronode_send_res_cr+0x70>)
 8000c40:	25c8      	movs	r5, #200	; 0xc8
 8000c42:	006d      	lsls	r5, r5, #1
 8000c44:	195b      	adds	r3, r3, r5
 8000c46:	19db      	adds	r3, r3, r7
 8000c48:	0018      	movs	r0, r3
 8000c4a:	23c6      	movs	r3, #198	; 0xc6
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f005 f83a 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2255      	movs	r2, #85	; 0x55
 8000c58:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000c5a:	003a      	movs	r2, r7
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fc85 	bl	8001570 <astronode_transport_send_receive>
 8000c66:	0003      	movs	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d111      	bne.n	8000c90 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <astronode_send_res_cr+0x70>)
 8000c6e:	195b      	adds	r3, r3, r5
 8000c70:	19db      	adds	r3, r3, r7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2bd5      	cmp	r3, #213	; 0xd5
 8000c76:	d107      	bne.n	8000c88 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <astronode_send_res_cr+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <astronode_send_res_cr+0x78>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fa5f 	bl	8002144 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8000c86:	e003      	b.n	8000c90 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <astronode_send_res_cr+0x7c>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f001 fa5a 	bl	8002144 <send_debug_logs>
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b064      	add	sp, #400	; 0x190
 8000c96:	bdb0      	pop	{r4, r5, r7, pc}
 8000c98:	fffffe70 	.word	0xfffffe70
 8000c9c:	20000079 	.word	0x20000079
 8000ca0:	08006dfc 	.word	0x08006dfc
 8000ca4:	08006e30 	.word	0x08006e30

08000ca8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b0fa      	sub	sp, #488	; 0x1e8
 8000cac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8000cae:	258e      	movs	r5, #142	; 0x8e
 8000cb0:	006d      	lsls	r5, r5, #1
 8000cb2:	197b      	adds	r3, r7, r5
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	23c6      	movs	r3, #198	; 0xc6
 8000cb8:	001a      	movs	r2, r3
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f005 f804 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0} ;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000cc2:	24f4      	movs	r4, #244	; 0xf4
 8000cc4:	0064      	lsls	r4, r4, #1
 8000cc6:	191b      	adds	r3, r3, r4
 8000cc8:	19db      	adds	r3, r3, r7
 8000cca:	0018      	movs	r0, r3
 8000ccc:	23c6      	movs	r3, #198	; 0xc6
 8000cce:	001a      	movs	r2, r3
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f004 fff9 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8000cd6:	197b      	adds	r3, r7, r5
 8000cd8:	2217      	movs	r2, #23
 8000cda:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8000cdc:	2354      	movs	r3, #84	; 0x54
 8000cde:	18fa      	adds	r2, r7, r3
 8000ce0:	197b      	adds	r3, r7, r5
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fc43 	bl	8001570 <astronode_transport_send_receive>
 8000cea:	0003      	movs	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d133      	bne.n	8000d58 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	185b      	adds	r3, r3, r1
 8000cf6:	19db      	adds	r3, r3, r7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b97      	cmp	r3, #151	; 0x97
 8000cfc:	d128      	bne.n	8000d50 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d00:	185b      	adds	r3, r3, r1
 8000d02:	19db      	adds	r3, r3, r7
 8000d04:	785b      	ldrb	r3, [r3, #1]
 8000d06:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d0a:	185b      	adds	r3, r3, r1
 8000d0c:	19db      	adds	r3, r3, r7
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d16:	185b      	adds	r3, r3, r1
 8000d18:	19db      	adds	r3, r3, r7
 8000d1a:	78db      	ldrb	r3, [r3, #3]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d22:	185b      	adds	r3, r3, r1
 8000d24:	19db      	adds	r3, r3, r7
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	061b      	lsls	r3, r3, #24
 8000d2a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8000d2c:	24f2      	movs	r4, #242	; 0xf2
 8000d2e:	0064      	lsls	r4, r4, #1
 8000d30:	193a      	adds	r2, r7, r4
 8000d32:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	490b      	ldr	r1, [pc, #44]	; (8000d68 <astronode_send_rtc_rr+0xc0>)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f004 ffa3 	bl	8005c88 <siprintf>
            send_debug_logs ( str ) ;
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 f9fd 	bl	8002144 <send_debug_logs>
            return rtc_time ;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	e004      	b.n	8000d5a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <astronode_send_rtc_rr+0xc4>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 f9f6 	bl	8002144 <send_debug_logs>
        }
    }
    return 0 ;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b07a      	add	sp, #488	; 0x1e8
 8000d60:	bdb0      	pop	{r4, r5, r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	fffffe6c 	.word	0xfffffe6c
 8000d68:	08006e5c 	.word	0x08006e5c
 8000d6c:	08006e9c 	.word	0x08006e9c

08000d70 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b0f8      	sub	sp, #480	; 0x1e0
 8000d74:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000d76:	258c      	movs	r5, #140	; 0x8c
 8000d78:	006d      	lsls	r5, r5, #1
 8000d7a:	197b      	adds	r3, r7, r5
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	23c6      	movs	r3, #198	; 0xc6
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f004 ffa0 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000d8a:	24f0      	movs	r4, #240	; 0xf0
 8000d8c:	0064      	lsls	r4, r4, #1
 8000d8e:	191b      	adds	r3, r3, r4
 8000d90:	19db      	adds	r3, r3, r7
 8000d92:	0018      	movs	r0, r3
 8000d94:	23c6      	movs	r3, #198	; 0xc6
 8000d96:	001a      	movs	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f004 ff95 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8000d9e:	197b      	adds	r3, r7, r5
 8000da0:	2245      	movs	r2, #69	; 0x45
 8000da2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000da4:	2350      	movs	r3, #80	; 0x50
 8000da6:	18fa      	adds	r2, r7, r3
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fbdf 	bl	8001570 <astronode_transport_send_receive>
 8000db2:	0003      	movs	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d126      	bne.n	8000e06 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dba:	191b      	adds	r3, r3, r4
 8000dbc:	19db      	adds	r3, r3, r7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2bc5      	cmp	r3, #197	; 0xc5
 8000dc2:	d11c      	bne.n	8000dfe <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dc6:	191b      	adds	r3, r3, r4
 8000dc8:	19db      	adds	r3, r3, r7
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dd0:	191b      	adds	r3, r3, r4
 8000dd2:	19db      	adds	r3, r3, r7
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	20ef      	movs	r0, #239	; 0xef
 8000dde:	0040      	lsls	r0, r0, #1
 8000de0:	183b      	adds	r3, r7, r0
 8000de2:	188a      	adds	r2, r1, r2
 8000de4:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	490a      	ldr	r1, [pc, #40]	; (8000e14 <astronode_send_sak_rr+0xa4>)
 8000dec:	003b      	movs	r3, r7
 8000dee:	0018      	movs	r0, r3
 8000df0:	f004 ff4a 	bl	8005c88 <siprintf>
            send_debug_logs(str);
 8000df4:	003b      	movs	r3, r7
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 f9a4 	bl	8002144 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8000dfc:	e003      	b.n	8000e06 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <astronode_send_sak_rr+0xa8>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 f99f 	bl	8002144 <send_debug_logs>
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b078      	add	sp, #480	; 0x1e0
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	fffffe70 	.word	0xfffffe70
 8000e14:	08006eb8 	.word	0x08006eb8
 8000e18:	08006ee4 	.word	0x08006ee4

08000e1c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b0e4      	sub	sp, #400	; 0x190
 8000e20:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000e22:	24c8      	movs	r4, #200	; 0xc8
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	0018      	movs	r0, r3
 8000e28:	23c6      	movs	r3, #198	; 0xc6
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f004 ff4b 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <astronode_send_sak_cr+0x70>)
 8000e34:	25c8      	movs	r5, #200	; 0xc8
 8000e36:	006d      	lsls	r5, r5, #1
 8000e38:	195b      	adds	r3, r3, r5
 8000e3a:	19db      	adds	r3, r3, r7
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	23c6      	movs	r3, #198	; 0xc6
 8000e40:	001a      	movs	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f004 ff40 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	2246      	movs	r2, #70	; 0x46
 8000e4c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000e4e:	003a      	movs	r2, r7
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 fb8b 	bl	8001570 <astronode_transport_send_receive>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d111      	bne.n	8000e84 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <astronode_send_sak_cr+0x70>)
 8000e62:	195b      	adds	r3, r3, r5
 8000e64:	19db      	adds	r3, r3, r7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2bc6      	cmp	r3, #198	; 0xc6
 8000e6a:	d107      	bne.n	8000e7c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <astronode_send_sak_cr+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <astronode_send_sak_cr+0x78>)
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 f965 	bl	8002144 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8000e7a:	e003      	b.n	8000e84 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <astronode_send_sak_cr+0x7c>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 f960 	bl	8002144 <send_debug_logs>
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b064      	add	sp, #400	; 0x190
 8000e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8c:	fffffe70 	.word	0xfffffe70
 8000e90:	20000078 	.word	0x20000078
 8000e94:	08006f18 	.word	0x08006f18
 8000e98:	08006f40 	.word	0x08006f40

08000e9c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	b0ed      	sub	sp, #436	; 0x1b4
 8000ea0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ea2:	21c8      	movs	r1, #200	; 0xc8
 8000ea4:	2318      	movs	r3, #24
 8000ea6:	18cb      	adds	r3, r1, r3
 8000ea8:	19db      	adds	r3, r3, r7
 8000eaa:	0018      	movs	r0, r3
 8000eac:	23c6      	movs	r3, #198	; 0xc6
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f004 ff09 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8000eb6:	4b4a      	ldr	r3, [pc, #296]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000eb8:	26cc      	movs	r6, #204	; 0xcc
 8000eba:	0076      	lsls	r6, r6, #1
 8000ebc:	199b      	adds	r3, r3, r6
 8000ebe:	2218      	movs	r2, #24
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	44bc      	add	ip, r7
 8000ec4:	4463      	add	r3, ip
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	23c6      	movs	r3, #198	; 0xc6
 8000eca:	001a      	movs	r2, r3
 8000ecc:	2100      	movs	r1, #0
 8000ece:	f004 fefb 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8000ed2:	21c8      	movs	r1, #200	; 0xc8
 8000ed4:	2318      	movs	r3, #24
 8000ed6:	18cb      	adds	r3, r1, r3
 8000ed8:	19db      	adds	r3, r3, r7
 8000eda:	221b      	movs	r2, #27
 8000edc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000ede:	2318      	movs	r3, #24
 8000ee0:	18fa      	adds	r2, r7, r3
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	18cb      	adds	r3, r1, r3
 8000ee6:	19db      	adds	r3, r3, r7
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fb40 	bl	8001570 <astronode_transport_send_receive>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d16f      	bne.n	8000fd6 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000ef8:	0032      	movs	r2, r6
 8000efa:	189b      	adds	r3, r3, r2
 8000efc:	2118      	movs	r1, #24
 8000efe:	468c      	mov	ip, r1
 8000f00:	44bc      	add	ip, r7
 8000f02:	4463      	add	r3, ip
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b9b      	cmp	r3, #155	; 0x9b
 8000f08:	d161      	bne.n	8000fce <astronode_send_mpn_rr+0x132>
        {
 8000f0a:	466b      	mov	r3, sp
 8000f0c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000f10:	189b      	adds	r3, r3, r2
 8000f12:	2218      	movs	r2, #24
 8000f14:	4694      	mov	ip, r2
 8000f16:	44bc      	add	ip, r7
 8000f18:	4463      	add	r3, ip
 8000f1a:	22c4      	movs	r2, #196	; 0xc4
 8000f1c:	5a9b      	ldrh	r3, [r3, r2]
 8000f1e:	001a      	movs	r2, r3
 8000f20:	3a01      	subs	r2, #1
 8000f22:	21ca      	movs	r1, #202	; 0xca
 8000f24:	0049      	lsls	r1, r1, #1
 8000f26:	2018      	movs	r0, #24
 8000f28:	1809      	adds	r1, r1, r0
 8000f2a:	19c9      	adds	r1, r1, r7
 8000f2c:	600a      	str	r2, [r1, #0]
 8000f2e:	001c      	movs	r4, r3
 8000f30:	2200      	movs	r2, #0
 8000f32:	0015      	movs	r5, r2
 8000f34:	0020      	movs	r0, r4
 8000f36:	0029      	movs	r1, r5
 8000f38:	0004      	movs	r4, r0
 8000f3a:	0f62      	lsrs	r2, r4, #29
 8000f3c:	000c      	movs	r4, r1
 8000f3e:	00e4      	lsls	r4, r4, #3
 8000f40:	617c      	str	r4, [r7, #20]
 8000f42:	697c      	ldr	r4, [r7, #20]
 8000f44:	4314      	orrs	r4, r2
 8000f46:	617c      	str	r4, [r7, #20]
 8000f48:	0001      	movs	r1, r0
 8000f4a:	00c9      	lsls	r1, r1, #3
 8000f4c:	6139      	str	r1, [r7, #16]
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	0004      	movs	r4, r0
 8000f5a:	0f62      	lsrs	r2, r4, #29
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	00e4      	lsls	r4, r4, #3
 8000f60:	60fc      	str	r4, [r7, #12]
 8000f62:	68fc      	ldr	r4, [r7, #12]
 8000f64:	4314      	orrs	r4, r2
 8000f66:	60fc      	str	r4, [r7, #12]
 8000f68:	0001      	movs	r1, r0
 8000f6a:	00ca      	lsls	r2, r1, #3
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	3307      	adds	r3, #7
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4669      	mov	r1, sp
 8000f76:	1acb      	subs	r3, r1, r3
 8000f78:	469d      	mov	sp, r3
 8000f7a:	466b      	mov	r3, sp
 8000f7c:	3300      	adds	r3, #0
 8000f7e:	24c8      	movs	r4, #200	; 0xc8
 8000f80:	0064      	lsls	r4, r4, #1
 8000f82:	2218      	movs	r2, #24
 8000f84:	18a2      	adds	r2, r4, r2
 8000f86:	19d1      	adds	r1, r2, r7
 8000f88:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <astronode_send_mpn_rr+0x148>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 f8d9 	bl	8002144 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000f94:	22cc      	movs	r2, #204	; 0xcc
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	189b      	adds	r3, r3, r2
 8000f9a:	2218      	movs	r2, #24
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	44bc      	add	ip, r7
 8000fa0:	4463      	add	r3, ip
 8000fa2:	22c4      	movs	r2, #196	; 0xc4
 8000fa4:	5a9b      	ldrh	r3, [r3, r2]
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	2318      	movs	r3, #24
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <astronode_send_mpn_rr+0x14c>)
 8000fb0:	2018      	movs	r0, #24
 8000fb2:	1820      	adds	r0, r4, r0
 8000fb4:	19c0      	adds	r0, r0, r7
 8000fb6:	6800      	ldr	r0, [r0, #0]
 8000fb8:	f004 fe32 	bl	8005c20 <sniprintf>
            send_debug_logs(product_number);
 8000fbc:	2318      	movs	r3, #24
 8000fbe:	18e3      	adds	r3, r4, r3
 8000fc0:	19db      	adds	r3, r3, r7
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 f8bd 	bl	8002144 <send_debug_logs>
 8000fca:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8000fcc:	e003      	b.n	8000fd6 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <astronode_send_mpn_rr+0x150>)
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 f8b7 	bl	8002144 <send_debug_logs>
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b06d      	add	sp, #436	; 0x1b4
 8000fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	fffffe68 	.word	0xfffffe68
 8000fe4:	08007008 	.word	0x08007008
 8000fe8:	08006b2c 	.word	0x08006b2c
 8000fec:	08006b68 	.word	0x08006b68

08000ff0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b0e4      	sub	sp, #400	; 0x190
 8000ff4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ff6:	24c8      	movs	r4, #200	; 0xc8
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	23c6      	movs	r3, #198	; 0xc6
 8000ffe:	001a      	movs	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	f004 fe61 	bl	8005cc8 <memset>
    astronode_app_msg_t answer = {0};
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <astronode_send_cmd_cr+0x70>)
 8001008:	25c8      	movs	r5, #200	; 0xc8
 800100a:	006d      	lsls	r5, r5, #1
 800100c:	195b      	adds	r3, r3, r5
 800100e:	19db      	adds	r3, r3, r7
 8001010:	0018      	movs	r0, r3
 8001012:	23c6      	movs	r3, #198	; 0xc6
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f004 fe56 	bl	8005cc8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2248      	movs	r2, #72	; 0x48
 8001020:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001022:	003a      	movs	r2, r7
 8001024:	193b      	adds	r3, r7, r4
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f000 faa1 	bl	8001570 <astronode_transport_send_receive>
 800102e:	0003      	movs	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d111      	bne.n	8001058 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <astronode_send_cmd_cr+0x70>)
 8001036:	195b      	adds	r3, r3, r5
 8001038:	19db      	adds	r3, r3, r7
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2bc8      	cmp	r3, #200	; 0xc8
 800103e:	d107      	bne.n	8001050 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <astronode_send_cmd_cr+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <astronode_send_cmd_cr+0x78>)
 8001048:	0018      	movs	r0, r3
 800104a:	f001 f87b 	bl	8002144 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800104e:	e003      	b.n	8001058 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <astronode_send_cmd_cr+0x7c>)
 8001052:	0018      	movs	r0, r3
 8001054:	f001 f876 	bl	8002144 <send_debug_logs>
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b064      	add	sp, #400	; 0x190
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	fffffe70 	.word	0xfffffe70
 8001064:	2000007a 	.word	0x2000007a
 8001068:	08007458 	.word	0x08007458
 800106c:	0800747c 	.word	0x0800747c

08001070 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <is_sak_available+0x10>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	20000078 	.word	0x20000078

08001084 <is_astronode_reset>:

bool is_astronode_reset()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <is_astronode_reset+0x10>)
 800108a:	781b      	ldrb	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000079 	.word	0x20000079

08001098 <is_command_available>:

bool is_command_available()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    return g_is_command_available;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <is_command_available+0x10>)
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	2000007a 	.word	0x2000007a

080010ac <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b2f      	cmp	r3, #47	; 0x2f
 80010c0:	d90b      	bls.n	80010da <ascii_to_value+0x2e>
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b39      	cmp	r3, #57	; 0x39
 80010c8:	d807      	bhi.n	80010da <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b30      	subs	r3, #48	; 0x30
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
        return true;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e010      	b.n	80010fc <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b40      	cmp	r3, #64	; 0x40
 80010e0:	d90b      	bls.n	80010fa <ascii_to_value+0x4e>
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b46      	cmp	r3, #70	; 0x46
 80010e8:	d807      	bhi.n	80010fa <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	3b37      	subs	r3, #55	; 0x37
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	701a      	strb	r2, [r3, #0]
        return true;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <ascii_to_value+0x50>
    }
    else
    {
        return false;
 80010fa:	2300      	movs	r3, #0
    }
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800110e:	250e      	movs	r5, #14
 8001110:	197b      	adds	r3, r7, r5
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8001116:	197b      	adds	r3, r7, r5
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	197a      	adds	r2, r7, r5
 800111c:	1c59      	adds	r1, r3, #1
 800111e:	8011      	strh	r1, [r2, #0]
 8001120:	001a      	movs	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	189b      	adds	r3, r3, r2
 8001126:	2202      	movs	r2, #2
 8001128:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	260a      	movs	r6, #10
 800112e:	19bc      	adds	r4, r7, r6
 8001130:	4a44      	ldr	r2, [pc, #272]	; (8001244 <astronode_create_request_transport+0x140>)
 8001132:	2101      	movs	r1, #1
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fa7d 	bl	8001634 <calculate_crc>
 800113a:	0003      	movs	r3, r0
 800113c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	1c58      	adds	r0, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	22c4      	movs	r2, #196	; 0xc4
 8001146:	5a99      	ldrh	r1, [r3, r2]
 8001148:	19bc      	adds	r4, r7, r6
 800114a:	19bb      	adds	r3, r7, r6
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	001a      	movs	r2, r3
 8001150:	f000 fa70 	bl	8001634 <calculate_crc>
 8001154:	0003      	movs	r3, r0
 8001156:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8001158:	19bb      	adds	r3, r7, r6
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	0031      	movs	r1, r6
 8001162:	19bb      	adds	r3, r7, r6
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21a      	sxth	r2, r3
 8001170:	187b      	adds	r3, r7, r1
 8001172:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7818      	ldrb	r0, [r3, #0]
 8001178:	197b      	adds	r3, r7, r5
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	0019      	movs	r1, r3
 8001182:	f000 fbeb 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 8001186:	197b      	adds	r3, r7, r5
 8001188:	197a      	adds	r2, r7, r5
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	3202      	adds	r2, #2
 800118e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001190:	230c      	movs	r3, #12
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
 8001198:	e017      	b.n	80011ca <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 800119a:	240c      	movs	r4, #12
 800119c:	193b      	adds	r3, r7, r4
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	18d3      	adds	r3, r2, r3
 80011a4:	7858      	ldrb	r0, [r3, #1]
 80011a6:	250e      	movs	r5, #14
 80011a8:	197b      	adds	r3, r7, r5
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	0019      	movs	r1, r3
 80011b2:	f000 fbd3 	bl	800195c <uint8_to_ascii_buffer>
        index += 2;
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	197a      	adds	r2, r7, r5
 80011ba:	8812      	ldrh	r2, [r2, #0]
 80011bc:	3202      	adds	r2, #2
 80011be:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	3201      	adds	r2, #1
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	22c4      	movs	r2, #196	; 0xc4
 80011ce:	5a9b      	ldrh	r3, [r3, r2]
 80011d0:	220c      	movs	r2, #12
 80011d2:	18ba      	adds	r2, r7, r2
 80011d4:	8812      	ldrh	r2, [r2, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3df      	bcc.n	800119a <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80011da:	250a      	movs	r5, #10
 80011dc:	197b      	adds	r3, r7, r5
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	240e      	movs	r4, #14
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	18d3      	adds	r3, r2, r3
 80011f0:	0019      	movs	r1, r3
 80011f2:	f000 fbb3 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 80011f6:	0021      	movs	r1, r4
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	187a      	adds	r2, r7, r1
 80011fc:	8812      	ldrh	r2, [r2, #0]
 80011fe:	3202      	adds	r2, #2
 8001200:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8001202:	197b      	adds	r3, r7, r5
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b2d8      	uxtb	r0, r3
 8001208:	000c      	movs	r4, r1
 800120a:	187b      	adds	r3, r7, r1
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	18d3      	adds	r3, r2, r3
 8001212:	0019      	movs	r1, r3
 8001214:	f000 fba2 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 8001218:	0020      	movs	r0, r4
 800121a:	183b      	adds	r3, r7, r0
 800121c:	183a      	adds	r2, r7, r0
 800121e:	8812      	ldrh	r2, [r2, #0]
 8001220:	3202      	adds	r2, #2
 8001222:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8001224:	183b      	adds	r3, r7, r0
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	183a      	adds	r2, r7, r0
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	8011      	strh	r1, [r2, #0]
 800122e:	001a      	movs	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	189b      	adds	r3, r3, r2
 8001234:	2203      	movs	r2, #3
 8001236:	701a      	strb	r2, [r3, #0]

    return index;
 8001238:	183b      	adds	r3, r7, r0
 800123a:	881b      	ldrh	r3, [r3, #0]
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b005      	add	sp, #20
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	0000ffff 	.word	0x0000ffff

08001248 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	230a      	movs	r3, #10
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	1c0a      	adds	r2, r1, #0
 8001258:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d005      	beq.n	800126e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8001262:	4bbd      	ldr	r3, [pc, #756]	; (8001558 <astronode_decode_answer_transport+0x310>)
 8001264:	0018      	movs	r0, r3
 8001266:	f000 ff6d 	bl	8002144 <send_debug_logs>
        return RS_FAILURE;
 800126a:	2300      	movs	r3, #0
 800126c:	e170      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800126e:	210a      	movs	r1, #10
 8001270:	187b      	adds	r3, r7, r1
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	2201      	movs	r2, #1
 8001276:	4013      	ands	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <astronode_decode_answer_transport+0x3e>
 800127e:	187b      	adds	r3, r7, r1
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d805      	bhi.n	8001292 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8001286:	4bb5      	ldr	r3, [pc, #724]	; (800155c <astronode_decode_answer_transport+0x314>)
 8001288:	0018      	movs	r0, r3
 800128a:	f000 ff5b 	bl	8002144 <send_debug_logs>
        return RS_FAILURE;
 800128e:	2300      	movs	r3, #0
 8001290:	e15e      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8001292:	230a      	movs	r3, #10
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	3b08      	subs	r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	da00      	bge.n	80012a0 <astronode_decode_answer_transport+0x58>
 800129e:	3301      	adds	r3, #1
 80012a0:	105b      	asrs	r3, r3, #1
 80012a2:	b299      	uxth	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	22c4      	movs	r2, #196	; 0xc4
 80012a8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80012aa:	230a      	movs	r3, #10
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d005      	beq.n	80012c8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80012bc:	4ba8      	ldr	r3, [pc, #672]	; (8001560 <astronode_decode_answer_transport+0x318>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 ff40 	bl	8002144 <send_debug_logs>
        return RS_FAILURE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e143      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80012c8:	2117      	movs	r1, #23
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80012d0:	2416      	movs	r4, #22
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	187a      	adds	r2, r7, r1
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff fee2 	bl	80010ac <ascii_to_value>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	2301      	movs	r3, #1
 80012ee:	4053      	eors	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10e      	bne.n	8001314 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3302      	adds	r3, #2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	193a      	adds	r2, r7, r4
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff fed3 	bl	80010ac <ascii_to_value>
 8001306:	0003      	movs	r3, r0
 8001308:	001a      	movs	r2, r3
 800130a:	2301      	movs	r3, #1
 800130c:	4053      	eors	r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001314:	4b93      	ldr	r3, [pc, #588]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001316:	0018      	movs	r0, r3
 8001318:	f000 ff14 	bl	8002144 <send_debug_logs>
        return RS_FAILURE;
 800131c:	2300      	movs	r3, #0
 800131e:	e117      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8001320:	2317      	movs	r3, #23
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	b2da      	uxtb	r2, r3
 800132a:	2316      	movs	r3, #22
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001338:	231e      	movs	r3, #30
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2203      	movs	r2, #3
 800133e:	801a      	strh	r2, [r3, #0]
 8001340:	231c      	movs	r3, #28
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2200      	movs	r2, #0
 8001346:	801a      	strh	r2, [r3, #0]
 8001348:	e045      	b.n	80013d6 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800134a:	241e      	movs	r4, #30
 800134c:	193b      	adds	r3, r7, r4
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	18d3      	adds	r3, r2, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2217      	movs	r2, #23
 8001358:	18ba      	adds	r2, r7, r2
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fea5 	bl	80010ac <ascii_to_value>
 8001362:	0003      	movs	r3, r0
 8001364:	001a      	movs	r2, r3
 8001366:	2301      	movs	r3, #1
 8001368:	4053      	eors	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d112      	bne.n	8001396 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8001370:	193b      	adds	r3, r7, r4
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2216      	movs	r2, #22
 800137e:	18ba      	adds	r2, r7, r2
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fe92 	bl	80010ac <ascii_to_value>
 8001388:	0003      	movs	r3, r0
 800138a:	001a      	movs	r2, r3
 800138c:	2301      	movs	r3, #1
 800138e:	4053      	eors	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001398:	0018      	movs	r0, r3
 800139a:	f000 fed3 	bl	8002144 <send_debug_logs>
            return RS_FAILURE;
 800139e:	2300      	movs	r3, #0
 80013a0:	e0d6      	b.n	8001550 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80013a2:	2317      	movs	r3, #23
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b2d9      	uxtb	r1, r3
 80013ac:	2316      	movs	r3, #22
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	201c      	movs	r0, #28
 80013b4:	183b      	adds	r3, r7, r0
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	1838      	adds	r0, r7, r0
 80013ba:	1c5c      	adds	r4, r3, #1
 80013bc:	8004      	strh	r4, [r0, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	188b      	adds	r3, r1, r2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	181b      	adds	r3, r3, r0
 80013c8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80013ca:	221e      	movs	r2, #30
 80013cc:	18bb      	adds	r3, r7, r2
 80013ce:	18ba      	adds	r2, r7, r2
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	3202      	adds	r2, #2
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	231e      	movs	r3, #30
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	260a      	movs	r6, #10
 80013de:	19bb      	adds	r3, r7, r6
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	3b05      	subs	r3, #5
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbb0      	blt.n	800134a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	251a      	movs	r5, #26
 80013ec:	197c      	adds	r4, r7, r5
 80013ee:	4a5e      	ldr	r2, [pc, #376]	; (8001568 <astronode_decode_answer_transport+0x320>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 f91e 	bl	8001634 <calculate_crc>
 80013f8:	0003      	movs	r3, r0
 80013fa:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1c58      	adds	r0, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	22c4      	movs	r2, #196	; 0xc4
 8001404:	5a99      	ldrh	r1, [r3, r2]
 8001406:	197c      	adds	r4, r7, r5
 8001408:	197b      	adds	r3, r7, r5
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	001a      	movs	r2, r3
 800140e:	f000 f911 	bl	8001634 <calculate_crc>
 8001412:	0003      	movs	r3, r0
 8001414:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8001416:	197b      	adds	r3, r7, r5
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	0029      	movs	r1, r5
 8001420:	197b      	adds	r3, r7, r5
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	187b      	adds	r3, r7, r1
 8001430:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8001432:	19bb      	adds	r3, r7, r6
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	3b05      	subs	r3, #5
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2217      	movs	r2, #23
 8001440:	18ba      	adds	r2, r7, r2
 8001442:	0011      	movs	r1, r2
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff fe31 	bl	80010ac <ascii_to_value>
 800144a:	0003      	movs	r3, r0
 800144c:	001a      	movs	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	4053      	eors	r3, r2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d112      	bne.n	800147e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8001458:	19bb      	adds	r3, r7, r6
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	3b04      	subs	r3, #4
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	18d3      	adds	r3, r2, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2216      	movs	r2, #22
 8001466:	18ba      	adds	r2, r7, r2
 8001468:	0011      	movs	r1, r2
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff fe1e 	bl	80010ac <ascii_to_value>
 8001470:	0003      	movs	r3, r0
 8001472:	001a      	movs	r2, r3
 8001474:	2301      	movs	r3, #1
 8001476:	4053      	eors	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001480:	0018      	movs	r0, r3
 8001482:	f000 fe5f 	bl	8002144 <send_debug_logs>
        return RS_FAILURE;
 8001486:	2300      	movs	r3, #0
 8001488:	e062      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800148a:	2017      	movs	r0, #23
 800148c:	183b      	adds	r3, r7, r0
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	b299      	uxth	r1, r3
 8001496:	2416      	movs	r4, #22
 8001498:	193b      	adds	r3, r7, r4
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	2318      	movs	r3, #24
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	188a      	adds	r2, r1, r2
 80014a8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80014aa:	250a      	movs	r5, #10
 80014ac:	197b      	adds	r3, r7, r5
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	183a      	adds	r2, r7, r0
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fdf5 	bl	80010ac <ascii_to_value>
 80014c2:	0003      	movs	r3, r0
 80014c4:	001a      	movs	r2, r3
 80014c6:	2301      	movs	r3, #1
 80014c8:	4053      	eors	r3, r2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d111      	bne.n	80014f4 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80014d0:	197b      	adds	r3, r7, r5
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	3b02      	subs	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	193a      	adds	r2, r7, r4
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fde3 	bl	80010ac <ascii_to_value>
 80014e6:	0003      	movs	r3, r0
 80014e8:	001a      	movs	r2, r3
 80014ea:	2301      	movs	r3, #1
 80014ec:	4053      	eors	r3, r2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 fe24 	bl	8002144 <send_debug_logs>
        return RS_FAILURE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e027      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	b29a      	uxth	r2, r3
 800150c:	2316      	movs	r3, #22
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	18d3      	adds	r3, r2, r3
 8001516:	b299      	uxth	r1, r3
 8001518:	2018      	movs	r0, #24
 800151a:	183b      	adds	r3, r7, r0
 800151c:	183a      	adds	r2, r7, r0
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	188a      	adds	r2, r1, r2
 8001522:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8001524:	183a      	adds	r2, r7, r0
 8001526:	231a      	movs	r3, #26
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d005      	beq.n	800153e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <astronode_decode_answer_transport+0x324>)
 8001534:	0018      	movs	r0, r3
 8001536:	f000 fe05 	bl	8002144 <send_debug_logs>
        return RS_FAILURE;
 800153a:	2300      	movs	r3, #0
 800153c:	e008      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d103      	bne.n	800154e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f8c3 	bl	80016d4 <check_for_error>
    }

    return RS_SUCCESS;
 800154e:	2301      	movs	r3, #1
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b009      	add	sp, #36	; 0x24
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001558:	080075ec 	.word	0x080075ec
 800155c:	0800763c 	.word	0x0800763c
 8001560:	0800768c 	.word	0x0800768c
 8001564:	080076dc 	.word	0x080076dc
 8001568:	0000ffff 	.word	0x0000ffff
 800156c:	08007728 	.word	0x08007728

08001570 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	4c2b      	ldr	r4, [pc, #172]	; (8001620 <astronode_transport_send_receive+0xb0>)
 8001574:	44a5      	add	sp, r4
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <astronode_transport_send_receive+0xb4>)
 800157e:	25ca      	movs	r5, #202	; 0xca
 8001580:	00ad      	lsls	r5, r5, #2
 8001582:	195b      	adds	r3, r3, r5
 8001584:	19db      	adds	r3, r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	22c4      	movs	r2, #196	; 0xc4
 800158e:	0052      	lsls	r2, r2, #1
 8001590:	2100      	movs	r1, #0
 8001592:	0018      	movs	r0, r3
 8001594:	f004 fb98 	bl	8005cc8 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <astronode_transport_send_receive+0xb8>)
 800159a:	195b      	adds	r3, r3, r5
 800159c:	19db      	adds	r3, r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	3304      	adds	r3, #4
 80015a4:	22c4      	movs	r2, #196	; 0xc4
 80015a6:	0052      	lsls	r2, r2, #1
 80015a8:	2100      	movs	r1, #0
 80015aa:	0018      	movs	r0, r3
 80015ac:	f004 fb8c 	bl	8005cc8 <memset>
    uint16_t answer_length =  0;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <astronode_transport_send_receive+0xbc>)
 80015b2:	195b      	adds	r3, r3, r5
 80015b4:	19db      	adds	r3, r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80015ba:	4e1d      	ldr	r6, [pc, #116]	; (8001630 <astronode_transport_send_receive+0xc0>)
 80015bc:	19bc      	adds	r4, r7, r6
 80015be:	23cc      	movs	r3, #204	; 0xcc
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	18fa      	adds	r2, r7, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff fd9b 	bl	8001104 <astronode_create_request_transport>
 80015ce:	0003      	movs	r3, r0
 80015d0:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80015d2:	19bb      	adds	r3, r7, r6
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	23cc      	movs	r3, #204	; 0xcc
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	0011      	movs	r1, r2
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 fdfa 	bl	80021d8 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80015e4:	230a      	movs	r3, #10
 80015e6:	18fa      	adds	r2, r7, r3
 80015e8:	240c      	movs	r4, #12
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	0011      	movs	r1, r2
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 f92c 	bl	800184c <receive_astronode_answer>
 80015f4:	0003      	movs	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10a      	bne.n	8001610 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <astronode_transport_send_receive+0xbc>)
 80015fc:	195b      	adds	r3, r3, r5
 80015fe:	19db      	adds	r3, r3, r7
 8001600:	8819      	ldrh	r1, [r3, #0]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	193b      	adds	r3, r7, r4
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fe1e 	bl	8001248 <astronode_decode_answer_transport>
 800160c:	0003      	movs	r3, r0
 800160e:	e000      	b.n	8001612 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8001610:	2300      	movs	r3, #0
    }
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	23cb      	movs	r3, #203	; 0xcb
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	449d      	add	sp, r3
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	fffffcd4 	.word	0xfffffcd4
 8001624:	fffffe70 	.word	0xfffffe70
 8001628:	fffffce4 	.word	0xfffffce4
 800162c:	fffffce2 	.word	0xfffffce2
 8001630:	00000326 	.word	0x00000326

08001634 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	0008      	movs	r0, r1
 800163e:	0011      	movs	r1, r2
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	1c02      	adds	r2, r0, #0
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	003b      	movs	r3, r7
 8001648:	1c0a      	adds	r2, r1, #0
 800164a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800164c:	230e      	movs	r3, #14
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	003a      	movs	r2, r7
 8001652:	8812      	ldrh	r2, [r2, #0]
 8001654:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8001656:	e02e      	b.n	80016b6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8001658:	240e      	movs	r4, #14
 800165a:	193b      	adds	r3, r7, r4
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b299      	uxth	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b29a      	uxth	r2, r3
 800166c:	200c      	movs	r0, #12
 800166e:	183b      	adds	r3, r7, r0
 8001670:	404a      	eors	r2, r1
 8001672:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8001674:	183b      	adds	r3, r7, r0
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	b299      	uxth	r1, r3
 800167c:	183b      	adds	r3, r7, r0
 800167e:	183a      	adds	r2, r7, r0
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	404a      	eors	r2, r1
 8001684:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8001686:	0021      	movs	r1, r4
 8001688:	187b      	adds	r3, r7, r1
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	183b      	adds	r3, r7, r0
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	031b      	lsls	r3, r3, #12
 8001696:	b21b      	sxth	r3, r3
 8001698:	4053      	eors	r3, r2
 800169a:	b21a      	sxth	r2, r3
 800169c:	183b      	adds	r3, r7, r0
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4053      	eors	r3, r2
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	2000      	movs	r0, #0
 80016ac:	5e1b      	ldrsh	r3, [r3, r0]
 80016ae:	4053      	eors	r3, r2
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	1cba      	adds	r2, r7, #2
 80016bc:	1e59      	subs	r1, r3, #1
 80016be:	8011      	strh	r1, [r2, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1c9      	bne.n	8001658 <calculate_crc+0x24>
    }
    return crc;
 80016c4:	230e      	movs	r3, #14
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	881b      	ldrh	r3, [r3, #0]
}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b005      	add	sp, #20
 80016d0:	bd90      	pop	{r4, r7, pc}
	...

080016d4 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	b299      	uxth	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	200e      	movs	r0, #14
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	188a      	adds	r2, r1, r2
 80016f2:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80016f4:	183b      	adds	r3, r7, r0
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	4a40      	ldr	r2, [pc, #256]	; (80017fc <check_for_error+0x128>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d100      	bne.n	8001700 <check_for_error+0x2c>
 80016fe:	e06f      	b.n	80017e0 <check_for_error+0x10c>
 8001700:	4a3e      	ldr	r2, [pc, #248]	; (80017fc <check_for_error+0x128>)
 8001702:	4293      	cmp	r3, r2
 8001704:	dd00      	ble.n	8001708 <check_for_error+0x34>
 8001706:	e070      	b.n	80017ea <check_for_error+0x116>
 8001708:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <check_for_error+0x12c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d100      	bne.n	8001710 <check_for_error+0x3c>
 800170e:	e062      	b.n	80017d6 <check_for_error+0x102>
 8001710:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <check_for_error+0x12c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	dd00      	ble.n	8001718 <check_for_error+0x44>
 8001716:	e068      	b.n	80017ea <check_for_error+0x116>
 8001718:	4a3a      	ldr	r2, [pc, #232]	; (8001804 <check_for_error+0x130>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d056      	beq.n	80017cc <check_for_error+0xf8>
 800171e:	4a39      	ldr	r2, [pc, #228]	; (8001804 <check_for_error+0x130>)
 8001720:	4293      	cmp	r3, r2
 8001722:	dd00      	ble.n	8001726 <check_for_error+0x52>
 8001724:	e061      	b.n	80017ea <check_for_error+0x116>
 8001726:	4a38      	ldr	r2, [pc, #224]	; (8001808 <check_for_error+0x134>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04a      	beq.n	80017c2 <check_for_error+0xee>
 800172c:	4a36      	ldr	r2, [pc, #216]	; (8001808 <check_for_error+0x134>)
 800172e:	4293      	cmp	r3, r2
 8001730:	dc5b      	bgt.n	80017ea <check_for_error+0x116>
 8001732:	4a36      	ldr	r2, [pc, #216]	; (800180c <check_for_error+0x138>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d03f      	beq.n	80017b8 <check_for_error+0xe4>
 8001738:	4a34      	ldr	r2, [pc, #208]	; (800180c <check_for_error+0x138>)
 800173a:	4293      	cmp	r3, r2
 800173c:	dc55      	bgt.n	80017ea <check_for_error+0x116>
 800173e:	4a34      	ldr	r2, [pc, #208]	; (8001810 <check_for_error+0x13c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d034      	beq.n	80017ae <check_for_error+0xda>
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <check_for_error+0x13c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	dc4f      	bgt.n	80017ea <check_for_error+0x116>
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <check_for_error+0x140>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d029      	beq.n	80017a4 <check_for_error+0xd0>
 8001750:	4a30      	ldr	r2, [pc, #192]	; (8001814 <check_for_error+0x140>)
 8001752:	4293      	cmp	r3, r2
 8001754:	dc49      	bgt.n	80017ea <check_for_error+0x116>
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <check_for_error+0x144>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d01e      	beq.n	800179a <check_for_error+0xc6>
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <check_for_error+0x144>)
 800175e:	4293      	cmp	r3, r2
 8001760:	dc43      	bgt.n	80017ea <check_for_error+0x116>
 8001762:	2222      	movs	r2, #34	; 0x22
 8001764:	32ff      	adds	r2, #255	; 0xff
 8001766:	4293      	cmp	r3, r2
 8001768:	d012      	beq.n	8001790 <check_for_error+0xbc>
 800176a:	2291      	movs	r2, #145	; 0x91
 800176c:	0052      	lsls	r2, r2, #1
 800176e:	4293      	cmp	r3, r2
 8001770:	da3b      	bge.n	80017ea <check_for_error+0x116>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d002      	beq.n	800177c <check_for_error+0xa8>
 8001776:	2b11      	cmp	r3, #17
 8001778:	d005      	beq.n	8001786 <check_for_error+0xb2>
 800177a:	e036      	b.n	80017ea <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <check_for_error+0x148>)
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fce0 	bl	8002144 <send_debug_logs>
            break;
 8001784:	e036      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <check_for_error+0x14c>)
 8001788:	0018      	movs	r0, r3
 800178a:	f000 fcdb 	bl	8002144 <send_debug_logs>
            break;
 800178e:	e031      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <check_for_error+0x150>)
 8001792:	0018      	movs	r0, r3
 8001794:	f000 fcd6 	bl	8002144 <send_debug_logs>
            break;
 8001798:	e02c      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <check_for_error+0x154>)
 800179c:	0018      	movs	r0, r3
 800179e:	f000 fcd1 	bl	8002144 <send_debug_logs>
            break;
 80017a2:	e027      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <check_for_error+0x158>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 fccc 	bl	8002144 <send_debug_logs>
            break;
 80017ac:	e022      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <check_for_error+0x15c>)
 80017b0:	0018      	movs	r0, r3
 80017b2:	f000 fcc7 	bl	8002144 <send_debug_logs>
            break;
 80017b6:	e01d      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <check_for_error+0x160>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 fcc2 	bl	8002144 <send_debug_logs>
            break;
 80017c0:	e018      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <check_for_error+0x164>)
 80017c4:	0018      	movs	r0, r3
 80017c6:	f000 fcbd 	bl	8002144 <send_debug_logs>
            break;
 80017ca:	e013      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <check_for_error+0x168>)
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 fcb8 	bl	8002144 <send_debug_logs>
            break;
 80017d4:	e00e      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <check_for_error+0x16c>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fcb3 	bl	8002144 <send_debug_logs>
            break;
 80017de:	e009      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <check_for_error+0x170>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fcae 	bl	8002144 <send_debug_logs>
            break;
 80017e8:	e004      	b.n	80017f4 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <check_for_error+0x174>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 fca9 	bl	8002144 <send_debug_logs>
            break;
 80017f2:	46c0      	nop			; (mov r8, r8)
    }
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b004      	add	sp, #16
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	00004601 	.word	0x00004601
 8001800:	00004501 	.word	0x00004501
 8001804:	00003501 	.word	0x00003501
 8001808:	00002601 	.word	0x00002601
 800180c:	00002511 	.word	0x00002511
 8001810:	00002501 	.word	0x00002501
 8001814:	00000611 	.word	0x00000611
 8001818:	00000601 	.word	0x00000601
 800181c:	0800776c 	.word	0x0800776c
 8001820:	080077b8 	.word	0x080077b8
 8001824:	0800781c 	.word	0x0800781c
 8001828:	08007854 	.word	0x08007854
 800182c:	080078f8 	.word	0x080078f8
 8001830:	08007960 	.word	0x08007960
 8001834:	080079c0 	.word	0x080079c0
 8001838:	08007a4c 	.word	0x08007a4c
 800183c:	08007aac 	.word	0x08007aac
 8001840:	08007b58 	.word	0x08007b58
 8001844:	08007ba4 	.word	0x08007ba4
 8001848:	08007bec 	.word	0x08007bec

0800184c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8001856:	230f      	movs	r3, #15
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800185e:	2316      	movs	r3, #22
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2200      	movs	r2, #0
 8001864:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8001866:	f000 fcd5 	bl	8002214 <get_systick>
 800186a:	0003      	movs	r3, r0
 800186c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800186e:	2315      	movs	r3, #21
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8001876:	e054      	b.n	8001922 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8001878:	4a34      	ldr	r2, [pc, #208]	; (800194c <receive_astronode_answer+0x100>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f000 fcd0 	bl	8002224 <is_systick_timeout_over>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d005      	beq.n	8001894 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <receive_astronode_answer+0x104>)
 800188a:	0018      	movs	r0, r3
 800188c:	f000 fc5a 	bl	8002144 <send_debug_logs>
            return RS_FAILURE;
 8001890:	2300      	movs	r3, #0
 8001892:	e057      	b.n	8001944 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8001894:	250f      	movs	r5, #15
 8001896:	197b      	adds	r3, r7, r5
 8001898:	0018      	movs	r0, r3
 800189a:	f000 fcd9 	bl	8002250 <is_astronode_character_received>
 800189e:	0003      	movs	r3, r0
 80018a0:	0019      	movs	r1, r3
 80018a2:	2016      	movs	r0, #22
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	183a      	adds	r2, r7, r0
 80018a8:	8812      	ldrh	r2, [r2, #0]
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	2415      	movs	r4, #21
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	193a      	adds	r2, r7, r4
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	2900      	cmp	r1, #0
 80018b8:	d033      	beq.n	8001922 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80018ba:	197b      	adds	r3, r7, r5
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d105      	bne.n	80018ce <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
                length = 0;
 80018c8:	183b      	adds	r3, r7, r0
 80018ca:	2200      	movs	r2, #0
 80018cc:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80018ce:	2116      	movs	r1, #22
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	18d3      	adds	r3, r2, r3
 80018d8:	220f      	movs	r2, #15
 80018da:	18ba      	adds	r2, r7, r2
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	701a      	strb	r2, [r3, #0]
            length++;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	3201      	adds	r2, #1
 80018e8:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2bb2      	cmp	r3, #178	; 0xb2
 80018f0:	d905      	bls.n	80018fe <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <receive_astronode_answer+0x108>)
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 fc25 	bl	8002144 <send_debug_logs>
                return RS_FAILURE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e022      	b.n	8001944 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80018fe:	230f      	movs	r3, #15
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d10c      	bne.n	8001922 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8001908:	2216      	movs	r2, #22
 800190a:	18bb      	adds	r3, r7, r2
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d907      	bls.n	8001922 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	18ba      	adds	r2, r7, r2
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800191a:	2315      	movs	r3, #21
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8001922:	2315      	movs	r3, #21
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4053      	eors	r3, r2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1a2      	bne.n	8001878 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <receive_astronode_answer+0x10c>)
 8001934:	0018      	movs	r0, r3
 8001936:	f000 fc05 	bl	8002144 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0018      	movs	r0, r3
 800193e:	f000 fc01 	bl	8002144 <send_debug_logs>

    return RS_SUCCESS;
 8001942:	2301      	movs	r3, #1
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	000005dc 	.word	0x000005dc
 8001950:	08007c10 	.word	0x08007c10
 8001954:	08007c34 	.word	0x08007c34
 8001958:	08007c80 	.word	0x08007c80

0800195c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	0002      	movs	r2, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	b2db      	uxtb	r3, r3
 8001972:	001a      	movs	r2, r3
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <uint8_to_ascii_buffer+0x3c>)
 8001976:	5c9a      	ldrb	r2, [r3, r2]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800197c:	1dfb      	adds	r3, r7, #7
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	220f      	movs	r2, #15
 8001982:	401a      	ands	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <uint8_to_ascii_buffer+0x3c>)
 800198a:	5c8a      	ldrb	r2, [r1, r2]
 800198c:	701a      	strb	r2, [r3, #0]
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	08007e54 	.word	0x08007e54

0800199c <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	0008      	movs	r0, r1
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	0019      	movs	r1, r3
 80019aa:	230b      	movs	r3, #11
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	1c02      	adds	r2, r0, #0
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	2308      	movs	r3, #8
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	1c0a      	adds	r2, r1, #0
 80019b8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <iis2dh_read_reg+0x2a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	425b      	negs	r3, r3
 80019c4:	e00f      	b.n	80019e6 <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685c      	ldr	r4, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	68d8      	ldr	r0, [r3, #12]
 80019ce:	2308      	movs	r3, #8
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	881d      	ldrh	r5, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	230b      	movs	r3, #11
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	7819      	ldrb	r1, [r3, #0]
 80019dc:	002b      	movs	r3, r5
 80019de:	47a0      	blx	r4
 80019e0:	0003      	movs	r3, r0
 80019e2:	617b      	str	r3, [r7, #20]

  return ret;
 80019e4:	697b      	ldr	r3, [r7, #20]
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b006      	add	sp, #24
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}

080019ee <iis2dh_write_reg>:
  *
  */
int32_t __weak iis2dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80019ee:	b5b0      	push	{r4, r5, r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	0008      	movs	r0, r1
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	0019      	movs	r1, r3
 80019fc:	230b      	movs	r3, #11
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	1c02      	adds	r2, r0, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	2308      	movs	r3, #8
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	1c0a      	adds	r2, r1, #0
 8001a0a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <iis2dh_write_reg+0x2a>
 8001a12:	2301      	movs	r3, #1
 8001a14:	425b      	negs	r3, r3
 8001a16:	e00f      	b.n	8001a38 <iis2dh_write_reg+0x4a>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68d8      	ldr	r0, [r3, #12]
 8001a20:	2308      	movs	r3, #8
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	881d      	ldrh	r5, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	230b      	movs	r3, #11
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	7819      	ldrb	r1, [r3, #0]
 8001a2e:	002b      	movs	r3, r5
 8001a30:	47a0      	blx	r4
 8001a32:	0003      	movs	r3, r0
 8001a34:	617b      	str	r3, [r7, #20]

  return ret;
 8001a36:	697b      	ldr	r3, [r7, #20]
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}

08001a40 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	000a      	movs	r2, r1
 8001a4a:	1cfb      	adds	r3, r7, #3
 8001a4c:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001a4e:	2310      	movs	r3, #16
 8001a50:	18fa      	adds	r2, r7, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	2301      	movs	r3, #1
 8001a56:	2120      	movs	r1, #32
 8001a58:	f7ff ffa0 	bl	800199c <iis2dh_read_reg>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <iis2dh_operating_mode_set+0x38>
  {
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001a66:	230c      	movs	r3, #12
 8001a68:	18fa      	adds	r2, r7, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	2123      	movs	r1, #35	; 0x23
 8001a70:	f7ff ff94 	bl	800199c <iis2dh_read_reg>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d138      	bne.n	8001af0 <iis2dh_operating_mode_set+0xb0>
  {
    if (val == IIS2DH_HR_12bit)
 8001a7e:	1cfb      	adds	r3, r7, #3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10b      	bne.n	8001a9e <iis2dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8001a86:	2310      	movs	r3, #16
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	438a      	bics	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8001a92:	230c      	movs	r3, #12
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	2108      	movs	r1, #8
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_NM_10bit)
 8001a9e:	1cfb      	adds	r3, r7, #3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10b      	bne.n	8001abe <iis2dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	2108      	movs	r1, #8
 8001aae:	438a      	bics	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	2108      	movs	r1, #8
 8001aba:	438a      	bics	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_LP_8bit)
 8001abe:	1cfb      	adds	r3, r7, #3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d10b      	bne.n	8001ade <iis2dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	2108      	movs	r1, #8
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	2108      	movs	r1, #8
 8001ada:	438a      	bics	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001ade:	2310      	movs	r3, #16
 8001ae0:	18fa      	adds	r2, r7, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	f7ff ff81 	bl	80019ee <iis2dh_write_reg>
 8001aec:	0003      	movs	r3, r0
 8001aee:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <iis2dh_operating_mode_set+0xc8>
  {
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001af6:	230c      	movs	r3, #12
 8001af8:	18fa      	adds	r2, r7, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	2301      	movs	r3, #1
 8001afe:	2123      	movs	r1, #35	; 0x23
 8001b00:	f7ff ff75 	bl	80019ee <iis2dh_write_reg>
 8001b04:	0003      	movs	r3, r0
 8001b06:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001b08:	697b      	ldr	r3, [r7, #20]
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b006      	add	sp, #24
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(const stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 8001b12:	b590      	push	{r4, r7, lr}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	1cfb      	adds	r3, r7, #3
 8001b1e:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b20:	2408      	movs	r4, #8
 8001b22:	193a      	adds	r2, r7, r4
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2120      	movs	r1, #32
 8001b2a:	f7ff ff37 	bl	800199c <iis2dh_read_reg>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d115      	bne.n	8001b64 <iis2dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8001b38:	1cfb      	adds	r3, r7, #3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	4013      	ands	r3, r2
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	0110      	lsls	r0, r2, #4
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	210f      	movs	r1, #15
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	1c11      	adds	r1, r2, #0
 8001b4e:	1c02      	adds	r2, r0, #0
 8001b50:	430a      	orrs	r2, r1
 8001b52:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b54:	193a      	adds	r2, r7, r4
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	f7ff ff47 	bl	80019ee <iis2dh_write_reg>
 8001b60:	0003      	movs	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b64:	68fb      	ldr	r3, [r7, #12]
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b005      	add	sp, #20
 8001b6c:	bd90      	pop	{r4, r7, pc}

08001b6e <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(const stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 8001b6e:	b590      	push	{r4, r7, lr}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	000a      	movs	r2, r1
 8001b78:	1cfb      	adds	r3, r7, #3
 8001b7a:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001b7c:	2408      	movs	r4, #8
 8001b7e:	193a      	adds	r2, r7, r4
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	2301      	movs	r3, #1
 8001b84:	2123      	movs	r1, #35	; 0x23
 8001b86:	f7ff ff09 	bl	800199c <iis2dh_read_reg>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d117      	bne.n	8001bc4 <iis2dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001b94:	1cfb      	adds	r3, r7, #3
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	0110      	lsls	r0, r2, #4
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	2130      	movs	r1, #48	; 0x30
 8001baa:	438a      	bics	r2, r1
 8001bac:	1c11      	adds	r1, r2, #0
 8001bae:	1c02      	adds	r2, r0, #0
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001bb4:	193a      	adds	r2, r7, r4
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2123      	movs	r1, #35	; 0x23
 8001bbc:	f7ff ff17 	bl	80019ee <iis2dh_write_reg>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b005      	add	sp, #20
 8001bcc:	bd90      	pop	{r4, r7, pc}

08001bce <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	210f      	movs	r1, #15
 8001be0:	f7ff fedc 	bl	800199c <iis2dh_read_reg>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]

  return ret;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf8:	f000 fd7c 	bl	80026f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bfc:	f000 f81e 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c00:	f000 f93e 	bl	8001e80 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c04:	f000 f862 	bl	8001ccc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c08:	f000 f89e 	bl	8001d48 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c0c:	f000 f8ea 	bl	8001de4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( "Hello ULP Test" ) ;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <main+0x44>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fa96 	bl	8002144 <send_debug_logs>
  sys_init () ;
 8001c18:	f000 fb8e 	bl	8002338 <sys_init>
  HAL_Delay ( 4000 ) ;
 8001c1c:	23fa      	movs	r3, #250	; 0xfa
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 fded 	bl	8002800 <HAL_Delay>
  //HAL_UART_DeInit ( &huart2 ) ;
  //HAL_UART_DeInit ( &huart3 ) ;
  //HAL_Delay ( 1000 ) ;
  //HAL_PWREx_EnterSHUTDOWNMode () ;

  HAL_SuspendTick () ;
 8001c26:	f000 fe0f 	bl	8002848 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	01db      	lsls	r3, r3, #7
 8001c2e:	2102      	movs	r1, #2
 8001c30:	0018      	movs	r0, r3
 8001c32:	f001 f887 	bl	8002d44 <HAL_PWR_EnterSTOPMode>
  //HAL_ResumeTick () ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <main+0x42>
 8001c38:	08007cac 	.word	0x08007cac

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b095      	sub	sp, #84	; 0x54
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	2414      	movs	r4, #20
 8001c44:	193b      	adds	r3, r7, r4
 8001c46:	0018      	movs	r0, r3
 8001c48:	233c      	movs	r3, #60	; 0x3c
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f004 f83b 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	0018      	movs	r0, r3
 8001c56:	2310      	movs	r3, #16
 8001c58:	001a      	movs	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f004 f834 	bl	8005cc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	0018      	movs	r0, r3
 8001c66:	f001 f8a5 	bl	8002db4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c84:	193b      	adds	r3, r7, r4
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f001 f8dd 	bl	8002e4c <HAL_RCC_OscConfig>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001c96:	f000 fb5a 	bl	800234e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f001 fc28 	bl	800350c <HAL_RCC_ClockConfig>
 8001cbc:	1e03      	subs	r3, r0, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001cc0:	f000 fb45 	bl	800234e <Error_Handler>
  }
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b015      	add	sp, #84	; 0x54
 8001cca:	bd90      	pop	{r4, r7, pc}

08001ccc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <MX_SPI1_Init+0x78>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001cd8:	2282      	movs	r2, #130	; 0x82
 8001cda:	0052      	lsls	r2, r2, #1
 8001cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001ce6:	22e0      	movs	r2, #224	; 0xe0
 8001ce8:	00d2      	lsls	r2, r2, #3
 8001cea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001d26:	2208      	movs	r2, #8
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <MX_SPI1_Init+0x74>)
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f001 ffd3 	bl	8003cd8 <HAL_SPI_Init>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d001      	beq.n	8001d3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d36:	f000 fb0a 	bl	800234e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000007c 	.word	0x2000007c
 8001d44:	40013000 	.word	0x40013000

08001d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d4e:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <MX_USART2_UART_Init+0x98>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d54:	22e1      	movs	r2, #225	; 0xe1
 8001d56:	0252      	lsls	r2, r2, #9
 8001d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001d92:	0018      	movs	r0, r3
 8001d94:	f002 fec0 	bl	8004b18 <HAL_UART_Init>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d9c:	f000 fad7 	bl	800234e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	0018      	movs	r0, r3
 8001da6:	f003 fe5b 	bl	8005a60 <HAL_UARTEx_SetTxFifoThreshold>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001dae:	f000 face 	bl	800234e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001db4:	2100      	movs	r1, #0
 8001db6:	0018      	movs	r0, r3
 8001db8:	f003 fe92 	bl	8005ae0 <HAL_UARTEx_SetRxFifoThreshold>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001dc0:	f000 fac5 	bl	800234e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <MX_USART2_UART_Init+0x94>)
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f003 fe10 	bl	80059ec <HAL_UARTEx_DisableFifoMode>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001dd0:	f000 fabd 	bl	800234e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	200000e0 	.word	0x200000e0
 8001de0:	40004400 	.word	0x40004400

08001de4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <MX_USART3_UART_Init+0x98>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001df0:	2296      	movs	r2, #150	; 0x96
 8001df2:	0192      	lsls	r2, r2, #6
 8001df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f002 fe72 	bl	8004b18 <HAL_UART_Init>
 8001e34:	1e03      	subs	r3, r0, #0
 8001e36:	d001      	beq.n	8001e3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e38:	f000 fa89 	bl	800234e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e3e:	2100      	movs	r1, #0
 8001e40:	0018      	movs	r0, r3
 8001e42:	f003 fe0d 	bl	8005a60 <HAL_UARTEx_SetTxFifoThreshold>
 8001e46:	1e03      	subs	r3, r0, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e4a:	f000 fa80 	bl	800234e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e50:	2100      	movs	r1, #0
 8001e52:	0018      	movs	r0, r3
 8001e54:	f003 fe44 	bl	8005ae0 <HAL_UARTEx_SetRxFifoThreshold>
 8001e58:	1e03      	subs	r3, r0, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e5c:	f000 fa77 	bl	800234e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <MX_USART3_UART_Init+0x94>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f003 fdc2 	bl	80059ec <HAL_UARTEx_DisableFifoMode>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e6c:	f000 fa6f 	bl	800234e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e70:	46c0      	nop			; (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	20000174 	.word	0x20000174
 8001e7c:	40004800 	.word	0x40004800

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	240c      	movs	r4, #12
 8001e88:	193b      	adds	r3, r7, r4
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	2314      	movs	r3, #20
 8001e8e:	001a      	movs	r2, r3
 8001e90:	2100      	movs	r1, #0
 8001e92:	f003 ff19 	bl	8005cc8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <MX_GPIO_Init+0x128>)
 8001e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9a:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <MX_GPIO_Init+0x128>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <MX_GPIO_Init+0x128>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <MX_GPIO_Init+0x128>)
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <MX_GPIO_Init+0x128>)
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <MX_GPIO_Init+0x128>)
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 8001ec6:	23a0      	movs	r3, #160	; 0xa0
 8001ec8:	05db      	lsls	r3, r3, #23
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2110      	movs	r1, #16
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 ff1b 	bl	8002d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 8001ed4:	4935      	ldr	r1, [pc, #212]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 ff15 	bl	8002d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, GPIO_PIN_SET);
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	019b      	lsls	r3, r3, #6
 8001ee4:	4832      	ldr	r0, [pc, #200]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	0019      	movs	r1, r3
 8001eea:	f000 ff0e 	bl	8002d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|ACC_INT2_Pin;
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	193b      	adds	r3, r7, r4
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	193a      	adds	r2, r7, r4
 8001f02:	23a0      	movs	r3, #160	; 0xa0
 8001f04:	05db      	lsls	r3, r3, #23
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 fd75 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	2210      	movs	r2, #16
 8001f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	193b      	adds	r3, r7, r4
 8001f16:	2201      	movs	r2, #1
 8001f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	193b      	adds	r3, r7, r4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	193b      	adds	r3, r7, r4
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 8001f26:	193a      	adds	r2, r7, r4
 8001f28:	23a0      	movs	r3, #160	; 0xa0
 8001f2a:	05db      	lsls	r3, r3, #23
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 fd62 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_RST_Pin|GNSS_PWR_SW_Pin;
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <MX_GPIO_Init+0x12c>)
 8001f38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	193b      	adds	r3, r7, r4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001f50:	0019      	movs	r1, r3
 8001f52:	0010      	movs	r0, r2
 8001f54:	f000 fd50 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8001f58:	193b      	adds	r3, r7, r4
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5e:	193b      	adds	r3, r7, r4
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	193b      	adds	r3, r7, r4
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	193b      	adds	r3, r7, r4
 8001f6c:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001f6e:	0019      	movs	r1, r3
 8001f70:	0010      	movs	r0, r2
 8001f72:	f000 fd41 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8001f76:	0021      	movs	r1, r4
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	0192      	lsls	r2, r2, #6
 8001f7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	2211      	movs	r2, #17
 8001f84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <MX_GPIO_Init+0x130>)
 8001f96:	0019      	movs	r1, r3
 8001f98:	0010      	movs	r0, r2
 8001f9a:	f000 fd2d 	bl	80029f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b009      	add	sp, #36	; 0x24
 8001fa4:	bd90      	pop	{r4, r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	00008002 	.word	0x00008002
 8001fb0:	50000400 	.word	0x50000400

08001fb4 <acc_init>:

/* USER CODE BEGIN 4 */

void acc_init ( void )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
	uint8_t id = 0 ;
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]

	my_acc_ctx.write_reg = my_st_acc_platform_write ;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <acc_init+0x68>)
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <acc_init+0x6c>)
 8001fc4:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_st_acc_platform_read ;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <acc_init+0x68>)
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <acc_init+0x70>)
 8001fca:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <acc_init+0x68>)
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <acc_init+0x74>)
 8001fd0:	60da      	str	r2, [r3, #12]

	iis2dh_device_id_get ( &my_acc_ctx , &id ) ;
 8001fd2:	1dfa      	adds	r2, r7, #7
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <acc_init+0x68>)
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff fdf8 	bl	8001bce <iis2dh_device_id_get>
	sprintf ( dbg_payload , "IIS2DH_ID id = %u, my_acc_id = %u" , 0x33U , (uint16_t) id ) ;
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4912      	ldr	r1, [pc, #72]	; (800202c <acc_init+0x78>)
 8001fe4:	4812      	ldr	r0, [pc, #72]	; (8002030 <acc_init+0x7c>)
 8001fe6:	2233      	movs	r2, #51	; 0x33
 8001fe8:	f003 fe4e 	bl	8005c88 <siprintf>
	send_debug_logs ( dbg_payload ) ;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <acc_init+0x7c>)
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f8a8 	bl	8002144 <send_debug_logs>

	//  Configuration: 2g, LP and 25Hz gives 4 uA of ACC power consumption
	iis2dh_full_scale_set ( &my_acc_ctx , IIS2DH_2g ) ; // FS bits [ 2 g - 16 g ]
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <acc_init+0x68>)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7ff fdb8 	bl	8001b6e <iis2dh_full_scale_set>
	iis2dh_operating_mode_set ( &my_acc_ctx , IIS2DH_LP_8bit ) ; // [ High Resolution , Normal Mode , Low Power]
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <acc_init+0x68>)
 8002000:	2102      	movs	r1, #2
 8002002:	0018      	movs	r0, r3
 8002004:	f7ff fd1c 	bl	8001a40 <iis2dh_operating_mode_set>
	//iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_ODR_10Hz ) ; // Below 25Hz it will be hard to calculate free-fall
	iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_POWER_DOWN ) ; // Below 25Hz it will be hard to calculate free-fall
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <acc_init+0x68>)
 800200a:	2100      	movs	r1, #0
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff fd80 	bl	8001b12 <iis2dh_data_rate_set>
	//iis2dh_int1_pin_notification_mode_set ( &my_acc_ctx , IIS2DH_INT2_LATCHED ) ;
	//iis2dh_int2_pin_notification_mode_set ( &my_acc_ctx , IIS2DH_INT2_LATCHED ) ;

	// The IIS2DH may also be configured to generate an inertial wake-up and free-fall interrupt signal according to a programmed acceleration event along the enabled axes. Both free-fall and wake-up can be available simultaneously on two different pins.

}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	20000304 	.word	0x20000304
 8002020:	08002035 	.word	0x08002035
 8002024:	0800209f 	.word	0x0800209f
 8002028:	2000007c 	.word	0x2000007c
 800202c:	08007cbc 	.word	0x08007cbc
 8002030:	20000208 	.word	0x20000208

08002034 <my_st_acc_platform_write>:
// ACC LL Function
int32_t my_st_acc_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	0008      	movs	r0, r1
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	0019      	movs	r1, r3
 8002042:	240b      	movs	r4, #11
 8002044:	193b      	adds	r3, r7, r4
 8002046:	1c02      	adds	r2, r0, #0
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	2508      	movs	r5, #8
 800204c:	197b      	adds	r3, r7, r5
 800204e:	1c0a      	adds	r2, r1, #0
 8002050:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_RESET ) ;
 8002052:	23a0      	movs	r3, #160	; 0xa0
 8002054:	05db      	lsls	r3, r3, #23
 8002056:	2200      	movs	r2, #0
 8002058:	2110      	movs	r1, #16
 800205a:	0018      	movs	r0, r3
 800205c:	f000 fe55 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8002060:	2014      	movs	r0, #20
 8002062:	f000 fbcd 	bl	8002800 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8002066:	23fa      	movs	r3, #250	; 0xfa
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	1939      	adds	r1, r7, r4
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f001 feea 	bl	8003e48 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8002074:	23fa      	movs	r3, #250	; 0xfa
 8002076:	009c      	lsls	r4, r3, #2
 8002078:	197b      	adds	r3, r7, r5
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	0023      	movs	r3, r4
 8002082:	f001 fee1 	bl	8003e48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_SET) ;
 8002086:	23a0      	movs	r3, #160	; 0xa0
 8002088:	05db      	lsls	r3, r3, #23
 800208a:	2201      	movs	r2, #1
 800208c:	2110      	movs	r1, #16
 800208e:	0018      	movs	r0, r3
 8002090:	f000 fe3b 	bl	8002d0a <HAL_GPIO_WritePin>

	return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bdb0      	pop	{r4, r5, r7, pc}

0800209e <my_st_acc_platform_read>:

int32_t my_st_acc_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 800209e:	b5b0      	push	{r4, r5, r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	0008      	movs	r0, r1
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	0019      	movs	r1, r3
 80020ac:	240b      	movs	r4, #11
 80020ae:	193b      	adds	r3, r7, r4
 80020b0:	1c02      	adds	r2, r0, #0
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	2508      	movs	r5, #8
 80020b6:	197b      	adds	r3, r7, r5
 80020b8:	1c0a      	adds	r2, r1, #0
 80020ba:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	4252      	negs	r2, r2
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	193b      	adds	r3, r7, r4
 80020ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_RESET) ;
 80020cc:	23a0      	movs	r3, #160	; 0xa0
 80020ce:	05db      	lsls	r3, r3, #23
 80020d0:	2200      	movs	r2, #0
 80020d2:	2110      	movs	r1, #16
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fe18 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80020da:	2014      	movs	r0, #20
 80020dc:	f000 fb90 	bl	8002800 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 80020e0:	23fa      	movs	r3, #250	; 0xfa
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	1939      	adds	r1, r7, r4
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f001 fead 	bl	8003e48 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 80020ee:	23fa      	movs	r3, #250	; 0xfa
 80020f0:	009c      	lsls	r4, r3, #2
 80020f2:	197b      	adds	r3, r7, r5
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	0023      	movs	r3, r4
 80020fc:	f002 f804 	bl	8004108 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_SET) ;
 8002100:	23a0      	movs	r3, #160	; 0xa0
 8002102:	05db      	lsls	r3, r3, #23
 8002104:	2201      	movs	r2, #1
 8002106:	2110      	movs	r1, #16
 8002108:	0018      	movs	r0, r3
 800210a:	f000 fdfe 	bl	8002d0a <HAL_GPIO_WritePin>

	return 0;
 800210e:	2300      	movs	r3, #0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bdb0      	pop	{r4, r5, r7, pc}

08002118 <gnss_sw_off>:
void gnss_init ( void )
{
	HAL_GPIO_WritePin ( GNSS_RST_GPIO_Port , GNSS_RST_Pin, GPIO_PIN_SET ) ;
}
void gnss_sw_off ( void )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <gnss_sw_off+0x28>)
 8002122:	2200      	movs	r2, #0
 8002124:	0019      	movs	r1, r3
 8002126:	f000 fdf0 	bl	8002d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_RST_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	019b      	lsls	r3, r3, #6
 800212e:	4804      	ldr	r0, [pc, #16]	; (8002140 <gnss_sw_off+0x28>)
 8002130:	2200      	movs	r2, #0
 8002132:	0019      	movs	r1, r3
 8002134:	f000 fde9 	bl	8002d0a <HAL_GPIO_WritePin>
		//HAL_UART_DeInit ( &HUART_GNSS ) ;
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	50000400 	.word	0x50000400

08002144 <send_debug_logs>:
// ASTRO
void send_debug_logs ( char* p_tx_buffer )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f7fd ffd8 	bl	8000104 <strlen>
 8002154:	0003      	movs	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]

    if ( length > 250 )
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2bfa      	cmp	r3, #250	; 0xfa
 800215c:	d908      	bls.n	8002170 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &huart2 , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800215e:	23fa      	movs	r3, #250	; 0xfa
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	490d      	ldr	r1, [pc, #52]	; (8002198 <send_debug_logs+0x54>)
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <send_debug_logs+0x58>)
 8002166:	222a      	movs	r2, #42	; 0x2a
 8002168:	f002 fd2c 	bl	8004bc4 <HAL_UART_Transmit>
        length = 250 ;
 800216c:	23fa      	movs	r3, #250	; 0xfa
 800216e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &huart2 , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	b29a      	uxth	r2, r3
 8002174:	23fa      	movs	r3, #250	; 0xfa
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4808      	ldr	r0, [pc, #32]	; (800219c <send_debug_logs+0x58>)
 800217c:	f002 fd22 	bl	8004bc4 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &huart2 , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002180:	23fa      	movs	r3, #250	; 0xfa
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4906      	ldr	r1, [pc, #24]	; (80021a0 <send_debug_logs+0x5c>)
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <send_debug_logs+0x58>)
 8002188:	2201      	movs	r2, #1
 800218a:	f002 fd1b 	bl	8004bc4 <HAL_UART_Transmit>
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	08007ce0 	.word	0x08007ce0
 800219c:	200000e0 	.word	0x200000e0
 80021a0:	08007d0c 	.word	0x08007d0c

080021a4 <my_astronode_reset>:
void my_astronode_reset ( void )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <my_astronode_reset+0x30>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	2102      	movs	r1, #2
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 fdab 	bl	8002d0a <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80021b4:	2001      	movs	r0, #1
 80021b6:	f000 fb23 	bl	8002800 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <my_astronode_reset+0x30>)
 80021bc:	2200      	movs	r2, #0
 80021be:	2102      	movs	r1, #2
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 fda2 	bl	8002d0a <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80021c6:	20fa      	movs	r0, #250	; 0xfa
 80021c8:	f000 fb1a 	bl	8002800 <HAL_Delay>
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	50000400 	.word	0x50000400

080021d8 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <send_astronode_request+0x34>)
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff ffad 	bl	8002144 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7ff ffa9 	bl	8002144 <send_debug_logs>
    HAL_UART_Transmit ( &huart3 , p_tx_buffer , length , 1000 ) ;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	23fa      	movs	r3, #250	; 0xfa
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <send_astronode_request+0x38>)
 80021fe:	f002 fce1 	bl	8004bc4 <HAL_UART_Transmit>
}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	08007d10 	.word	0x08007d10
 8002210:	20000174 	.word	0x20000174

08002214 <get_systick>:
uint32_t get_systick ( void )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002218:	f000 fae8 	bl	80027ec <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	000a      	movs	r2, r1
 800222e:	1cbb      	adds	r3, r7, #2
 8002230:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002232:	f7ff ffef 	bl	8002214 <get_systick>
 8002236:	0002      	movs	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	1cba      	adds	r2, r7, #2
 800223e:	8812      	ldrh	r2, [r2, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	419b      	sbcs	r3, r3
 8002244:	425b      	negs	r3, r3
 8002246:	b2db      	uxtb	r3, r3
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &huart3 , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4806      	ldr	r0, [pc, #24]	; (8002274 <is_astronode_character_received+0x24>)
 800225c:	2364      	movs	r3, #100	; 0x64
 800225e:	2201      	movs	r2, #1
 8002260:	f002 fd54 	bl	8004d0c <HAL_UART_Receive>
 8002264:	0003      	movs	r3, r0
 8002266:	425a      	negs	r2, r3
 8002268:	4153      	adcs	r3, r2
 800226a:	b2db      	uxtb	r3, r3
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000174 	.word	0x20000174

08002278 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <my_astro_evt_pin+0x20>)
 800227e:	2104      	movs	r1, #4
 8002280:	0018      	movs	r0, r3
 8002282:	f000 fd25 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8002286:	0003      	movs	r3, r0
 8002288:	3b01      	subs	r3, #1
 800228a:	425a      	negs	r2, r3
 800228c:	4153      	adcs	r3, r2
 800228e:	b2db      	uxtb	r3, r3
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	50000400 	.word	0x50000400

0800229c <my_astro_init>:
void my_astro_init ( void )
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b087      	sub	sp, #28
 80022a0:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 80022a8:	e012      	b.n	80022d0 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 80022aa:	f7ff ff7b 	bl	80021a4 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80022ae:	1dfc      	adds	r4, r7, #7
 80022b0:	2300      	movs	r3, #0
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2301      	movs	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2301      	movs	r3, #1
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2300      	movs	r3, #0
 80022c2:	2201      	movs	r2, #1
 80022c4:	2101      	movs	r1, #1
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7fe f9f2 	bl	80006b0 <astronode_send_cfg_wr>
 80022cc:	0003      	movs	r3, r0
 80022ce:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 80022d0:	1dfb      	adds	r3, r7, #7
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2201      	movs	r2, #1
 80022d6:	4053      	eors	r3, r2
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1e5      	bne.n	80022aa <my_astro_init+0xe>
	}

	if ( cfg_wr )
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <my_astro_init+0x7e>
	{
		astronode_send_rtc_rr () ;
 80022e6:	f7fe fcdf 	bl	8000ca8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 80022ea:	f7fe f9a9 	bl	8000640 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80022ee:	f7fe fdd5 	bl	8000e9c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80022f2:	f7fe fb33 	bl	800095c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80022f6:	f7fe fa87 	bl	8000808 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ; // The module's entire payload queue can be cleared with the Payload Free Request PLD_FR.
 80022fa:	f7fe fc59 	bl	8000bb0 <astronode_send_pld_fr>
	}
	while ( my_astro_evt_pin () )
 80022fe:	e00c      	b.n	800231a <my_astro_init+0x7e>
  {
	  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <my_astro_init+0x90>)
 8002306:	490a      	ldr	r1, [pc, #40]	; (8002330 <my_astro_init+0x94>)
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <my_astro_init+0x98>)
 800230a:	f003 fcbd 	bl	8005c88 <siprintf>
	  send_debug_logs ( dbg_payload ) ;
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <my_astro_init+0x98>)
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff ff17 	bl	8002144 <send_debug_logs>
	  my_astro_handle_evt () ;
 8002316:	f000 f81f 	bl	8002358 <my_astro_handle_evt>
	while ( my_astro_evt_pin () )
 800231a:	f7ff ffad 	bl	8002278 <my_astro_evt_pin>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d1ee      	bne.n	8002300 <my_astro_init+0x64>
  }
}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b003      	add	sp, #12
 800232a:	bd90      	pop	{r4, r7, pc}
 800232c:	08007d34 	.word	0x08007d34
 8002330:	08007d48 	.word	0x08007d48
 8002334:	20000208 	.word	0x20000208

08002338 <sys_init>:

void sys_init ( void )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	acc_init () ;
 800233c:	f7ff fe3a 	bl	8001fb4 <acc_init>
	gnss_sw_off () ;
 8002340:	f7ff feea 	bl	8002118 <gnss_sw_off>
	my_astro_init () ;
 8002344:	f7ff ffaa 	bl	800229c <my_astro_init>
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002352:	b672      	cpsid	i
}
 8002354:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002356:	e7fe      	b.n	8002356 <Error_Handler+0x8>

08002358 <my_astro_handle_evt>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_handle_evt ( void )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <my_astro_handle_evt+0x58>)
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff fef0 	bl	8002144 <send_debug_logs>
	astronode_send_evt_rr () ;
 8002364:	f7fe fba4 	bl	8000ab0 <astronode_send_evt_rr>
	if (is_sak_available () )
 8002368:	f7fe fe82 	bl	8001070 <is_sak_available>
 800236c:	1e03      	subs	r3, r0, #0
 800236e:	d007      	beq.n	8002380 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8002370:	f7fe fcfe 	bl	8000d70 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8002374:	f7fe fd52 	bl	8000e1c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <my_astro_handle_evt+0x5c>)
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff fee2 	bl	8002144 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8002380:	f7fe fe80 	bl	8001084 <is_astronode_reset>
 8002384:	1e03      	subs	r3, r0, #0
 8002386:	d005      	beq.n	8002394 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <my_astro_handle_evt+0x60>)
 800238a:	0018      	movs	r0, r3
 800238c:	f7ff feda 	bl	8002144 <send_debug_logs>
	  astronode_send_res_cr () ;
 8002390:	f7fe fc4a 	bl	8000c28 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8002394:	f7fe fe80 	bl	8001098 <is_command_available>
 8002398:	1e03      	subs	r3, r0, #0
 800239a:	d005      	beq.n	80023a8 <my_astro_handle_evt+0x50>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <my_astro_handle_evt+0x64>)
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fed0 	bl	8002144 <send_debug_logs>
	  astronode_send_cmd_cr () ;
 80023a4:	f7fe fe24 	bl	8000ff0 <astronode_send_cmd_cr>
	}
	return true ;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	08007d60 	.word	0x08007d60
 80023b4:	08007d94 	.word	0x08007d94
 80023b8:	08007dd8 	.word	0x08007dd8
 80023bc:	08007e14 	.word	0x08007e14

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_MspInit+0x4c>)
 80023c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_MspInit+0x4c>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2201      	movs	r2, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_MspInit+0x4c>)
 80023e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_MspInit+0x4c>)
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0549      	lsls	r1, r1, #21
 80023e8:	430a      	orrs	r2, r1
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_MspInit+0x4c>)
 80023ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	055b      	lsls	r3, r3, #21
 80023f4:	4013      	ands	r3, r2
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80023fa:	23c0      	movs	r3, #192	; 0xc0
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 fa30 	bl	8002864 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000

08002410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b08b      	sub	sp, #44	; 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	2414      	movs	r4, #20
 800241a:	193b      	adds	r3, r7, r4
 800241c:	0018      	movs	r0, r3
 800241e:	2314      	movs	r3, #20
 8002420:	001a      	movs	r2, r3
 8002422:	2100      	movs	r1, #0
 8002424:	f003 fc50 	bl	8005cc8 <memset>
  if(hspi->Instance==SPI1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_SPI_MspInit+0x8c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d130      	bne.n	8002494 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_SPI_MspInit+0x90>)
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_SPI_MspInit+0x90>)
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	0149      	lsls	r1, r1, #5
 800243c:	430a      	orrs	r2, r1
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_SPI_MspInit+0x90>)
 8002442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	015b      	lsls	r3, r3, #5
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_SPI_MspInit+0x90>)
 8002450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_SPI_MspInit+0x90>)
 8002454:	2101      	movs	r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	635a      	str	r2, [r3, #52]	; 0x34
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_SPI_MspInit+0x90>)
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	2201      	movs	r2, #1
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SCK_Pin|ACC_MISO_Pin|ACC_MOSI_Pin;
 8002466:	0021      	movs	r1, r4
 8002468:	187b      	adds	r3, r7, r1
 800246a:	22e0      	movs	r2, #224	; 0xe0
 800246c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2202      	movs	r2, #2
 8002472:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	187b      	adds	r3, r7, r1
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	187a      	adds	r2, r7, r1
 8002488:	23a0      	movs	r3, #160	; 0xa0
 800248a:	05db      	lsls	r3, r3, #23
 800248c:	0011      	movs	r1, r2
 800248e:	0018      	movs	r0, r3
 8002490:	f000 fab2 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b00b      	add	sp, #44	; 0x2c
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	40013000 	.word	0x40013000
 80024a0:	40021000 	.word	0x40021000

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b09f      	sub	sp, #124	; 0x7c
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	2364      	movs	r3, #100	; 0x64
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	0018      	movs	r0, r3
 80024b2:	2314      	movs	r3, #20
 80024b4:	001a      	movs	r2, r3
 80024b6:	2100      	movs	r1, #0
 80024b8:	f003 fc06 	bl	8005cc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	2418      	movs	r4, #24
 80024be:	193b      	adds	r3, r7, r4
 80024c0:	0018      	movs	r0, r3
 80024c2:	234c      	movs	r3, #76	; 0x4c
 80024c4:	001a      	movs	r2, r3
 80024c6:	2100      	movs	r1, #0
 80024c8:	f003 fbfe 	bl	8005cc8 <memset>
  if(huart->Instance==USART2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_UART_MspInit+0x144>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d13f      	bne.n	8002556 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024d6:	193b      	adds	r3, r7, r4
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024dc:	193b      	adds	r3, r7, r4
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	0018      	movs	r0, r3
 80024e6:	f001 f9bb 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 80024ea:	1e03      	subs	r3, r0, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ee:	f7ff ff2e 	bl	800234e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f2:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <HAL_UART_MspInit+0x148>)
 80024f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_UART_MspInit+0x148>)
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0289      	lsls	r1, r1, #10
 80024fc:	430a      	orrs	r2, r1
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002500:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_UART_MspInit+0x148>)
 8002502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	029b      	lsls	r3, r3, #10
 8002508:	4013      	ands	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250e:	4b37      	ldr	r3, [pc, #220]	; (80025ec <HAL_UART_MspInit+0x148>)
 8002510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_UART_MspInit+0x148>)
 8002514:	2101      	movs	r1, #1
 8002516:	430a      	orrs	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_UART_MspInit+0x148>)
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	2201      	movs	r2, #1
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002526:	2164      	movs	r1, #100	; 0x64
 8002528:	187b      	adds	r3, r7, r1
 800252a:	220c      	movs	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	187b      	adds	r3, r7, r1
 8002530:	2202      	movs	r2, #2
 8002532:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2200      	movs	r2, #0
 800253e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2201      	movs	r2, #1
 8002544:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	187a      	adds	r2, r7, r1
 8002548:	23a0      	movs	r3, #160	; 0xa0
 800254a:	05db      	lsls	r3, r3, #23
 800254c:	0011      	movs	r1, r2
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fa52 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002554:	e044      	b.n	80025e0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d13f      	bne.n	80025e0 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002560:	2118      	movs	r1, #24
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2204      	movs	r2, #4
 8002566:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256e:	187b      	adds	r3, r7, r1
 8002570:	0018      	movs	r0, r3
 8002572:	f001 f975 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d001      	beq.n	800257e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800257a:	f7ff fee8 	bl	800234e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_UART_MspInit+0x148>)
 8002580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_UART_MspInit+0x148>)
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	02c9      	lsls	r1, r1, #11
 8002588:	430a      	orrs	r2, r1
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <HAL_UART_MspInit+0x148>)
 800258e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	02db      	lsls	r3, r3, #11
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_UART_MspInit+0x148>)
 800259c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_UART_MspInit+0x148>)
 80025a0:	2102      	movs	r1, #2
 80025a2:	430a      	orrs	r2, r1
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_UART_MspInit+0x148>)
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025b2:	2164      	movs	r1, #100	; 0x64
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	22c0      	movs	r2, #192	; 0xc0
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2202      	movs	r2, #2
 80025c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2204      	movs	r2, #4
 80025d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_UART_MspInit+0x150>)
 80025d8:	0019      	movs	r1, r3
 80025da:	0010      	movs	r0, r2
 80025dc:	f000 fa0c 	bl	80029f8 <HAL_GPIO_Init>
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b01f      	add	sp, #124	; 0x7c
 80025e6:	bd90      	pop	{r4, r7, pc}
 80025e8:	40004400 	.word	0x40004400
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40004800 	.word	0x40004800
 80025f4:	50000400 	.word	0x50000400

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025fc:	e7fe      	b.n	80025fc <NMI_Handler+0x4>

080025fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <HardFault_Handler+0x4>

08002604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261c:	f000 f8d4 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f003 fb3e 	bl	8005cd8 <__errno>
 800265c:	0003      	movs	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	2301      	movs	r3, #1
 8002664:	425b      	negs	r3, r3
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	18d2      	adds	r2, r2, r3
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <_sbrk+0x64>)
 8002678:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20024000 	.word	0x20024000
 8002688:	00000400 	.word	0x00000400
 800268c:	20000314 	.word	0x20000314
 8002690:	20000468 	.word	0x20000468

08002694 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026a0:	480d      	ldr	r0, [pc, #52]	; (80026d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026a4:	f7ff fff6 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <LoopForever+0x6>)
  ldr r1, =_edata
 80026aa:	490d      	ldr	r1, [pc, #52]	; (80026e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <LoopForever+0xe>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c0:	4c0a      	ldr	r4, [pc, #40]	; (80026ec <LoopForever+0x16>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ce:	f003 fb09 	bl	8005ce4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026d2:	f7ff fa8f 	bl	8001bf4 <main>

080026d6 <LoopForever>:

LoopForever:
  b LoopForever
 80026d6:	e7fe      	b.n	80026d6 <LoopForever>
  ldr   r0, =_estack
 80026d8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80026e4:	08007f30 	.word	0x08007f30
  ldr r2, =_sbss
 80026e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80026ec:	20000464 	.word	0x20000464

080026f0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC1_COMP_IRQHandler>
	...

080026f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_Init+0x3c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_Init+0x3c>)
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	0049      	lsls	r1, r1, #1
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270e:	2003      	movs	r0, #3
 8002710:	f000 f810 	bl	8002734 <HAL_InitTick>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d003      	beq.n	8002720 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e001      	b.n	8002724 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002720:	f7ff fe4e 	bl	80023c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002724:	1dfb      	adds	r3, r7, #7
 8002726:	781b      	ldrb	r3, [r3, #0]
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800273c:	230f      	movs	r3, #15
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_InitTick+0x88>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02b      	beq.n	80027a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_InitTick+0x8c>)
 800274e:	681c      	ldr	r4, [r3, #0]
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_InitTick+0x88>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	0019      	movs	r1, r3
 8002756:	23fa      	movs	r3, #250	; 0xfa
 8002758:	0098      	lsls	r0, r3, #2
 800275a:	f7fd fce5 	bl	8000128 <__udivsi3>
 800275e:	0003      	movs	r3, r0
 8002760:	0019      	movs	r1, r3
 8002762:	0020      	movs	r0, r4
 8002764:	f7fd fce0 	bl	8000128 <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f937 	bl	80029de <HAL_SYSTICK_Config>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d112      	bne.n	800279a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d80a      	bhi.n	8002790 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	2301      	movs	r3, #1
 800277e:	425b      	negs	r3, r3
 8002780:	2200      	movs	r2, #0
 8002782:	0018      	movs	r0, r3
 8002784:	f000 f916 	bl	80029b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_InitTick+0x90>)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e00d      	b.n	80027ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002790:	230f      	movs	r3, #15
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e008      	b.n	80027ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800279a:	230f      	movs	r3, #15
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e003      	b.n	80027ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027a4:	230f      	movs	r3, #15
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027ac:	230f      	movs	r3, #15
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	781b      	ldrb	r3, [r3, #0]
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b005      	add	sp, #20
 80027b8:	bd90      	pop	{r4, r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	20000008 	.word	0x20000008
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_IncTick+0x1c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	001a      	movs	r2, r3
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_IncTick+0x20>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	18d2      	adds	r2, r2, r3
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_IncTick+0x20>)
 80027da:	601a      	str	r2, [r3, #0]
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000008 	.word	0x20000008
 80027e8:	20000318 	.word	0x20000318

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b02      	ldr	r3, [pc, #8]	; (80027fc <HAL_GetTick+0x10>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000318 	.word	0x20000318

08002800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff fff0 	bl	80027ec <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3301      	adds	r3, #1
 8002818:	d005      	beq.n	8002826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_Delay+0x44>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	001a      	movs	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	189b      	adds	r3, r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	f7ff ffe0 	bl	80027ec <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d8f7      	bhi.n	8002828 <HAL_Delay+0x28>
  {
  }
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b004      	add	sp, #16
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	20000008 	.word	0x20000008

08002848 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_SuspendTick+0x18>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_SuspendTick+0x18>)
 8002852:	2102      	movs	r1, #2
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	e000e010 	.word	0xe000e010

08002864 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a06      	ldr	r2, [pc, #24]	; (800288c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002872:	4013      	ands	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b002      	add	sp, #8
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	40010000 	.word	0x40010000
 800288c:	fffff9ff 	.word	0xfffff9ff

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	0002      	movs	r2, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b7f      	cmp	r3, #127	; 0x7f
 80028a4:	d828      	bhi.n	80028f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a6:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <__NVIC_SetPriority+0xd4>)
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	33c0      	adds	r3, #192	; 0xc0
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	589b      	ldr	r3, [r3, r2]
 80028b6:	1dfa      	adds	r2, r7, #7
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	0011      	movs	r1, r2
 80028bc:	2203      	movs	r2, #3
 80028be:	400a      	ands	r2, r1
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	21ff      	movs	r1, #255	; 0xff
 80028c4:	4091      	lsls	r1, r2
 80028c6:	000a      	movs	r2, r1
 80028c8:	43d2      	mvns	r2, r2
 80028ca:	401a      	ands	r2, r3
 80028cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	019b      	lsls	r3, r3, #6
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	401a      	ands	r2, r3
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	0018      	movs	r0, r3
 80028dc:	2303      	movs	r3, #3
 80028de:	4003      	ands	r3, r0
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e4:	481f      	ldr	r0, [pc, #124]	; (8002964 <__NVIC_SetPriority+0xd4>)
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	430a      	orrs	r2, r1
 80028f0:	33c0      	adds	r3, #192	; 0xc0
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028f6:	e031      	b.n	800295c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <__NVIC_SetPriority+0xd8>)
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	0019      	movs	r1, r3
 8002900:	230f      	movs	r3, #15
 8002902:	400b      	ands	r3, r1
 8002904:	3b08      	subs	r3, #8
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3306      	adds	r3, #6
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	18d3      	adds	r3, r2, r3
 800290e:	3304      	adds	r3, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1dfa      	adds	r2, r7, #7
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	0011      	movs	r1, r2
 8002918:	2203      	movs	r2, #3
 800291a:	400a      	ands	r2, r1
 800291c:	00d2      	lsls	r2, r2, #3
 800291e:	21ff      	movs	r1, #255	; 0xff
 8002920:	4091      	lsls	r1, r2
 8002922:	000a      	movs	r2, r1
 8002924:	43d2      	mvns	r2, r2
 8002926:	401a      	ands	r2, r3
 8002928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	22ff      	movs	r2, #255	; 0xff
 8002930:	401a      	ands	r2, r3
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	0018      	movs	r0, r3
 8002938:	2303      	movs	r3, #3
 800293a:	4003      	ands	r3, r0
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002940:	4809      	ldr	r0, [pc, #36]	; (8002968 <__NVIC_SetPriority+0xd8>)
 8002942:	1dfb      	adds	r3, r7, #7
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	001c      	movs	r4, r3
 8002948:	230f      	movs	r3, #15
 800294a:	4023      	ands	r3, r4
 800294c:	3b08      	subs	r3, #8
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	430a      	orrs	r2, r1
 8002952:	3306      	adds	r3, #6
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	18c3      	adds	r3, r0, r3
 8002958:	3304      	adds	r3, #4
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b003      	add	sp, #12
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	045b      	lsls	r3, r3, #17
 800297c:	429a      	cmp	r2, r3
 800297e:	d301      	bcc.n	8002984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002980:	2301      	movs	r3, #1
 8002982:	e010      	b.n	80029a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <SysTick_Config+0x44>)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	3a01      	subs	r2, #1
 800298a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298c:	2301      	movs	r3, #1
 800298e:	425b      	negs	r3, r3
 8002990:	2103      	movs	r1, #3
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff ff7c 	bl	8002890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x44>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x44>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	210f      	movs	r1, #15
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	1c02      	adds	r2, r0, #0
 80029c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	0011      	movs	r1, r2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff ff5d 	bl	8002890 <__NVIC_SetPriority>
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff ffbf 	bl	800296c <SysTick_Config>
 80029ee:	0003      	movs	r3, r0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a06:	e14d      	b.n	8002ca4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4091      	lsls	r1, r2
 8002a12:	000a      	movs	r2, r1
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d100      	bne.n	8002a20 <HAL_GPIO_Init+0x28>
 8002a1e:	e13e      	b.n	8002c9e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2203      	movs	r2, #3
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d005      	beq.n	8002a38 <HAL_GPIO_Init+0x40>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2203      	movs	r2, #3
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d130      	bne.n	8002a9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	409a      	lsls	r2, r3
 8002a46:	0013      	movs	r3, r2
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a6e:	2201      	movs	r2, #1
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
 8002a74:	0013      	movs	r3, r2
 8002a76:	43da      	mvns	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	2201      	movs	r2, #1
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d017      	beq.n	8002ad6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	0013      	movs	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d123      	bne.n	8002b2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	08da      	lsrs	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3208      	adds	r2, #8
 8002aea:	0092      	lsls	r2, r2, #2
 8002aec:	58d3      	ldr	r3, [r2, r3]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2207      	movs	r2, #7
 8002af4:	4013      	ands	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	409a      	lsls	r2, r3
 8002afc:	0013      	movs	r3, r2
 8002afe:	43da      	mvns	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2107      	movs	r1, #7
 8002b0e:	400b      	ands	r3, r1
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	409a      	lsls	r2, r3
 8002b14:	0013      	movs	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	0092      	lsls	r2, r2, #2
 8002b26:	6939      	ldr	r1, [r7, #16]
 8002b28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	409a      	lsls	r2, r3
 8002b38:	0013      	movs	r3, r2
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2203      	movs	r2, #3
 8002b48:	401a      	ands	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	0013      	movs	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	23c0      	movs	r3, #192	; 0xc0
 8002b64:	029b      	lsls	r3, r3, #10
 8002b66:	4013      	ands	r3, r2
 8002b68:	d100      	bne.n	8002b6c <HAL_GPIO_Init+0x174>
 8002b6a:	e098      	b.n	8002c9e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b6c:	4a53      	ldr	r2, [pc, #332]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3318      	adds	r3, #24
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	589b      	ldr	r3, [r3, r2]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	4013      	ands	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	220f      	movs	r2, #15
 8002b84:	409a      	lsls	r2, r3
 8002b86:	0013      	movs	r3, r2
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	23a0      	movs	r3, #160	; 0xa0
 8002b94:	05db      	lsls	r3, r3, #23
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d019      	beq.n	8002bce <HAL_GPIO_Init+0x1d6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_GPIO_Init+0x2c8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0x1d2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_GPIO_Init+0x2cc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_GPIO_Init+0x1ce>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_GPIO_Init+0x1ca>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a45      	ldr	r2, [pc, #276]	; (8002ccc <HAL_GPIO_Init+0x2d4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_GPIO_Init+0x1c6>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e008      	b.n	8002bd0 <HAL_GPIO_Init+0x1d8>
 8002bbe:	2305      	movs	r3, #5
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x1d8>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e004      	b.n	8002bd0 <HAL_GPIO_Init+0x1d8>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_Init+0x1d8>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_GPIO_Init+0x1d8>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	2103      	movs	r1, #3
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	00d2      	lsls	r2, r2, #3
 8002bd8:	4093      	lsls	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002be0:	4936      	ldr	r1, [pc, #216]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3318      	adds	r3, #24
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	035b      	lsls	r3, r3, #13
 8002c06:	4013      	ands	r3, r2
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c12:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43da      	mvns	r2, r3
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	039b      	lsls	r3, r3, #14
 8002c30:	4013      	ands	r3, r2
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c42:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002c44:	2384      	movs	r3, #132	; 0x84
 8002c46:	58d3      	ldr	r3, [r2, r3]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	029b      	lsls	r3, r3, #10
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c68:	4914      	ldr	r1, [pc, #80]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002c6a:	2284      	movs	r2, #132	; 0x84
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002c70:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	58d3      	ldr	r3, [r2, r3]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	025b      	lsls	r3, r3, #9
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c96:	4909      	ldr	r1, [pc, #36]	; (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	40da      	lsrs	r2, r3
 8002cac:	1e13      	subs	r3, r2, #0
 8002cae:	d000      	beq.n	8002cb2 <HAL_GPIO_Init+0x2ba>
 8002cb0:	e6aa      	b.n	8002a08 <HAL_GPIO_Init+0x10>
  }
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b006      	add	sp, #24
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021800 	.word	0x40021800
 8002cc0:	50000400 	.word	0x50000400
 8002cc4:	50000800 	.word	0x50000800
 8002cc8:	50000c00 	.word	0x50000c00
 8002ccc:	50001000 	.word	0x50001000

08002cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	000a      	movs	r2, r1
 8002cda:	1cbb      	adds	r3, r7, #2
 8002cdc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	1cba      	adds	r2, r7, #2
 8002ce4:	8812      	ldrh	r2, [r2, #0]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002cea:	230f      	movs	r3, #15
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e003      	b.n	8002cfc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	781b      	ldrb	r3, [r3, #0]
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	0008      	movs	r0, r1
 8002d14:	0011      	movs	r1, r2
 8002d16:	1cbb      	adds	r3, r7, #2
 8002d18:	1c02      	adds	r2, r0, #0
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	1c7b      	adds	r3, r7, #1
 8002d1e:	1c0a      	adds	r2, r1, #0
 8002d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d22:	1c7b      	adds	r3, r7, #1
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d2a:	1cbb      	adds	r3, r7, #2
 8002d2c:	881a      	ldrh	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d32:	e003      	b.n	8002d3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d34:	1cbb      	adds	r3, r7, #2
 8002d36:	881a      	ldrh	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	000a      	movs	r2, r1
 8002d4e:	1cfb      	adds	r3, r7, #3
 8002d50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_PWR_EnterSTOPMode+0x68>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	4393      	bics	r3, r2
 8002d60:	001a      	movs	r2, r3
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_PWR_EnterSTOPMode+0x68>)
 8002d64:	2101      	movs	r1, #1
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e005      	b.n	8002d78 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_PWR_EnterSTOPMode+0x68>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_PWR_EnterSTOPMode+0x68>)
 8002d72:	2107      	movs	r1, #7
 8002d74:	438a      	bics	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8002d7e:	2104      	movs	r1, #4
 8002d80:	430a      	orrs	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002d84:	1cfb      	adds	r3, r7, #3
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002d8c:	bf30      	wfi
 8002d8e:	e002      	b.n	8002d96 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002d90:	bf40      	sev
    __WFE();
 8002d92:	bf20      	wfe
    __WFE();
 8002d94:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	438a      	bics	r2, r1
 8002da0:	611a      	str	r2, [r3, #16]
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40007000 	.word	0x40007000
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d11f      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	0013      	movs	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4912      	ldr	r1, [pc, #72]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fd f99e 	bl	8000128 <__udivsi3>
 8002dec:	0003      	movs	r3, r0
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002df2:	e008      	b.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e001      	b.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e009      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d0ed      	beq.n	8002df4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	40007000 	.word	0x40007000
 8002e28:	fffff9ff 	.word	0xfffff9ff
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	000f4240 	.word	0x000f4240

08002e34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	23e0      	movs	r3, #224	; 0xe0
 8002e3e:	01db      	lsls	r3, r3, #7
 8002e40:	4013      	ands	r3, r2
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f000 fb50 	bl	8003500 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	d100      	bne.n	8002e6c <HAL_RCC_OscConfig+0x20>
 8002e6a:	e07c      	b.n	8002f66 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e6c:	4bc3      	ldr	r3, [pc, #780]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2238      	movs	r2, #56	; 0x38
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e76:	4bc1      	ldr	r3, [pc, #772]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d102      	bne.n	8002e8c <HAL_RCC_OscConfig+0x40>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d002      	beq.n	8002e92 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d10b      	bne.n	8002eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e92:	4bba      	ldr	r3, [pc, #744]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	029b      	lsls	r3, r3, #10
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d062      	beq.n	8002f64 <HAL_RCC_OscConfig+0x118>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d15e      	bne.n	8002f64 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e32a      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	025b      	lsls	r3, r3, #9
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x7a>
 8002eb6:	4bb1      	ldr	r3, [pc, #708]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4bb0      	ldr	r3, [pc, #704]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	0249      	lsls	r1, r1, #9
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e020      	b.n	8002f08 <HAL_RCC_OscConfig+0xbc>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	23a0      	movs	r3, #160	; 0xa0
 8002ecc:	02db      	lsls	r3, r3, #11
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xa4>
 8002ed2:	4baa      	ldr	r3, [pc, #680]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4ba9      	ldr	r3, [pc, #676]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	02c9      	lsls	r1, r1, #11
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	4ba6      	ldr	r3, [pc, #664]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4ba5      	ldr	r3, [pc, #660]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	0249      	lsls	r1, r1, #9
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xbc>
 8002ef0:	4ba2      	ldr	r3, [pc, #648]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4ba1      	ldr	r3, [pc, #644]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002ef6:	49a2      	ldr	r1, [pc, #648]	; (8003180 <HAL_RCC_OscConfig+0x334>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	4b9f      	ldr	r3, [pc, #636]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b9e      	ldr	r3, [pc, #632]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002f02:	49a0      	ldr	r1, [pc, #640]	; (8003184 <HAL_RCC_OscConfig+0x338>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d014      	beq.n	8002f3a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7ff fc6c 	bl	80027ec <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1a:	f7ff fc67 	bl	80027ec <HAL_GetTick>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b64      	cmp	r3, #100	; 0x64
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e2e9      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2c:	4b93      	ldr	r3, [pc, #588]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	029b      	lsls	r3, r3, #10
 8002f34:	4013      	ands	r3, r2
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0xce>
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7ff fc57 	bl	80027ec <HAL_GetTick>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7ff fc52 	bl	80027ec <HAL_GetTick>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e2d4      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f56:	4b89      	ldr	r3, [pc, #548]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	029b      	lsls	r3, r3, #10
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0xf8>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <HAL_RCC_OscConfig+0x126>
 8002f70:	e099      	b.n	80030a6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f72:	4b82      	ldr	r3, [pc, #520]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2238      	movs	r2, #56	; 0x38
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f7c:	4b7f      	ldr	r3, [pc, #508]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2203      	movs	r2, #3
 8002f82:	4013      	ands	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_OscConfig+0x146>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d135      	bne.n	8003004 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f98:	4b78      	ldr	r3, [pc, #480]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x164>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e2a7      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b72      	ldr	r3, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a74      	ldr	r2, [pc, #464]	; (8003188 <HAL_RCC_OscConfig+0x33c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	021a      	lsls	r2, r3, #8
 8002fc0:	4b6e      	ldr	r3, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d112      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fcc:	4b6b      	ldr	r3, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x340>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002fe0:	4b66      	ldr	r3, [pc, #408]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0adb      	lsrs	r3, r3, #11
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	4013      	ands	r3, r2
 8002fea:	4a69      	ldr	r2, [pc, #420]	; (8003190 <HAL_RCC_OscConfig+0x344>)
 8002fec:	40da      	lsrs	r2, r3
 8002fee:	4b69      	ldr	r3, [pc, #420]	; (8003194 <HAL_RCC_OscConfig+0x348>)
 8002ff0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ff2:	4b69      	ldr	r3, [pc, #420]	; (8003198 <HAL_RCC_OscConfig+0x34c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7ff fb9c 	bl	8002734 <HAL_InitTick>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d051      	beq.n	80030a4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e27d      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d030      	beq.n	800306e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800300c:	4b5b      	ldr	r3, [pc, #364]	; (800317c <HAL_RCC_OscConfig+0x330>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5e      	ldr	r2, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x340>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	4b58      	ldr	r3, [pc, #352]	; (800317c <HAL_RCC_OscConfig+0x330>)
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003020:	4b56      	ldr	r3, [pc, #344]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b55      	ldr	r3, [pc, #340]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	0049      	lsls	r1, r1, #1
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7ff fbdd 	bl	80027ec <HAL_GetTick>
 8003032:	0003      	movs	r3, r0
 8003034:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003038:	f7ff fbd8 	bl	80027ec <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e25a      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304a:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_RCC_OscConfig+0x330>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4013      	ands	r3, r2
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b49      	ldr	r3, [pc, #292]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a4b      	ldr	r2, [pc, #300]	; (8003188 <HAL_RCC_OscConfig+0x33c>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	021a      	lsls	r2, r3, #8
 8003066:	4b45      	ldr	r3, [pc, #276]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003068:	430a      	orrs	r2, r1
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	e01b      	b.n	80030a6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b42      	ldr	r3, [pc, #264]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003074:	4949      	ldr	r1, [pc, #292]	; (800319c <HAL_RCC_OscConfig+0x350>)
 8003076:	400a      	ands	r2, r1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7ff fbb7 	bl	80027ec <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003084:	f7ff fbb2 	bl	80027ec <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e234      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4013      	ands	r3, r2
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x238>
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2208      	movs	r2, #8
 80030ac:	4013      	ands	r3, r2
 80030ae:	d047      	beq.n	8003140 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_RCC_OscConfig+0x330>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2238      	movs	r2, #56	; 0x38
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b18      	cmp	r3, #24
 80030ba:	d10a      	bne.n	80030d2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80030bc:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_RCC_OscConfig+0x330>)
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d03c      	beq.n	8003140 <HAL_RCC_OscConfig+0x2f4>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d138      	bne.n	8003140 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e216      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030da:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_OscConfig+0x330>)
 80030dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_RCC_OscConfig+0x330>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7ff fb81 	bl	80027ec <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f0:	f7ff fb7c 	bl	80027ec <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1fe      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d0f1      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2a4>
 800310c:	e018      	b.n	8003140 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003114:	2101      	movs	r1, #1
 8003116:	438a      	bics	r2, r1
 8003118:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7ff fb67 	bl	80027ec <HAL_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7ff fb62 	bl	80027ec <HAL_GetTick>
 8003128:	0002      	movs	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e1e4      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	2202      	movs	r2, #2
 800313c:	4013      	ands	r3, r2
 800313e:	d1f1      	bne.n	8003124 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2204      	movs	r2, #4
 8003146:	4013      	ands	r3, r2
 8003148:	d100      	bne.n	800314c <HAL_RCC_OscConfig+0x300>
 800314a:	e0c7      	b.n	80032dc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314c:	231f      	movs	r3, #31
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2238      	movs	r2, #56	; 0x38
 800315a:	4013      	ands	r3, r2
 800315c:	2b20      	cmp	r3, #32
 800315e:	d11f      	bne.n	80031a0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d100      	bne.n	800316c <HAL_RCC_OscConfig+0x320>
 800316a:	e0b7      	b.n	80032dc <HAL_RCC_OscConfig+0x490>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d000      	beq.n	8003176 <HAL_RCC_OscConfig+0x32a>
 8003174:	e0b2      	b.n	80032dc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1c2      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40021000 	.word	0x40021000
 8003180:	fffeffff 	.word	0xfffeffff
 8003184:	fffbffff 	.word	0xfffbffff
 8003188:	ffff80ff 	.word	0xffff80ff
 800318c:	ffffc7ff 	.word	0xffffc7ff
 8003190:	00f42400 	.word	0x00f42400
 8003194:	20000000 	.word	0x20000000
 8003198:	20000004 	.word	0x20000004
 800319c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031a0:	4bb5      	ldr	r3, [pc, #724]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80031a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	055b      	lsls	r3, r3, #21
 80031a8:	4013      	ands	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_OscConfig+0x364>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x366>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d011      	beq.n	80031da <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4bb0      	ldr	r3, [pc, #704]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80031b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ba:	4baf      	ldr	r3, [pc, #700]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	0549      	lsls	r1, r1, #21
 80031c0:	430a      	orrs	r2, r1
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80031c4:	4bac      	ldr	r3, [pc, #688]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80031c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	055b      	lsls	r3, r3, #21
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80031d2:	231f      	movs	r3, #31
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031da:	4ba8      	ldr	r3, [pc, #672]	; (800347c <HAL_RCC_OscConfig+0x630>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	d11a      	bne.n	800321c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e6:	4ba5      	ldr	r3, [pc, #660]	; (800347c <HAL_RCC_OscConfig+0x630>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4ba4      	ldr	r3, [pc, #656]	; (800347c <HAL_RCC_OscConfig+0x630>)
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	0049      	lsls	r1, r1, #1
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80031f4:	f7ff fafa 	bl	80027ec <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fe:	f7ff faf5 	bl	80027ec <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e177      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	4b9a      	ldr	r3, [pc, #616]	; (800347c <HAL_RCC_OscConfig+0x630>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4013      	ands	r3, r2
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x3e6>
 8003224:	4b94      	ldr	r3, [pc, #592]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003228:	4b93      	ldr	r3, [pc, #588]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800322a:	2101      	movs	r1, #1
 800322c:	430a      	orrs	r2, r1
 800322e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003230:	e01c      	b.n	800326c <HAL_RCC_OscConfig+0x420>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x408>
 800323a:	4b8f      	ldr	r3, [pc, #572]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800323c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800323e:	4b8e      	ldr	r3, [pc, #568]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003240:	2104      	movs	r1, #4
 8003242:	430a      	orrs	r2, r1
 8003244:	65da      	str	r2, [r3, #92]	; 0x5c
 8003246:	4b8c      	ldr	r3, [pc, #560]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800324a:	4b8b      	ldr	r3, [pc, #556]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800324c:	2101      	movs	r1, #1
 800324e:	430a      	orrs	r2, r1
 8003250:	65da      	str	r2, [r3, #92]	; 0x5c
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0x420>
 8003254:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003258:	4b87      	ldr	r3, [pc, #540]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800325a:	2101      	movs	r1, #1
 800325c:	438a      	bics	r2, r1
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003260:	4b85      	ldr	r3, [pc, #532]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003264:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003266:	2104      	movs	r1, #4
 8003268:	438a      	bics	r2, r1
 800326a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d014      	beq.n	800329e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7ff faba 	bl	80027ec <HAL_GetTick>
 8003278:	0003      	movs	r3, r0
 800327a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327c:	e009      	b.n	8003292 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7ff fab5 	bl	80027ec <HAL_GetTick>
 8003282:	0002      	movs	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	4a7d      	ldr	r2, [pc, #500]	; (8003480 <HAL_RCC_OscConfig+0x634>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e136      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003292:	4b79      	ldr	r3, [pc, #484]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x432>
 800329c:	e013      	b.n	80032c6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7ff faa5 	bl	80027ec <HAL_GetTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a6:	e009      	b.n	80032bc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7ff faa0 	bl	80027ec <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x634>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e121      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032bc:	4b6e      	ldr	r3, [pc, #440]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2202      	movs	r2, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032c6:	231f      	movs	r3, #31
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032d0:	4b69      	ldr	r3, [pc, #420]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80032d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d4:	4b68      	ldr	r3, [pc, #416]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80032d6:	496b      	ldr	r1, [pc, #428]	; (8003484 <HAL_RCC_OscConfig+0x638>)
 80032d8:	400a      	ands	r2, r1
 80032da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2220      	movs	r2, #32
 80032e2:	4013      	ands	r3, r2
 80032e4:	d039      	beq.n	800335a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01b      	beq.n	8003326 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032ee:	4b62      	ldr	r3, [pc, #392]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b61      	ldr	r3, [pc, #388]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	03c9      	lsls	r1, r1, #15
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7ff fa76 	bl	80027ec <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003306:	f7ff fa71 	bl	80027ec <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0f3      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003318:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	4013      	ands	r3, r2
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x4ba>
 8003324:	e019      	b.n	800335a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003326:	4b54      	ldr	r3, [pc, #336]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b53      	ldr	r3, [pc, #332]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800332c:	4956      	ldr	r1, [pc, #344]	; (8003488 <HAL_RCC_OscConfig+0x63c>)
 800332e:	400a      	ands	r2, r1
 8003330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7ff fa5b 	bl	80027ec <HAL_GetTick>
 8003336:	0003      	movs	r3, r0
 8003338:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333c:	f7ff fa56 	bl	80027ec <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e0d8      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800334e:	4b4a      	ldr	r3, [pc, #296]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	4013      	ands	r3, r2
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d100      	bne.n	8003364 <HAL_RCC_OscConfig+0x518>
 8003362:	e0cc      	b.n	80034fe <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003364:	4b44      	ldr	r3, [pc, #272]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2238      	movs	r2, #56	; 0x38
 800336a:	4013      	ands	r3, r2
 800336c:	2b10      	cmp	r3, #16
 800336e:	d100      	bne.n	8003372 <HAL_RCC_OscConfig+0x526>
 8003370:	e07b      	b.n	800346a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d156      	bne.n	8003428 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003380:	4942      	ldr	r1, [pc, #264]	; (800348c <HAL_RCC_OscConfig+0x640>)
 8003382:	400a      	ands	r2, r1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7ff fa31 	bl	80027ec <HAL_GetTick>
 800338a:	0003      	movs	r3, r0
 800338c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7ff fa2c 	bl	80027ec <HAL_GetTick>
 8003394:	0002      	movs	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0ae      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a2:	4b35      	ldr	r3, [pc, #212]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	049b      	lsls	r3, r3, #18
 80033aa:	4013      	ands	r3, r2
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ae:	4b32      	ldr	r3, [pc, #200]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a37      	ldr	r2, [pc, #220]	; (8003490 <HAL_RCC_OscConfig+0x644>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	431a      	orrs	r2, r3
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	0449      	lsls	r1, r1, #17
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 80033f6:	2180      	movs	r1, #128	; 0x80
 80033f8:	0549      	lsls	r1, r1, #21
 80033fa:	430a      	orrs	r2, r1
 80033fc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7ff f9f5 	bl	80027ec <HAL_GetTick>
 8003402:	0003      	movs	r3, r0
 8003404:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7ff f9f0 	bl	80027ec <HAL_GetTick>
 800340c:	0002      	movs	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e072      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	049b      	lsls	r3, r3, #18
 8003422:	4013      	ands	r3, r2
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x5bc>
 8003426:	e06a      	b.n	80034fe <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800342e:	4917      	ldr	r1, [pc, #92]	; (800348c <HAL_RCC_OscConfig+0x640>)
 8003430:	400a      	ands	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7ff f9da 	bl	80027ec <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7ff f9d5 	bl	80027ec <HAL_GetTick>
 8003442:	0002      	movs	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e057      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	049b      	lsls	r3, r3, #18
 8003458:	4013      	ands	r3, r2
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003462:	490c      	ldr	r1, [pc, #48]	; (8003494 <HAL_RCC_OscConfig+0x648>)
 8003464:	400a      	ands	r2, r1
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	e049      	b.n	80034fe <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d112      	bne.n	8003498 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e044      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	00001388 	.word	0x00001388
 8003484:	efffffff 	.word	0xefffffff
 8003488:	ffbfffff 	.word	0xffbfffff
 800348c:	feffffff 	.word	0xfeffffff
 8003490:	11c1808c 	.word	0x11c1808c
 8003494:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x6bc>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2203      	movs	r2, #3
 80034a2:	401a      	ands	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d126      	bne.n	80034fa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2270      	movs	r2, #112	; 0x70
 80034b0:	401a      	ands	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d11f      	bne.n	80034fa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	23fe      	movs	r3, #254	; 0xfe
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	401a      	ands	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d116      	bne.n	80034fa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	23f8      	movs	r3, #248	; 0xf8
 80034d0:	039b      	lsls	r3, r3, #14
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d10e      	bne.n	80034fa <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	23e0      	movs	r3, #224	; 0xe0
 80034e0:	051b      	lsls	r3, r3, #20
 80034e2:	401a      	ands	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	0f5b      	lsrs	r3, r3, #29
 80034f0:	075a      	lsls	r2, r3, #29
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b008      	add	sp, #32
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000

0800350c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0e9      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003520:	4b76      	ldr	r3, [pc, #472]	; (80036fc <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2207      	movs	r2, #7
 8003526:	4013      	ands	r3, r2
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d91e      	bls.n	800356c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b73      	ldr	r3, [pc, #460]	; (80036fc <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2207      	movs	r2, #7
 8003534:	4393      	bics	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	4b70      	ldr	r3, [pc, #448]	; (80036fc <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003540:	f7ff f954 	bl	80027ec <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003548:	e009      	b.n	800355e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354a:	f7ff f94f 	bl	80027ec <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <HAL_RCC_ClockConfig+0x1f4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0ca      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800355e:	4b67      	ldr	r3, [pc, #412]	; (80036fc <HAL_RCC_ClockConfig+0x1f0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2207      	movs	r2, #7
 8003564:	4013      	ands	r3, r2
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d1ee      	bne.n	800354a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2202      	movs	r2, #2
 8003572:	4013      	ands	r3, r2
 8003574:	d015      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2204      	movs	r2, #4
 800357c:	4013      	ands	r3, r2
 800357e:	d006      	beq.n	800358e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003580:	4b60      	ldr	r3, [pc, #384]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 8003586:	21e0      	movs	r1, #224	; 0xe0
 8003588:	01c9      	lsls	r1, r1, #7
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358e:	4b5d      	ldr	r3, [pc, #372]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a5d      	ldr	r2, [pc, #372]	; (8003708 <HAL_RCC_ClockConfig+0x1fc>)
 8003594:	4013      	ands	r3, r2
 8003596:	0019      	movs	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2201      	movs	r2, #1
 80035a8:	4013      	ands	r3, r2
 80035aa:	d057      	beq.n	800365c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	029b      	lsls	r3, r3, #10
 80035bc:	4013      	ands	r3, r2
 80035be:	d12b      	bne.n	8003618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e097      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035cc:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	049b      	lsls	r3, r3, #18
 80035d4:	4013      	ands	r3, r2
 80035d6:	d11f      	bne.n	8003618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e08b      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e4:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4013      	ands	r3, r2
 80035ee:	d113      	bne.n	8003618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e07f      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d106      	bne.n	800360a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fc:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d108      	bne.n	8003618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e074      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	2202      	movs	r2, #2
 8003610:	4013      	ands	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e06d      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003618:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2207      	movs	r2, #7
 800361e:	4393      	bics	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362c:	f7ff f8de 	bl	80027ec <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003634:	e009      	b.n	800364a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003636:	f7ff f8d9 	bl	80027ec <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <HAL_RCC_ClockConfig+0x1f4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e054      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2238      	movs	r2, #56	; 0x38
 8003650:	401a      	ands	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	429a      	cmp	r2, r3
 800365a:	d1ec      	bne.n	8003636 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800365c:	4b27      	ldr	r3, [pc, #156]	; (80036fc <HAL_RCC_ClockConfig+0x1f0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2207      	movs	r2, #7
 8003662:	4013      	ands	r3, r2
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d21e      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2207      	movs	r2, #7
 8003670:	4393      	bics	r3, r2
 8003672:	0019      	movs	r1, r3
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <HAL_RCC_ClockConfig+0x1f0>)
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800367c:	f7ff f8b6 	bl	80027ec <HAL_GetTick>
 8003680:	0003      	movs	r3, r0
 8003682:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003684:	e009      	b.n	800369a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003686:	f7ff f8b1 	bl	80027ec <HAL_GetTick>
 800368a:	0002      	movs	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <HAL_RCC_ClockConfig+0x1f4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e02c      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800369a:	4b18      	ldr	r3, [pc, #96]	; (80036fc <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2207      	movs	r2, #7
 80036a0:	4013      	ands	r3, r2
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1ee      	bne.n	8003686 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2204      	movs	r2, #4
 80036ae:	4013      	ands	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4a15      	ldr	r2, [pc, #84]	; (800370c <HAL_RCC_ClockConfig+0x200>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80036c6:	f000 f829 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036ca:	0001      	movs	r1, r0
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <HAL_RCC_ClockConfig+0x1f8>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	220f      	movs	r2, #15
 80036d4:	401a      	ands	r2, r3
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_RCC_ClockConfig+0x204>)
 80036d8:	0092      	lsls	r2, r2, #2
 80036da:	58d3      	ldr	r3, [r2, r3]
 80036dc:	221f      	movs	r2, #31
 80036de:	4013      	ands	r3, r2
 80036e0:	000a      	movs	r2, r1
 80036e2:	40da      	lsrs	r2, r3
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_ClockConfig+0x208>)
 80036e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_ClockConfig+0x20c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff f821 	bl	8002734 <HAL_InitTick>
 80036f2:	0003      	movs	r3, r0
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b004      	add	sp, #16
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40022000 	.word	0x40022000
 8003700:	00001388 	.word	0x00001388
 8003704:	40021000 	.word	0x40021000
 8003708:	fffff0ff 	.word	0xfffff0ff
 800370c:	ffff8fff 	.word	0xffff8fff
 8003710:	08007e64 	.word	0x08007e64
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003722:	4b3c      	ldr	r3, [pc, #240]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2238      	movs	r2, #56	; 0x38
 8003728:	4013      	ands	r3, r2
 800372a:	d10f      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800372c:	4b39      	ldr	r3, [pc, #228]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0adb      	lsrs	r3, r3, #11
 8003732:	2207      	movs	r2, #7
 8003734:	4013      	ands	r3, r2
 8003736:	2201      	movs	r2, #1
 8003738:	409a      	lsls	r2, r3
 800373a:	0013      	movs	r3, r2
 800373c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	4835      	ldr	r0, [pc, #212]	; (8003818 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003742:	f7fc fcf1 	bl	8000128 <__udivsi3>
 8003746:	0003      	movs	r3, r0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e05d      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800374c:	4b31      	ldr	r3, [pc, #196]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2238      	movs	r2, #56	; 0x38
 8003752:	4013      	ands	r3, r2
 8003754:	2b08      	cmp	r3, #8
 8003756:	d102      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003758:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_RCC_GetSysClockFreq+0x100>)
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e054      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2238      	movs	r2, #56	; 0x38
 8003764:	4013      	ands	r3, r2
 8003766:	2b10      	cmp	r3, #16
 8003768:	d138      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800376a:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2203      	movs	r2, #3
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	2207      	movs	r2, #7
 800377c:	4013      	ands	r3, r2
 800377e:	3301      	adds	r3, #1
 8003780:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d10d      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	4824      	ldr	r0, [pc, #144]	; (800381c <HAL_RCC_GetSysClockFreq+0x100>)
 800378c:	f7fc fccc 	bl	8000128 <__udivsi3>
 8003790:	0003      	movs	r3, r0
 8003792:	0019      	movs	r1, r3
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	227f      	movs	r2, #127	; 0x7f
 800379c:	4013      	ands	r3, r2
 800379e:	434b      	muls	r3, r1
 80037a0:	617b      	str	r3, [r7, #20]
        break;
 80037a2:	e00d      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	481c      	ldr	r0, [pc, #112]	; (8003818 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037a8:	f7fc fcbe 	bl	8000128 <__udivsi3>
 80037ac:	0003      	movs	r3, r0
 80037ae:	0019      	movs	r1, r3
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	227f      	movs	r2, #127	; 0x7f
 80037b8:	4013      	ands	r3, r2
 80037ba:	434b      	muls	r3, r1
 80037bc:	617b      	str	r3, [r7, #20]
        break;
 80037be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0f5b      	lsrs	r3, r3, #29
 80037c6:	2207      	movs	r2, #7
 80037c8:	4013      	ands	r3, r2
 80037ca:	3301      	adds	r3, #1
 80037cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	6978      	ldr	r0, [r7, #20]
 80037d2:	f7fc fca9 	bl	8000128 <__udivsi3>
 80037d6:	0003      	movs	r3, r0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	e015      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2238      	movs	r2, #56	; 0x38
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d103      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2238      	movs	r2, #56	; 0x38
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b18      	cmp	r3, #24
 80037fa:	d103      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037fc:	23fa      	movs	r3, #250	; 0xfa
 80037fe:	01db      	lsls	r3, r3, #7
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	e001      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003808:	693b      	ldr	r3, [r7, #16]
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b006      	add	sp, #24
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40021000 	.word	0x40021000
 8003818:	00f42400 	.word	0x00f42400
 800381c:	007a1200 	.word	0x007a1200

08003820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <HAL_RCC_GetHCLKFreq+0x10>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	20000000 	.word	0x20000000

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003834:	b5b0      	push	{r4, r5, r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003838:	f7ff fff2 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 800383c:	0004      	movs	r4, r0
 800383e:	f7ff faf9 	bl	8002e34 <LL_RCC_GetAPB1Prescaler>
 8003842:	0003      	movs	r3, r0
 8003844:	0b1a      	lsrs	r2, r3, #12
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	58d3      	ldr	r3, [r2, r3]
 800384c:	221f      	movs	r2, #31
 800384e:	4013      	ands	r3, r2
 8003850:	40dc      	lsrs	r4, r3
 8003852:	0023      	movs	r3, r4
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	bdb0      	pop	{r4, r5, r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	08007ea4 	.word	0x08007ea4

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003868:	2313      	movs	r3, #19
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003870:	2312      	movs	r3, #18
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	029b      	lsls	r3, r3, #10
 8003880:	4013      	ands	r3, r2
 8003882:	d100      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003884:	e0ad      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2011      	movs	r0, #17
 8003888:	183b      	adds	r3, r7, r0
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	055b      	lsls	r3, r3, #21
 8003896:	4013      	ands	r3, r2
 8003898:	d110      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	4b44      	ldr	r3, [pc, #272]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800389c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800389e:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038a0:	2180      	movs	r1, #128	; 0x80
 80038a2:	0549      	lsls	r1, r1, #21
 80038a4:	430a      	orrs	r2, r1
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80038a8:	4b40      	ldr	r3, [pc, #256]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	055b      	lsls	r3, r3, #21
 80038b0:	4013      	ands	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b6:	183b      	adds	r3, r7, r0
 80038b8:	2201      	movs	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038bc:	4b3c      	ldr	r3, [pc, #240]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	0049      	lsls	r1, r1, #1
 80038c6:	430a      	orrs	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ca:	f7fe ff8f 	bl	80027ec <HAL_GetTick>
 80038ce:	0003      	movs	r3, r0
 80038d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d2:	e00b      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fe ff8a 	bl	80027ec <HAL_GetTick>
 80038d8:	0002      	movs	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d904      	bls.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80038e2:	2313      	movs	r3, #19
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	2203      	movs	r2, #3
 80038e8:	701a      	strb	r2, [r3, #0]
        break;
 80038ea:	e005      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4013      	ands	r3, r2
 80038f6:	d0ed      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80038f8:	2313      	movs	r3, #19
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d15e      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003902:	4b2a      	ldr	r3, [pc, #168]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003906:	23c0      	movs	r3, #192	; 0xc0
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4013      	ands	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d019      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	429a      	cmp	r2, r3
 800391c:	d014      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003924:	4013      	ands	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800392a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	0249      	lsls	r1, r1, #9
 8003932:	430a      	orrs	r2, r1
 8003934:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003938:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800393c:	491e      	ldr	r1, [pc, #120]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800393e:	400a      	ands	r2, r1
 8003940:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2201      	movs	r2, #1
 800394c:	4013      	ands	r3, r2
 800394e:	d016      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe ff4c 	bl	80027ec <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003958:	e00c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe ff47 	bl	80027ec <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	4a15      	ldr	r2, [pc, #84]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d904      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800396a:	2313      	movs	r3, #19
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2203      	movs	r2, #3
 8003970:	701a      	strb	r2, [r3, #0]
            break;
 8003972:	e004      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	2202      	movs	r2, #2
 800397a:	4013      	ands	r3, r2
 800397c:	d0ed      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800397e:	2313      	movs	r3, #19
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800398e:	4013      	ands	r3, r2
 8003990:	0019      	movs	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003998:	430a      	orrs	r2, r1
 800399a:	65da      	str	r2, [r3, #92]	; 0x5c
 800399c:	e016      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800399e:	2312      	movs	r3, #18
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	2213      	movs	r2, #19
 80039a4:	18ba      	adds	r2, r7, r2
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e00f      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
 80039b4:	fffffcff 	.word	0xfffffcff
 80039b8:	fffeffff 	.word	0xfffeffff
 80039bc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	2312      	movs	r3, #18
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	2213      	movs	r2, #19
 80039c6:	18ba      	adds	r2, r7, r2
 80039c8:	7812      	ldrb	r2, [r2, #0]
 80039ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039cc:	2311      	movs	r3, #17
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4bb6      	ldr	r3, [pc, #728]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039da:	4bb5      	ldr	r3, [pc, #724]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039dc:	49b5      	ldr	r1, [pc, #724]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039de:	400a      	ands	r2, r1
 80039e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2201      	movs	r2, #1
 80039e8:	4013      	ands	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ec:	4bb0      	ldr	r3, [pc, #704]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	2203      	movs	r2, #3
 80039f2:	4393      	bics	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4bad      	ldr	r3, [pc, #692]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2202      	movs	r2, #2
 8003a06:	4013      	ands	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a0a:	4ba9      	ldr	r3, [pc, #676]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	220c      	movs	r2, #12
 8003a10:	4393      	bics	r3, r2
 8003a12:	0019      	movs	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	4ba5      	ldr	r3, [pc, #660]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2204      	movs	r2, #4
 8003a24:	4013      	ands	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a28:	4ba1      	ldr	r3, [pc, #644]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	2230      	movs	r2, #48	; 0x30
 8003a2e:	4393      	bics	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	4b9e      	ldr	r3, [pc, #632]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2210      	movs	r2, #16
 8003a42:	4013      	ands	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a46:	4b9a      	ldr	r3, [pc, #616]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	4a9b      	ldr	r2, [pc, #620]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	4b96      	ldr	r3, [pc, #600]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a56:	430a      	orrs	r2, r1
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	015b      	lsls	r3, r3, #5
 8003a62:	4013      	ands	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003a66:	4b92      	ldr	r3, [pc, #584]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	4a94      	ldr	r2, [pc, #592]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	4b8e      	ldr	r3, [pc, #568]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a76:	430a      	orrs	r2, r1
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4013      	ands	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a86:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	4a8d      	ldr	r2, [pc, #564]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a94:	4b86      	ldr	r3, [pc, #536]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aa6:	4b82      	ldr	r3, [pc, #520]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	4a86      	ldr	r2, [pc, #536]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	4b7e      	ldr	r3, [pc, #504]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac4:	4b7a      	ldr	r3, [pc, #488]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac8:	4a7f      	ldr	r2, [pc, #508]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	0019      	movs	r1, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	4b77      	ldr	r3, [pc, #476]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2240      	movs	r2, #64	; 0x40
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ae2:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	4a79      	ldr	r2, [pc, #484]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	0019      	movs	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	4b6f      	ldr	r3, [pc, #444]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003af2:	430a      	orrs	r2, r1
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	01db      	lsls	r3, r3, #7
 8003afe:	4013      	ands	r3, r2
 8003b00:	d015      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b02:	4b6b      	ldr	r3, [pc, #428]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	0899      	lsrs	r1, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0e:	4b68      	ldr	r3, [pc, #416]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b10:	430a      	orrs	r2, r1
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	05db      	lsls	r3, r3, #23
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b20:	4b63      	ldr	r3, [pc, #396]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	0249      	lsls	r1, r1, #9
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	031b      	lsls	r3, r3, #12
 8003b36:	4013      	ands	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	4393      	bics	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	039b      	lsls	r3, r3, #14
 8003b56:	4013      	ands	r3, r2
 8003b58:	d016      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b5a:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	4a5c      	ldr	r2, [pc, #368]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	0019      	movs	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b68:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	03db      	lsls	r3, r3, #15
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d106      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b7a:	4b4d      	ldr	r3, [pc, #308]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	0449      	lsls	r1, r1, #17
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	03db      	lsls	r3, r3, #15
 8003b90:	4013      	ands	r3, r2
 8003b92:	d016      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b94:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	4a4e      	ldr	r2, [pc, #312]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba2:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	045b      	lsls	r3, r3, #17
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bb4:	4b3e      	ldr	r3, [pc, #248]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	0449      	lsls	r1, r1, #17
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d014      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4393      	bics	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bea:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	0249      	lsls	r1, r1, #9
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	019b      	lsls	r3, r3, #6
 8003c00:	4013      	ands	r3, r2
 8003c02:	d014      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c04:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	220c      	movs	r2, #12
 8003c0a:	4393      	bics	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c14:	430a      	orrs	r2, r1
 8003c16:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c20:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	0249      	lsls	r1, r1, #9
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	045b      	lsls	r3, r3, #17
 8003c36:	4013      	ands	r3, r2
 8003c38:	d016      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	019b      	lsls	r3, r3, #6
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d106      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	0449      	lsls	r1, r1, #17
 8003c64:	430a      	orrs	r2, r1
 8003c66:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	049b      	lsls	r3, r3, #18
 8003c70:	4013      	ands	r3, r2
 8003c72:	d016      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c84:	430a      	orrs	r2, r1
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	0449      	lsls	r1, r1, #17
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ca2:	2312      	movs	r3, #18
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	781b      	ldrb	r3, [r3, #0]
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b006      	add	sp, #24
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	efffffff 	.word	0xefffffff
 8003cb8:	fffff3ff 	.word	0xfffff3ff
 8003cbc:	fffffcff 	.word	0xfffffcff
 8003cc0:	fff3ffff 	.word	0xfff3ffff
 8003cc4:	ffcfffff 	.word	0xffcfffff
 8003cc8:	ffffcfff 	.word	0xffffcfff
 8003ccc:	ffff3fff 	.word	0xffff3fff
 8003cd0:	ffbfffff 	.word	0xffbfffff
 8003cd4:	feffffff 	.word	0xfeffffff

08003cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e0a8      	b.n	8003e3c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	2382      	movs	r3, #130	; 0x82
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d009      	beq.n	8003d12 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	61da      	str	r2, [r3, #28]
 8003d04:	e005      	b.n	8003d12 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	225d      	movs	r2, #93	; 0x5d
 8003d1c:	5c9b      	ldrb	r3, [r3, r2]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d107      	bne.n	8003d34 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	225c      	movs	r2, #92	; 0x5c
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fe fb6e 	bl	8002410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	225d      	movs	r2, #93	; 0x5d
 8003d38:	2102      	movs	r1, #2
 8003d3a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	438a      	bics	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	23e0      	movs	r3, #224	; 0xe0
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d902      	bls.n	8003d5e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e002      	b.n	8003d64 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	015b      	lsls	r3, r3, #5
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	23f0      	movs	r3, #240	; 0xf0
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d008      	beq.n	8003d82 <HAL_SPI_Init+0xaa>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	23e0      	movs	r3, #224	; 0xe0
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	2382      	movs	r3, #130	; 0x82
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6899      	ldr	r1, [r3, #8]
 8003d90:	2384      	movs	r3, #132	; 0x84
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	400b      	ands	r3, r1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	400b      	ands	r3, r1
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2101      	movs	r1, #1
 8003da8:	400b      	ands	r3, r1
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6999      	ldr	r1, [r3, #24]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	400b      	ands	r3, r1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	2138      	movs	r1, #56	; 0x38
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	400b      	ands	r3, r1
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	0011      	movs	r1, r2
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	2204      	movs	r2, #4
 8003de8:	401a      	ands	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	2110      	movs	r1, #16
 8003df0:	400b      	ands	r3, r1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	2108      	movs	r1, #8
 8003dfa:	400b      	ands	r3, r1
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68d9      	ldr	r1, [r3, #12]
 8003e02:	23f0      	movs	r3, #240	; 0xf0
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	400b      	ands	r3, r1
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	015b      	lsls	r3, r3, #5
 8003e12:	401a      	ands	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4907      	ldr	r1, [pc, #28]	; (8003e44 <HAL_SPI_Init+0x16c>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	225d      	movs	r2, #93	; 0x5d
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	fffff7ff 	.word	0xfffff7ff

08003e48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	1dbb      	adds	r3, r7, #6
 8003e56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e58:	231f      	movs	r3, #31
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	225c      	movs	r2, #92	; 0x5c
 8003e64:	5c9b      	ldrb	r3, [r3, r2]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_SPI_Transmit+0x26>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e147      	b.n	80040fe <HAL_SPI_Transmit+0x2b6>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	225c      	movs	r2, #92	; 0x5c
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e76:	f7fe fcb9 	bl	80027ec <HAL_GetTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e7e:	2316      	movs	r3, #22
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	1dba      	adds	r2, r7, #6
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	225d      	movs	r2, #93	; 0x5d
 8003e8c:	5c9b      	ldrb	r3, [r3, r2]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d004      	beq.n	8003e9e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e94:	231f      	movs	r3, #31
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2202      	movs	r2, #2
 8003e9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e9c:	e128      	b.n	80040f0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_SPI_Transmit+0x64>
 8003ea4:	1dbb      	adds	r3, r7, #6
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003eac:	231f      	movs	r3, #31
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003eb4:	e11c      	b.n	80040f0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	225d      	movs	r2, #93	; 0x5d
 8003eba:	2103      	movs	r1, #3
 8003ebc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1dba      	adds	r2, r7, #6
 8003ece:	8812      	ldrh	r2, [r2, #0]
 8003ed0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1dba      	adds	r2, r7, #6
 8003ed6:	8812      	ldrh	r2, [r2, #0]
 8003ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2244      	movs	r2, #68	; 0x44
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2246      	movs	r2, #70	; 0x46
 8003eec:	2100      	movs	r1, #0
 8003eee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d110      	bne.n	8003f2a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2140      	movs	r1, #64	; 0x40
 8003f14:	438a      	bics	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2180      	movs	r1, #128	; 0x80
 8003f24:	01c9      	lsls	r1, r1, #7
 8003f26:	430a      	orrs	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2240      	movs	r2, #64	; 0x40
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d007      	beq.n	8003f48 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2140      	movs	r1, #64	; 0x40
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	23e0      	movs	r3, #224	; 0xe0
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d952      	bls.n	8003ffa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <HAL_SPI_Transmit+0x11e>
 8003f5c:	2316      	movs	r3, #22
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d143      	bne.n	8003fee <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	881a      	ldrh	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	1c9a      	adds	r2, r3, #2
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f8a:	e030      	b.n	8003fee <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2202      	movs	r2, #2
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d112      	bne.n	8003fc0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fbe:	e016      	b.n	8003fee <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc0:	f7fe fc14 	bl	80027ec <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d802      	bhi.n	8003fd6 <HAL_SPI_Transmit+0x18e>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	d102      	bne.n	8003fdc <HAL_SPI_Transmit+0x194>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003fdc:	231f      	movs	r3, #31
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	225d      	movs	r2, #93	; 0x5d
 8003fe8:	2101      	movs	r1, #1
 8003fea:	5499      	strb	r1, [r3, r2]
          goto error;
 8003fec:	e080      	b.n	80040f0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1c9      	bne.n	8003f8c <HAL_SPI_Transmit+0x144>
 8003ff8:	e053      	b.n	80040a2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <HAL_SPI_Transmit+0x1c4>
 8004002:	2316      	movs	r3, #22
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d145      	bne.n	8004098 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	7812      	ldrb	r2, [r2, #0]
 8004018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004032:	e031      	b.n	8004098 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d113      	bne.n	800406a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004068:	e016      	b.n	8004098 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406a:	f7fe fbbf 	bl	80027ec <HAL_GetTick>
 800406e:	0002      	movs	r2, r0
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d802      	bhi.n	8004080 <HAL_SPI_Transmit+0x238>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	d102      	bne.n	8004086 <HAL_SPI_Transmit+0x23e>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004086:	231f      	movs	r3, #31
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	2203      	movs	r2, #3
 800408c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	225d      	movs	r2, #93	; 0x5d
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]
          goto error;
 8004096:	e02b      	b.n	80040f0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1c8      	bne.n	8004034 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f000 fcef 	bl	8004a8c <SPI_EndRxTxTransaction>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80040de:	231f      	movs	r3, #31
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e003      	b.n	80040f0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	225d      	movs	r2, #93	; 0x5d
 80040ec:	2101      	movs	r1, #1
 80040ee:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	225c      	movs	r2, #92	; 0x5c
 80040f4:	2100      	movs	r1, #0
 80040f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040f8:	231f      	movs	r3, #31
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	781b      	ldrb	r3, [r3, #0]
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b008      	add	sp, #32
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	1dbb      	adds	r3, r7, #6
 8004116:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004118:	2117      	movs	r1, #23
 800411a:	187b      	adds	r3, r7, r1
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	225d      	movs	r2, #93	; 0x5d
 8004124:	5c9b      	ldrb	r3, [r3, r2]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d003      	beq.n	8004134 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800412c:	187b      	adds	r3, r7, r1
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
    goto error;
 8004132:	e12b      	b.n	800438c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	2382      	movs	r3, #130	; 0x82
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	429a      	cmp	r2, r3
 800413e:	d113      	bne.n	8004168 <HAL_SPI_Receive+0x60>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10f      	bne.n	8004168 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	225d      	movs	r2, #93	; 0x5d
 800414c:	2104      	movs	r1, #4
 800414e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004150:	1dbb      	adds	r3, r7, #6
 8004152:	881c      	ldrh	r4, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	0023      	movs	r3, r4
 8004160:	f000 f924 	bl	80043ac <HAL_SPI_TransmitReceive>
 8004164:	0003      	movs	r3, r0
 8004166:	e118      	b.n	800439a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	225c      	movs	r2, #92	; 0x5c
 800416c:	5c9b      	ldrb	r3, [r3, r2]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_SPI_Receive+0x6e>
 8004172:	2302      	movs	r3, #2
 8004174:	e111      	b.n	800439a <HAL_SPI_Receive+0x292>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	225c      	movs	r2, #92	; 0x5c
 800417a:	2101      	movs	r1, #1
 800417c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417e:	f7fe fb35 	bl	80027ec <HAL_GetTick>
 8004182:	0003      	movs	r3, r0
 8004184:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_SPI_Receive+0x8c>
 800418c:	1dbb      	adds	r3, r7, #6
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8004194:	2317      	movs	r3, #23
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
    goto error;
 800419c:	e0f6      	b.n	800438c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	225d      	movs	r2, #93	; 0x5d
 80041a2:	2104      	movs	r1, #4
 80041a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1dba      	adds	r2, r7, #6
 80041b6:	2144      	movs	r1, #68	; 0x44
 80041b8:	8812      	ldrh	r2, [r2, #0]
 80041ba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1dba      	adds	r2, r7, #6
 80041c0:	2146      	movs	r1, #70	; 0x46
 80041c2:	8812      	ldrh	r2, [r2, #0]
 80041c4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	23e0      	movs	r3, #224	; 0xe0
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d908      	bls.n	8004202 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	496a      	ldr	r1, [pc, #424]	; (80043a4 <HAL_SPI_Receive+0x29c>)
 80041fc:	400a      	ands	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	e008      	b.n	8004214 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	0149      	lsls	r1, r1, #5
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	429a      	cmp	r2, r3
 800421e:	d10f      	bne.n	8004240 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2140      	movs	r1, #64	; 0x40
 800422c:	438a      	bics	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	495b      	ldr	r1, [pc, #364]	; (80043a8 <HAL_SPI_Receive+0x2a0>)
 800423c:	400a      	ands	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2240      	movs	r2, #64	; 0x40
 8004248:	4013      	ands	r3, r2
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d007      	beq.n	800425e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	23e0      	movs	r3, #224	; 0xe0
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	429a      	cmp	r2, r3
 8004268:	d900      	bls.n	800426c <HAL_SPI_Receive+0x164>
 800426a:	e071      	b.n	8004350 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800426c:	e035      	b.n	80042da <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2201      	movs	r2, #1
 8004276:	4013      	ands	r3, r2
 8004278:	2b01      	cmp	r3, #1
 800427a:	d117      	bne.n	80042ac <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	001a      	movs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2246      	movs	r2, #70	; 0x46
 800429c:	5a9b      	ldrh	r3, [r3, r2]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b299      	uxth	r1, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2246      	movs	r2, #70	; 0x46
 80042a8:	5299      	strh	r1, [r3, r2]
 80042aa:	e016      	b.n	80042da <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ac:	f7fe fa9e 	bl	80027ec <HAL_GetTick>
 80042b0:	0002      	movs	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d802      	bhi.n	80042c2 <HAL_SPI_Receive+0x1ba>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	3301      	adds	r3, #1
 80042c0:	d102      	bne.n	80042c8 <HAL_SPI_Receive+0x1c0>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80042c8:	2317      	movs	r3, #23
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	2203      	movs	r2, #3
 80042ce:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	225d      	movs	r2, #93	; 0x5d
 80042d4:	2101      	movs	r1, #1
 80042d6:	5499      	strb	r1, [r3, r2]
          goto error;
 80042d8:	e058      	b.n	800438c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2246      	movs	r2, #70	; 0x46
 80042de:	5a9b      	ldrh	r3, [r3, r2]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1c3      	bne.n	800426e <HAL_SPI_Receive+0x166>
 80042e6:	e039      	b.n	800435c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2201      	movs	r2, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d115      	bne.n	8004322 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	b292      	uxth	r2, r2
 8004302:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2246      	movs	r2, #70	; 0x46
 8004312:	5a9b      	ldrh	r3, [r3, r2]
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b299      	uxth	r1, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2246      	movs	r2, #70	; 0x46
 800431e:	5299      	strh	r1, [r3, r2]
 8004320:	e016      	b.n	8004350 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004322:	f7fe fa63 	bl	80027ec <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d802      	bhi.n	8004338 <HAL_SPI_Receive+0x230>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	d102      	bne.n	800433e <HAL_SPI_Receive+0x236>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d108      	bne.n	8004350 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800433e:	2317      	movs	r3, #23
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	2203      	movs	r2, #3
 8004344:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	225d      	movs	r2, #93	; 0x5d
 800434a:	2101      	movs	r1, #1
 800434c:	5499      	strb	r1, [r3, r2]
          goto error;
 800434e:	e01d      	b.n	800438c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2246      	movs	r2, #70	; 0x46
 8004354:	5a9b      	ldrh	r3, [r3, r2]
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1c5      	bne.n	80042e8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	0018      	movs	r0, r3
 8004364:	f000 fb34 	bl	80049d0 <SPI_EndRxTransaction>
 8004368:	1e03      	subs	r3, r0, #0
 800436a:	d002      	beq.n	8004372 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800437a:	2317      	movs	r3, #23
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e003      	b.n	800438c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	225d      	movs	r2, #93	; 0x5d
 8004388:	2101      	movs	r1, #1
 800438a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	225c      	movs	r2, #92	; 0x5c
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004394:	2317      	movs	r3, #23
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b007      	add	sp, #28
 80043a0:	bd90      	pop	{r4, r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	ffffefff 	.word	0xffffefff
 80043a8:	ffffbfff 	.word	0xffffbfff

080043ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	001a      	movs	r2, r3
 80043ba:	1cbb      	adds	r3, r7, #2
 80043bc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043be:	2301      	movs	r3, #1
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043c2:	2323      	movs	r3, #35	; 0x23
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	225c      	movs	r2, #92	; 0x5c
 80043ce:	5c9b      	ldrb	r3, [r3, r2]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x2c>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e1c4      	b.n	8004762 <HAL_SPI_TransmitReceive+0x3b6>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	225c      	movs	r2, #92	; 0x5c
 80043dc:	2101      	movs	r1, #1
 80043de:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043e0:	f7fe fa04 	bl	80027ec <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043e8:	201b      	movs	r0, #27
 80043ea:	183b      	adds	r3, r7, r0
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	215d      	movs	r1, #93	; 0x5d
 80043f0:	5c52      	ldrb	r2, [r2, r1]
 80043f2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80043fa:	2312      	movs	r3, #18
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	1cba      	adds	r2, r7, #2
 8004400:	8812      	ldrh	r2, [r2, #0]
 8004402:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004404:	183b      	adds	r3, r7, r0
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d011      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x84>
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	2382      	movs	r3, #130	; 0x82
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	429a      	cmp	r2, r3
 8004414:	d107      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x7a>
 800441e:	183b      	adds	r3, r7, r0
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b04      	cmp	r3, #4
 8004424:	d004      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004426:	2323      	movs	r3, #35	; 0x23
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	2202      	movs	r2, #2
 800442c:	701a      	strb	r2, [r3, #0]
    goto error;
 800442e:	e191      	b.n	8004754 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x98>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x98>
 800443c:	1cbb      	adds	r3, r7, #2
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004444:	2323      	movs	r3, #35	; 0x23
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
    goto error;
 800444c:	e182      	b.n	8004754 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	225d      	movs	r2, #93	; 0x5d
 8004452:	5c9b      	ldrb	r3, [r3, r2]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b04      	cmp	r3, #4
 8004458:	d003      	beq.n	8004462 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	225d      	movs	r2, #93	; 0x5d
 800445e:	2105      	movs	r1, #5
 8004460:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1cba      	adds	r2, r7, #2
 8004472:	2146      	movs	r1, #70	; 0x46
 8004474:	8812      	ldrh	r2, [r2, #0]
 8004476:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1cba      	adds	r2, r7, #2
 800447c:	2144      	movs	r1, #68	; 0x44
 800447e:	8812      	ldrh	r2, [r2, #0]
 8004480:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1cba      	adds	r2, r7, #2
 800448c:	8812      	ldrh	r2, [r2, #0]
 800448e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1cba      	adds	r2, r7, #2
 8004494:	8812      	ldrh	r2, [r2, #0]
 8004496:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	23e0      	movs	r3, #224	; 0xe0
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d908      	bls.n	80044c2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	49ac      	ldr	r1, [pc, #688]	; (800476c <HAL_SPI_TransmitReceive+0x3c0>)
 80044bc:	400a      	ands	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	e008      	b.n	80044d4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	0149      	lsls	r1, r1, #5
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2240      	movs	r2, #64	; 0x40
 80044dc:	4013      	ands	r3, r2
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d007      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2140      	movs	r1, #64	; 0x40
 80044ee:	430a      	orrs	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	23e0      	movs	r3, #224	; 0xe0
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d800      	bhi.n	8004500 <HAL_SPI_TransmitReceive+0x154>
 80044fe:	e083      	b.n	8004608 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_SPI_TransmitReceive+0x168>
 8004508:	2312      	movs	r3, #18
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d000      	beq.n	8004514 <HAL_SPI_TransmitReceive+0x168>
 8004512:	e06d      	b.n	80045f0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004538:	e05a      	b.n	80045f0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2202      	movs	r2, #2
 8004542:	4013      	ands	r3, r2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d11b      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x1d4>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_SPI_TransmitReceive+0x1d4>
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	2b01      	cmp	r3, #1
 8004556:	d113      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	881a      	ldrh	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2201      	movs	r2, #1
 8004588:	4013      	ands	r3, r2
 800458a:	2b01      	cmp	r3, #1
 800458c:	d11c      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x21c>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2246      	movs	r2, #70	; 0x46
 8004592:	5a9b      	ldrh	r3, [r3, r2]
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	b292      	uxth	r2, r2
 80045a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	1c9a      	adds	r2, r3, #2
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2246      	movs	r2, #70	; 0x46
 80045b6:	5a9b      	ldrh	r3, [r3, r2]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b299      	uxth	r1, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2246      	movs	r2, #70	; 0x46
 80045c2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045c4:	2301      	movs	r3, #1
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045c8:	f7fe f910 	bl	80027ec <HAL_GetTick>
 80045cc:	0002      	movs	r2, r0
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d80b      	bhi.n	80045f0 <HAL_SPI_TransmitReceive+0x244>
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	3301      	adds	r3, #1
 80045dc:	d008      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80045de:	2323      	movs	r3, #35	; 0x23
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	2203      	movs	r2, #3
 80045e4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	225d      	movs	r2, #93	; 0x5d
 80045ea:	2101      	movs	r1, #1
 80045ec:	5499      	strb	r1, [r3, r2]
        goto error;
 80045ee:	e0b1      	b.n	8004754 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d19f      	bne.n	800453a <HAL_SPI_TransmitReceive+0x18e>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2246      	movs	r2, #70	; 0x46
 80045fe:	5a9b      	ldrh	r3, [r3, r2]
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d199      	bne.n	800453a <HAL_SPI_TransmitReceive+0x18e>
 8004606:	e089      	b.n	800471c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_SPI_TransmitReceive+0x270>
 8004610:	2312      	movs	r3, #18
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d000      	beq.n	800461c <HAL_SPI_TransmitReceive+0x270>
 800461a:	e074      	b.n	8004706 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004642:	e060      	b.n	8004706 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2202      	movs	r2, #2
 800464c:	4013      	ands	r3, r2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d11c      	bne.n	800468c <HAL_SPI_TransmitReceive+0x2e0>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <HAL_SPI_TransmitReceive+0x2e0>
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	2b01      	cmp	r3, #1
 8004660:	d114      	bne.n	800468c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2201      	movs	r2, #1
 8004694:	4013      	ands	r3, r2
 8004696:	2b01      	cmp	r3, #1
 8004698:	d11e      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x32c>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2246      	movs	r2, #70	; 0x46
 800469e:	5a9b      	ldrh	r3, [r3, r2]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d018      	beq.n	80046d8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	001a      	movs	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	7812      	ldrb	r2, [r2, #0]
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2246      	movs	r2, #70	; 0x46
 80046c6:	5a9b      	ldrh	r3, [r3, r2]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b299      	uxth	r1, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2246      	movs	r2, #70	; 0x46
 80046d2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d4:	2301      	movs	r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046d8:	f7fe f888 	bl	80027ec <HAL_GetTick>
 80046dc:	0002      	movs	r2, r0
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d802      	bhi.n	80046ee <HAL_SPI_TransmitReceive+0x342>
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	3301      	adds	r3, #1
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x348>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d108      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80046f4:	2323      	movs	r3, #35	; 0x23
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2203      	movs	r2, #3
 80046fa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	225d      	movs	r2, #93	; 0x5d
 8004700:	2101      	movs	r1, #1
 8004702:	5499      	strb	r1, [r3, r2]
        goto error;
 8004704:	e026      	b.n	8004754 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d199      	bne.n	8004644 <HAL_SPI_TransmitReceive+0x298>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2246      	movs	r2, #70	; 0x46
 8004714:	5a9b      	ldrh	r3, [r3, r2]
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d193      	bne.n	8004644 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	0018      	movs	r0, r3
 8004724:	f000 f9b2 	bl	8004a8c <SPI_EndRxTxTransaction>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d006      	beq.n	800473a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800472c:	2323      	movs	r3, #35	; 0x23
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8004742:	2323      	movs	r3, #35	; 0x23
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e003      	b.n	8004754 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	225d      	movs	r2, #93	; 0x5d
 8004750:	2101      	movs	r1, #1
 8004752:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	225c      	movs	r2, #92	; 0x5c
 8004758:	2100      	movs	r1, #0
 800475a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800475c:	2323      	movs	r3, #35	; 0x23
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	781b      	ldrb	r3, [r3, #0]
}
 8004762:	0018      	movs	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	b00a      	add	sp, #40	; 0x28
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	ffffefff 	.word	0xffffefff

08004770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	1dfb      	adds	r3, r7, #7
 800477e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004780:	f7fe f834 	bl	80027ec <HAL_GetTick>
 8004784:	0002      	movs	r2, r0
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	18d3      	adds	r3, r2, r3
 800478e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004790:	f7fe f82c 	bl	80027ec <HAL_GetTick>
 8004794:	0003      	movs	r3, r0
 8004796:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004798:	4b3a      	ldr	r3, [pc, #232]	; (8004884 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	015b      	lsls	r3, r3, #5
 800479e:	0d1b      	lsrs	r3, r3, #20
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	4353      	muls	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a6:	e058      	b.n	800485a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	d055      	beq.n	800485a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ae:	f7fe f81d 	bl	80027ec <HAL_GetTick>
 80047b2:	0002      	movs	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d902      	bls.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d142      	bne.n	800484a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	21e0      	movs	r1, #224	; 0xe0
 80047d0:	438a      	bics	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	2382      	movs	r3, #130	; 0x82
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	429a      	cmp	r2, r3
 80047de:	d113      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0x98>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d005      	beq.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d107      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2140      	movs	r1, #64	; 0x40
 8004804:	438a      	bics	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	019b      	lsls	r3, r3, #6
 8004810:	429a      	cmp	r2, r3
 8004812:	d110      	bne.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	491a      	ldr	r1, [pc, #104]	; (8004888 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004820:	400a      	ands	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2180      	movs	r1, #128	; 0x80
 8004830:	0189      	lsls	r1, r1, #6
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	225d      	movs	r2, #93	; 0x5d
 800483a:	2101      	movs	r1, #1
 800483c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	225c      	movs	r2, #92	; 0x5c
 8004842:	2100      	movs	r1, #0
 8004844:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e017      	b.n	800487a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3b01      	subs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	425a      	negs	r2, r3
 800486a:	4153      	adcs	r3, r2
 800486c:	b2db      	uxtb	r3, r3
 800486e:	001a      	movs	r2, r3
 8004870:	1dfb      	adds	r3, r7, #7
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d197      	bne.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b008      	add	sp, #32
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	20000000 	.word	0x20000000
 8004888:	ffffdfff 	.word	0xffffdfff

0800488c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800489a:	2317      	movs	r3, #23
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048a2:	f7fd ffa3 	bl	80027ec <HAL_GetTick>
 80048a6:	0002      	movs	r2, r0
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	18d3      	adds	r3, r2, r3
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80048b2:	f7fd ff9b 	bl	80027ec <HAL_GetTick>
 80048b6:	0003      	movs	r3, r0
 80048b8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	0013      	movs	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	00da      	lsls	r2, r3, #3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	0d1b      	lsrs	r3, r3, #20
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	4353      	muls	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048d8:	e068      	b.n	80049ac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	23c0      	movs	r3, #192	; 0xc0
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d10a      	bne.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x6e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d107      	bne.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	2117      	movs	r1, #23
 80048f2:	187b      	adds	r3, r7, r1
 80048f4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048f6:	187b      	adds	r3, r7, r1
 80048f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	d055      	beq.n	80049ac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004900:	f7fd ff74 	bl	80027ec <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490c:	429a      	cmp	r2, r3
 800490e:	d902      	bls.n	8004916 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	2b00      	cmp	r3, #0
 8004914:	d142      	bne.n	800499c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	21e0      	movs	r1, #224	; 0xe0
 8004922:	438a      	bics	r2, r1
 8004924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	2382      	movs	r3, #130	; 0x82
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	429a      	cmp	r2, r3
 8004930:	d113      	bne.n	800495a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	429a      	cmp	r2, r3
 800493c:	d005      	beq.n	800494a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	429a      	cmp	r2, r3
 8004948:	d107      	bne.n	800495a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2140      	movs	r1, #64	; 0x40
 8004956:	438a      	bics	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	429a      	cmp	r2, r3
 8004964:	d110      	bne.n	8004988 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4916      	ldr	r1, [pc, #88]	; (80049cc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004972:	400a      	ands	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	0189      	lsls	r1, r1, #6
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	225d      	movs	r2, #93	; 0x5d
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	225c      	movs	r2, #92	; 0x5c
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e010      	b.n	80049be <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4013      	ands	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d18e      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b00a      	add	sp, #40	; 0x28
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	20000000 	.word	0x20000000
 80049cc:	ffffdfff 	.word	0xffffdfff

080049d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	2382      	movs	r3, #130	; 0x82
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d113      	bne.n	8004a10 <SPI_EndRxTransaction+0x40>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d005      	beq.n	8004a00 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d107      	bne.n	8004a10 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2140      	movs	r1, #64	; 0x40
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	0013      	movs	r3, r2
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	f7ff fea7 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004a22:	1e03      	subs	r3, r0, #0
 8004a24:	d007      	beq.n	8004a36 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e026      	b.n	8004a84 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	2382      	movs	r3, #130	; 0x82
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d11f      	bne.n	8004a82 <SPI_EndRxTransaction+0xb2>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d005      	beq.n	8004a5a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d113      	bne.n	8004a82 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	23c0      	movs	r3, #192	; 0xc0
 8004a5e:	00d9      	lsls	r1, r3, #3
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	0013      	movs	r3, r2
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f7ff ff0f 	bl	800488c <SPI_WaitFifoStateUntilTimeout>
 8004a6e:	1e03      	subs	r3, r0, #0
 8004a70:	d007      	beq.n	8004a82 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a76:	2220      	movs	r2, #32
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e000      	b.n	8004a84 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b004      	add	sp, #16
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	23c0      	movs	r3, #192	; 0xc0
 8004a9c:	0159      	lsls	r1, r3, #5
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	0013      	movs	r3, r2
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f7ff fef0 	bl	800488c <SPI_WaitFifoStateUntilTimeout>
 8004aac:	1e03      	subs	r3, r0, #0
 8004aae:	d007      	beq.n	8004ac0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e027      	b.n	8004b10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	0013      	movs	r3, r2
 8004aca:	2200      	movs	r2, #0
 8004acc:	2180      	movs	r1, #128	; 0x80
 8004ace:	f7ff fe4f 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d007      	beq.n	8004ae6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ada:	2220      	movs	r2, #32
 8004adc:	431a      	orrs	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e014      	b.n	8004b10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	23c0      	movs	r3, #192	; 0xc0
 8004aea:	00d9      	lsls	r1, r3, #3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	0013      	movs	r3, r2
 8004af4:	2200      	movs	r2, #0
 8004af6:	f7ff fec9 	bl	800488c <SPI_WaitFifoStateUntilTimeout>
 8004afa:	1e03      	subs	r3, r0, #0
 8004afc:	d007      	beq.n	8004b0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	2220      	movs	r2, #32
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e000      	b.n	8004b10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b004      	add	sp, #16
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e046      	b.n	8004bb8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2288      	movs	r2, #136	; 0x88
 8004b2e:	589b      	ldr	r3, [r3, r2]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d107      	bne.n	8004b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2284      	movs	r2, #132	; 0x84
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7fd fcb0 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2288      	movs	r2, #136	; 0x88
 8004b48:	2124      	movs	r1, #36	; 0x24
 8004b4a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2101      	movs	r1, #1
 8004b58:	438a      	bics	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 fd0c 	bl	8005584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 f9b2 	bl	8004ed8 <UART_SetConfig>
 8004b74:	0003      	movs	r3, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e01c      	b.n	8004bb8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	490d      	ldr	r1, [pc, #52]	; (8004bc0 <HAL_UART_Init+0xa8>)
 8004b8a:	400a      	ands	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	212a      	movs	r1, #42	; 0x2a
 8004b9a:	438a      	bics	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2101      	movs	r1, #1
 8004baa:	430a      	orrs	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f000 fd9b 	bl	80056ec <UART_CheckIdleState>
 8004bb6:	0003      	movs	r3, r0
}
 8004bb8:	0018      	movs	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	ffffb7ff 	.word	0xffffb7ff

08004bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	1dbb      	adds	r3, r7, #6
 8004bd2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2288      	movs	r2, #136	; 0x88
 8004bd8:	589b      	ldr	r3, [r3, r2]
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d000      	beq.n	8004be0 <HAL_UART_Transmit+0x1c>
 8004bde:	e090      	b.n	8004d02 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_UART_Transmit+0x2a>
 8004be6:	1dbb      	adds	r3, r7, #6
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e088      	b.n	8004d04 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	015b      	lsls	r3, r3, #5
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d109      	bne.n	8004c12 <HAL_UART_Transmit+0x4e>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d001      	beq.n	8004c12 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e078      	b.n	8004d04 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2290      	movs	r2, #144	; 0x90
 8004c16:	2100      	movs	r1, #0
 8004c18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2288      	movs	r2, #136	; 0x88
 8004c1e:	2121      	movs	r1, #33	; 0x21
 8004c20:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c22:	f7fd fde3 	bl	80027ec <HAL_GetTick>
 8004c26:	0003      	movs	r3, r0
 8004c28:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1dba      	adds	r2, r7, #6
 8004c2e:	2154      	movs	r1, #84	; 0x54
 8004c30:	8812      	ldrh	r2, [r2, #0]
 8004c32:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1dba      	adds	r2, r7, #6
 8004c38:	2156      	movs	r1, #86	; 0x56
 8004c3a:	8812      	ldrh	r2, [r2, #0]
 8004c3c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	015b      	lsls	r3, r3, #5
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d108      	bne.n	8004c5c <HAL_UART_Transmit+0x98>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c64:	e030      	b.n	8004cc8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	0013      	movs	r3, r2
 8004c70:	2200      	movs	r2, #0
 8004c72:	2180      	movs	r1, #128	; 0x80
 8004c74:	f000 fde4 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8004c78:	1e03      	subs	r3, r0, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2288      	movs	r2, #136	; 0x88
 8004c80:	2120      	movs	r1, #32
 8004c82:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e03d      	b.n	8004d04 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	001a      	movs	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	05d2      	lsls	r2, r2, #23
 8004c9a:	0dd2      	lsrs	r2, r2, #23
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	e007      	b.n	8004cb6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2256      	movs	r2, #86	; 0x56
 8004cba:	5a9b      	ldrh	r3, [r3, r2]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b299      	uxth	r1, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2256      	movs	r2, #86	; 0x56
 8004cc6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2256      	movs	r2, #86	; 0x56
 8004ccc:	5a9b      	ldrh	r3, [r3, r2]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1c8      	bne.n	8004c66 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	0013      	movs	r3, r2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2140      	movs	r1, #64	; 0x40
 8004ce2:	f000 fdad 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2288      	movs	r2, #136	; 0x88
 8004cee:	2120      	movs	r1, #32
 8004cf0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e006      	b.n	8004d04 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2288      	movs	r2, #136	; 0x88
 8004cfa:	2120      	movs	r1, #32
 8004cfc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e000      	b.n	8004d04 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
  }
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b008      	add	sp, #32
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	1dbb      	adds	r3, r7, #6
 8004d1a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	228c      	movs	r2, #140	; 0x8c
 8004d20:	589b      	ldr	r3, [r3, r2]
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d000      	beq.n	8004d28 <HAL_UART_Receive+0x1c>
 8004d26:	e0d0      	b.n	8004eca <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_UART_Receive+0x2a>
 8004d2e:	1dbb      	adds	r3, r7, #6
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0c8      	b.n	8004ecc <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	2380      	movs	r3, #128	; 0x80
 8004d40:	015b      	lsls	r3, r3, #5
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d109      	bne.n	8004d5a <HAL_UART_Receive+0x4e>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	d001      	beq.n	8004d5a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0b8      	b.n	8004ecc <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2290      	movs	r2, #144	; 0x90
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	228c      	movs	r2, #140	; 0x8c
 8004d66:	2122      	movs	r1, #34	; 0x22
 8004d68:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d70:	f7fd fd3c 	bl	80027ec <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1dba      	adds	r2, r7, #6
 8004d7c:	215c      	movs	r1, #92	; 0x5c
 8004d7e:	8812      	ldrh	r2, [r2, #0]
 8004d80:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1dba      	adds	r2, r7, #6
 8004d86:	215e      	movs	r1, #94	; 0x5e
 8004d88:	8812      	ldrh	r2, [r2, #0]
 8004d8a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	015b      	lsls	r3, r3, #5
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d10d      	bne.n	8004db4 <HAL_UART_Receive+0xa8>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <HAL_UART_Receive+0x9e>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2260      	movs	r2, #96	; 0x60
 8004da4:	494b      	ldr	r1, [pc, #300]	; (8004ed4 <HAL_UART_Receive+0x1c8>)
 8004da6:	5299      	strh	r1, [r3, r2]
 8004da8:	e02e      	b.n	8004e08 <HAL_UART_Receive+0xfc>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2260      	movs	r2, #96	; 0x60
 8004dae:	21ff      	movs	r1, #255	; 0xff
 8004db0:	5299      	strh	r1, [r3, r2]
 8004db2:	e029      	b.n	8004e08 <HAL_UART_Receive+0xfc>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10d      	bne.n	8004dd8 <HAL_UART_Receive+0xcc>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <HAL_UART_Receive+0xc2>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2260      	movs	r2, #96	; 0x60
 8004dc8:	21ff      	movs	r1, #255	; 0xff
 8004dca:	5299      	strh	r1, [r3, r2]
 8004dcc:	e01c      	b.n	8004e08 <HAL_UART_Receive+0xfc>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2260      	movs	r2, #96	; 0x60
 8004dd2:	217f      	movs	r1, #127	; 0x7f
 8004dd4:	5299      	strh	r1, [r3, r2]
 8004dd6:	e017      	b.n	8004e08 <HAL_UART_Receive+0xfc>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	055b      	lsls	r3, r3, #21
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d10d      	bne.n	8004e00 <HAL_UART_Receive+0xf4>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_UART_Receive+0xea>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2260      	movs	r2, #96	; 0x60
 8004df0:	217f      	movs	r1, #127	; 0x7f
 8004df2:	5299      	strh	r1, [r3, r2]
 8004df4:	e008      	b.n	8004e08 <HAL_UART_Receive+0xfc>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2260      	movs	r2, #96	; 0x60
 8004dfa:	213f      	movs	r1, #63	; 0x3f
 8004dfc:	5299      	strh	r1, [r3, r2]
 8004dfe:	e003      	b.n	8004e08 <HAL_UART_Receive+0xfc>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2260      	movs	r2, #96	; 0x60
 8004e04:	2100      	movs	r1, #0
 8004e06:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004e08:	2312      	movs	r3, #18
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	2160      	movs	r1, #96	; 0x60
 8004e10:	5a52      	ldrh	r2, [r2, r1]
 8004e12:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	015b      	lsls	r3, r3, #5
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d108      	bne.n	8004e32 <HAL_UART_Receive+0x126>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e003      	b.n	8004e3a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e3a:	e03a      	b.n	8004eb2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	0013      	movs	r3, r2
 8004e46:	2200      	movs	r2, #0
 8004e48:	2120      	movs	r1, #32
 8004e4a:	f000 fcf9 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8004e4e:	1e03      	subs	r3, r0, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	228c      	movs	r2, #140	; 0x8c
 8004e56:	2120      	movs	r1, #32
 8004e58:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e036      	b.n	8004ecc <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10e      	bne.n	8004e82 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2212      	movs	r2, #18
 8004e6e:	18ba      	adds	r2, r7, r2
 8004e70:	8812      	ldrh	r2, [r2, #0]
 8004e72:	4013      	ands	r3, r2
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	e00e      	b.n	8004ea0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2212      	movs	r2, #18
 8004e8c:	18ba      	adds	r2, r7, r2
 8004e8e:	8812      	ldrh	r2, [r2, #0]
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	4013      	ands	r3, r2
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	225e      	movs	r2, #94	; 0x5e
 8004ea4:	5a9b      	ldrh	r3, [r3, r2]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b299      	uxth	r1, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	225e      	movs	r2, #94	; 0x5e
 8004eb0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	225e      	movs	r2, #94	; 0x5e
 8004eb6:	5a9b      	ldrh	r3, [r3, r2]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1be      	bne.n	8004e3c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	228c      	movs	r2, #140	; 0x8c
 8004ec2:	2120      	movs	r1, #32
 8004ec4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	0018      	movs	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b008      	add	sp, #32
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	000001ff 	.word	0x000001ff

08004ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	b5b0      	push	{r4, r5, r7, lr}
 8004eda:	b090      	sub	sp, #64	; 0x40
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ee0:	231a      	movs	r3, #26
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	19db      	adds	r3, r3, r7
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4ac1      	ldr	r2, [pc, #772]	; (8005210 <UART_SetConfig+0x338>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	0019      	movs	r1, r3
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	430b      	orrs	r3, r1
 8004f18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4abc      	ldr	r2, [pc, #752]	; (8005214 <UART_SetConfig+0x33c>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	0018      	movs	r0, r3
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	68d9      	ldr	r1, [r3, #12]
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	0003      	movs	r3, r0
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4ab6      	ldr	r2, [pc, #728]	; (8005218 <UART_SetConfig+0x340>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d009      	beq.n	8004f58 <UART_SetConfig+0x80>
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4ab4      	ldr	r2, [pc, #720]	; (800521c <UART_SetConfig+0x344>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f54:	4313      	orrs	r3, r2
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4ab0      	ldr	r2, [pc, #704]	; (8005220 <UART_SetConfig+0x348>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	0019      	movs	r1, r3
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	220f      	movs	r2, #15
 8004f76:	4393      	bics	r3, r2
 8004f78:	0018      	movs	r0, r3
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	0003      	movs	r3, r0
 8004f84:	430b      	orrs	r3, r1
 8004f86:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4aa5      	ldr	r2, [pc, #660]	; (8005224 <UART_SetConfig+0x34c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d131      	bne.n	8004ff6 <UART_SetConfig+0x11e>
 8004f92:	4ba5      	ldr	r3, [pc, #660]	; (8005228 <UART_SetConfig+0x350>)
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	2203      	movs	r2, #3
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d01d      	beq.n	8004fda <UART_SetConfig+0x102>
 8004f9e:	d823      	bhi.n	8004fe8 <UART_SetConfig+0x110>
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d00c      	beq.n	8004fbe <UART_SetConfig+0xe6>
 8004fa4:	d820      	bhi.n	8004fe8 <UART_SetConfig+0x110>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <UART_SetConfig+0xd8>
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d00e      	beq.n	8004fcc <UART_SetConfig+0xf4>
 8004fae:	e01b      	b.n	8004fe8 <UART_SetConfig+0x110>
 8004fb0:	231b      	movs	r3, #27
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	19db      	adds	r3, r3, r7
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e154      	b.n	8005268 <UART_SetConfig+0x390>
 8004fbe:	231b      	movs	r3, #27
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	19db      	adds	r3, r3, r7
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e14d      	b.n	8005268 <UART_SetConfig+0x390>
 8004fcc:	231b      	movs	r3, #27
 8004fce:	2220      	movs	r2, #32
 8004fd0:	189b      	adds	r3, r3, r2
 8004fd2:	19db      	adds	r3, r3, r7
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	e146      	b.n	8005268 <UART_SetConfig+0x390>
 8004fda:	231b      	movs	r3, #27
 8004fdc:	2220      	movs	r2, #32
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	19db      	adds	r3, r3, r7
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e13f      	b.n	8005268 <UART_SetConfig+0x390>
 8004fe8:	231b      	movs	r3, #27
 8004fea:	2220      	movs	r2, #32
 8004fec:	189b      	adds	r3, r3, r2
 8004fee:	19db      	adds	r3, r3, r7
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e138      	b.n	8005268 <UART_SetConfig+0x390>
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a8c      	ldr	r2, [pc, #560]	; (800522c <UART_SetConfig+0x354>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d131      	bne.n	8005064 <UART_SetConfig+0x18c>
 8005000:	4b89      	ldr	r3, [pc, #548]	; (8005228 <UART_SetConfig+0x350>)
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	220c      	movs	r2, #12
 8005006:	4013      	ands	r3, r2
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d01d      	beq.n	8005048 <UART_SetConfig+0x170>
 800500c:	d823      	bhi.n	8005056 <UART_SetConfig+0x17e>
 800500e:	2b08      	cmp	r3, #8
 8005010:	d00c      	beq.n	800502c <UART_SetConfig+0x154>
 8005012:	d820      	bhi.n	8005056 <UART_SetConfig+0x17e>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <UART_SetConfig+0x146>
 8005018:	2b04      	cmp	r3, #4
 800501a:	d00e      	beq.n	800503a <UART_SetConfig+0x162>
 800501c:	e01b      	b.n	8005056 <UART_SetConfig+0x17e>
 800501e:	231b      	movs	r3, #27
 8005020:	2220      	movs	r2, #32
 8005022:	189b      	adds	r3, r3, r2
 8005024:	19db      	adds	r3, r3, r7
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	e11d      	b.n	8005268 <UART_SetConfig+0x390>
 800502c:	231b      	movs	r3, #27
 800502e:	2220      	movs	r2, #32
 8005030:	189b      	adds	r3, r3, r2
 8005032:	19db      	adds	r3, r3, r7
 8005034:	2202      	movs	r2, #2
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e116      	b.n	8005268 <UART_SetConfig+0x390>
 800503a:	231b      	movs	r3, #27
 800503c:	2220      	movs	r2, #32
 800503e:	189b      	adds	r3, r3, r2
 8005040:	19db      	adds	r3, r3, r7
 8005042:	2204      	movs	r2, #4
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e10f      	b.n	8005268 <UART_SetConfig+0x390>
 8005048:	231b      	movs	r3, #27
 800504a:	2220      	movs	r2, #32
 800504c:	189b      	adds	r3, r3, r2
 800504e:	19db      	adds	r3, r3, r7
 8005050:	2208      	movs	r2, #8
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e108      	b.n	8005268 <UART_SetConfig+0x390>
 8005056:	231b      	movs	r3, #27
 8005058:	2220      	movs	r2, #32
 800505a:	189b      	adds	r3, r3, r2
 800505c:	19db      	adds	r3, r3, r7
 800505e:	2210      	movs	r2, #16
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e101      	b.n	8005268 <UART_SetConfig+0x390>
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a71      	ldr	r2, [pc, #452]	; (8005230 <UART_SetConfig+0x358>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d131      	bne.n	80050d2 <UART_SetConfig+0x1fa>
 800506e:	4b6e      	ldr	r3, [pc, #440]	; (8005228 <UART_SetConfig+0x350>)
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	2230      	movs	r2, #48	; 0x30
 8005074:	4013      	ands	r3, r2
 8005076:	2b30      	cmp	r3, #48	; 0x30
 8005078:	d01d      	beq.n	80050b6 <UART_SetConfig+0x1de>
 800507a:	d823      	bhi.n	80050c4 <UART_SetConfig+0x1ec>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d00c      	beq.n	800509a <UART_SetConfig+0x1c2>
 8005080:	d820      	bhi.n	80050c4 <UART_SetConfig+0x1ec>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <UART_SetConfig+0x1b4>
 8005086:	2b10      	cmp	r3, #16
 8005088:	d00e      	beq.n	80050a8 <UART_SetConfig+0x1d0>
 800508a:	e01b      	b.n	80050c4 <UART_SetConfig+0x1ec>
 800508c:	231b      	movs	r3, #27
 800508e:	2220      	movs	r2, #32
 8005090:	189b      	adds	r3, r3, r2
 8005092:	19db      	adds	r3, r3, r7
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e0e6      	b.n	8005268 <UART_SetConfig+0x390>
 800509a:	231b      	movs	r3, #27
 800509c:	2220      	movs	r2, #32
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	19db      	adds	r3, r3, r7
 80050a2:	2202      	movs	r2, #2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	e0df      	b.n	8005268 <UART_SetConfig+0x390>
 80050a8:	231b      	movs	r3, #27
 80050aa:	2220      	movs	r2, #32
 80050ac:	189b      	adds	r3, r3, r2
 80050ae:	19db      	adds	r3, r3, r7
 80050b0:	2204      	movs	r2, #4
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e0d8      	b.n	8005268 <UART_SetConfig+0x390>
 80050b6:	231b      	movs	r3, #27
 80050b8:	2220      	movs	r2, #32
 80050ba:	189b      	adds	r3, r3, r2
 80050bc:	19db      	adds	r3, r3, r7
 80050be:	2208      	movs	r2, #8
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	e0d1      	b.n	8005268 <UART_SetConfig+0x390>
 80050c4:	231b      	movs	r3, #27
 80050c6:	2220      	movs	r2, #32
 80050c8:	189b      	adds	r3, r3, r2
 80050ca:	19db      	adds	r3, r3, r7
 80050cc:	2210      	movs	r2, #16
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	e0ca      	b.n	8005268 <UART_SetConfig+0x390>
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a57      	ldr	r2, [pc, #348]	; (8005234 <UART_SetConfig+0x35c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d106      	bne.n	80050ea <UART_SetConfig+0x212>
 80050dc:	231b      	movs	r3, #27
 80050de:	2220      	movs	r2, #32
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	19db      	adds	r3, r3, r7
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e0be      	b.n	8005268 <UART_SetConfig+0x390>
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a52      	ldr	r2, [pc, #328]	; (8005238 <UART_SetConfig+0x360>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d106      	bne.n	8005102 <UART_SetConfig+0x22a>
 80050f4:	231b      	movs	r3, #27
 80050f6:	2220      	movs	r2, #32
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	19db      	adds	r3, r3, r7
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e0b2      	b.n	8005268 <UART_SetConfig+0x390>
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a4d      	ldr	r2, [pc, #308]	; (800523c <UART_SetConfig+0x364>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d106      	bne.n	800511a <UART_SetConfig+0x242>
 800510c:	231b      	movs	r3, #27
 800510e:	2220      	movs	r2, #32
 8005110:	189b      	adds	r3, r3, r2
 8005112:	19db      	adds	r3, r3, r7
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e0a6      	b.n	8005268 <UART_SetConfig+0x390>
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a3e      	ldr	r2, [pc, #248]	; (8005218 <UART_SetConfig+0x340>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d13e      	bne.n	80051a2 <UART_SetConfig+0x2ca>
 8005124:	4b40      	ldr	r3, [pc, #256]	; (8005228 <UART_SetConfig+0x350>)
 8005126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005128:	23c0      	movs	r3, #192	; 0xc0
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	4013      	ands	r3, r2
 800512e:	22c0      	movs	r2, #192	; 0xc0
 8005130:	0112      	lsls	r2, r2, #4
 8005132:	4293      	cmp	r3, r2
 8005134:	d027      	beq.n	8005186 <UART_SetConfig+0x2ae>
 8005136:	22c0      	movs	r2, #192	; 0xc0
 8005138:	0112      	lsls	r2, r2, #4
 800513a:	4293      	cmp	r3, r2
 800513c:	d82a      	bhi.n	8005194 <UART_SetConfig+0x2bc>
 800513e:	2280      	movs	r2, #128	; 0x80
 8005140:	0112      	lsls	r2, r2, #4
 8005142:	4293      	cmp	r3, r2
 8005144:	d011      	beq.n	800516a <UART_SetConfig+0x292>
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	0112      	lsls	r2, r2, #4
 800514a:	4293      	cmp	r3, r2
 800514c:	d822      	bhi.n	8005194 <UART_SetConfig+0x2bc>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <UART_SetConfig+0x284>
 8005152:	2280      	movs	r2, #128	; 0x80
 8005154:	00d2      	lsls	r2, r2, #3
 8005156:	4293      	cmp	r3, r2
 8005158:	d00e      	beq.n	8005178 <UART_SetConfig+0x2a0>
 800515a:	e01b      	b.n	8005194 <UART_SetConfig+0x2bc>
 800515c:	231b      	movs	r3, #27
 800515e:	2220      	movs	r2, #32
 8005160:	189b      	adds	r3, r3, r2
 8005162:	19db      	adds	r3, r3, r7
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e07e      	b.n	8005268 <UART_SetConfig+0x390>
 800516a:	231b      	movs	r3, #27
 800516c:	2220      	movs	r2, #32
 800516e:	189b      	adds	r3, r3, r2
 8005170:	19db      	adds	r3, r3, r7
 8005172:	2202      	movs	r2, #2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e077      	b.n	8005268 <UART_SetConfig+0x390>
 8005178:	231b      	movs	r3, #27
 800517a:	2220      	movs	r2, #32
 800517c:	189b      	adds	r3, r3, r2
 800517e:	19db      	adds	r3, r3, r7
 8005180:	2204      	movs	r2, #4
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e070      	b.n	8005268 <UART_SetConfig+0x390>
 8005186:	231b      	movs	r3, #27
 8005188:	2220      	movs	r2, #32
 800518a:	189b      	adds	r3, r3, r2
 800518c:	19db      	adds	r3, r3, r7
 800518e:	2208      	movs	r2, #8
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	e069      	b.n	8005268 <UART_SetConfig+0x390>
 8005194:	231b      	movs	r3, #27
 8005196:	2220      	movs	r2, #32
 8005198:	189b      	adds	r3, r3, r2
 800519a:	19db      	adds	r3, r3, r7
 800519c:	2210      	movs	r2, #16
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e062      	b.n	8005268 <UART_SetConfig+0x390>
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1d      	ldr	r2, [pc, #116]	; (800521c <UART_SetConfig+0x344>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d157      	bne.n	800525c <UART_SetConfig+0x384>
 80051ac:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <UART_SetConfig+0x350>)
 80051ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b0:	23c0      	movs	r3, #192	; 0xc0
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4013      	ands	r3, r2
 80051b6:	22c0      	movs	r2, #192	; 0xc0
 80051b8:	0092      	lsls	r2, r2, #2
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d040      	beq.n	8005240 <UART_SetConfig+0x368>
 80051be:	22c0      	movs	r2, #192	; 0xc0
 80051c0:	0092      	lsls	r2, r2, #2
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d843      	bhi.n	800524e <UART_SetConfig+0x376>
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	0092      	lsls	r2, r2, #2
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d011      	beq.n	80051f2 <UART_SetConfig+0x31a>
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	0092      	lsls	r2, r2, #2
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d83b      	bhi.n	800524e <UART_SetConfig+0x376>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <UART_SetConfig+0x30c>
 80051da:	2280      	movs	r2, #128	; 0x80
 80051dc:	0052      	lsls	r2, r2, #1
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <UART_SetConfig+0x328>
 80051e2:	e034      	b.n	800524e <UART_SetConfig+0x376>
 80051e4:	231b      	movs	r3, #27
 80051e6:	2220      	movs	r2, #32
 80051e8:	189b      	adds	r3, r3, r2
 80051ea:	19db      	adds	r3, r3, r7
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e03a      	b.n	8005268 <UART_SetConfig+0x390>
 80051f2:	231b      	movs	r3, #27
 80051f4:	2220      	movs	r2, #32
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	19db      	adds	r3, r3, r7
 80051fa:	2202      	movs	r2, #2
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e033      	b.n	8005268 <UART_SetConfig+0x390>
 8005200:	231b      	movs	r3, #27
 8005202:	2220      	movs	r2, #32
 8005204:	189b      	adds	r3, r3, r2
 8005206:	19db      	adds	r3, r3, r7
 8005208:	2204      	movs	r2, #4
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e02c      	b.n	8005268 <UART_SetConfig+0x390>
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	cfff69f3 	.word	0xcfff69f3
 8005214:	ffffcfff 	.word	0xffffcfff
 8005218:	40008000 	.word	0x40008000
 800521c:	40008400 	.word	0x40008400
 8005220:	11fff4ff 	.word	0x11fff4ff
 8005224:	40013800 	.word	0x40013800
 8005228:	40021000 	.word	0x40021000
 800522c:	40004400 	.word	0x40004400
 8005230:	40004800 	.word	0x40004800
 8005234:	40004c00 	.word	0x40004c00
 8005238:	40005000 	.word	0x40005000
 800523c:	40013c00 	.word	0x40013c00
 8005240:	231b      	movs	r3, #27
 8005242:	2220      	movs	r2, #32
 8005244:	189b      	adds	r3, r3, r2
 8005246:	19db      	adds	r3, r3, r7
 8005248:	2208      	movs	r2, #8
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e00c      	b.n	8005268 <UART_SetConfig+0x390>
 800524e:	231b      	movs	r3, #27
 8005250:	2220      	movs	r2, #32
 8005252:	189b      	adds	r3, r3, r2
 8005254:	19db      	adds	r3, r3, r7
 8005256:	2210      	movs	r2, #16
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e005      	b.n	8005268 <UART_SetConfig+0x390>
 800525c:	231b      	movs	r3, #27
 800525e:	2220      	movs	r2, #32
 8005260:	189b      	adds	r3, r3, r2
 8005262:	19db      	adds	r3, r3, r7
 8005264:	2210      	movs	r2, #16
 8005266:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4ac1      	ldr	r2, [pc, #772]	; (8005574 <UART_SetConfig+0x69c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d005      	beq.n	800527e <UART_SetConfig+0x3a6>
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4ac0      	ldr	r2, [pc, #768]	; (8005578 <UART_SetConfig+0x6a0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d000      	beq.n	800527e <UART_SetConfig+0x3a6>
 800527c:	e093      	b.n	80053a6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800527e:	231b      	movs	r3, #27
 8005280:	2220      	movs	r2, #32
 8005282:	189b      	adds	r3, r3, r2
 8005284:	19db      	adds	r3, r3, r7
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d015      	beq.n	80052b8 <UART_SetConfig+0x3e0>
 800528c:	dc18      	bgt.n	80052c0 <UART_SetConfig+0x3e8>
 800528e:	2b04      	cmp	r3, #4
 8005290:	d00d      	beq.n	80052ae <UART_SetConfig+0x3d6>
 8005292:	dc15      	bgt.n	80052c0 <UART_SetConfig+0x3e8>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <UART_SetConfig+0x3c6>
 8005298:	2b02      	cmp	r3, #2
 800529a:	d005      	beq.n	80052a8 <UART_SetConfig+0x3d0>
 800529c:	e010      	b.n	80052c0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529e:	f7fe fac9 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 80052a2:	0003      	movs	r3, r0
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052a6:	e014      	b.n	80052d2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a8:	4bb4      	ldr	r3, [pc, #720]	; (800557c <UART_SetConfig+0x6a4>)
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ac:	e011      	b.n	80052d2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ae:	f7fe fa35 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80052b2:	0003      	movs	r3, r0
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052b6:	e00c      	b.n	80052d2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052be:	e008      	b.n	80052d2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80052c4:	231a      	movs	r3, #26
 80052c6:	2220      	movs	r2, #32
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	19db      	adds	r3, r3, r7
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
        break;
 80052d0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d100      	bne.n	80052da <UART_SetConfig+0x402>
 80052d8:	e135      	b.n	8005546 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052de:	4ba8      	ldr	r3, [pc, #672]	; (8005580 <UART_SetConfig+0x6a8>)
 80052e0:	0052      	lsls	r2, r2, #1
 80052e2:	5ad3      	ldrh	r3, [r2, r3]
 80052e4:	0019      	movs	r1, r3
 80052e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052e8:	f7fa ff1e 	bl	8000128 <__udivsi3>
 80052ec:	0003      	movs	r3, r0
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	0013      	movs	r3, r2
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d305      	bcc.n	800530c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005308:	429a      	cmp	r2, r3
 800530a:	d906      	bls.n	800531a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800530c:	231a      	movs	r3, #26
 800530e:	2220      	movs	r2, #32
 8005310:	189b      	adds	r3, r3, r2
 8005312:	19db      	adds	r3, r3, r7
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e044      	b.n	80053a4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005326:	4b96      	ldr	r3, [pc, #600]	; (8005580 <UART_SetConfig+0x6a8>)
 8005328:	0052      	lsls	r2, r2, #1
 800532a:	5ad3      	ldrh	r3, [r2, r3]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	69b8      	ldr	r0, [r7, #24]
 8005338:	69f9      	ldr	r1, [r7, #28]
 800533a:	f7fb f86b 	bl	8000414 <__aeabi_uldivmod>
 800533e:	0002      	movs	r2, r0
 8005340:	000b      	movs	r3, r1
 8005342:	0e11      	lsrs	r1, r2, #24
 8005344:	021d      	lsls	r5, r3, #8
 8005346:	430d      	orrs	r5, r1
 8005348:	0214      	lsls	r4, r2, #8
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68b8      	ldr	r0, [r7, #8]
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	1900      	adds	r0, r0, r4
 800535c:	4169      	adcs	r1, r5
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f7fb f852 	bl	8000414 <__aeabi_uldivmod>
 8005370:	0002      	movs	r2, r0
 8005372:	000b      	movs	r3, r1
 8005374:	0013      	movs	r3, r2
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	23c0      	movs	r3, #192	; 0xc0
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	429a      	cmp	r2, r3
 8005380:	d309      	bcc.n	8005396 <UART_SetConfig+0x4be>
 8005382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	035b      	lsls	r3, r3, #13
 8005388:	429a      	cmp	r2, r3
 800538a:	d204      	bcs.n	8005396 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005392:	60da      	str	r2, [r3, #12]
 8005394:	e006      	b.n	80053a4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005396:	231a      	movs	r3, #26
 8005398:	2220      	movs	r2, #32
 800539a:	189b      	adds	r3, r3, r2
 800539c:	19db      	adds	r3, r3, r7
 800539e:	2201      	movs	r2, #1
 80053a0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80053a2:	e0d0      	b.n	8005546 <UART_SetConfig+0x66e>
 80053a4:	e0cf      	b.n	8005546 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d000      	beq.n	80053b4 <UART_SetConfig+0x4dc>
 80053b2:	e070      	b.n	8005496 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80053b4:	231b      	movs	r3, #27
 80053b6:	2220      	movs	r2, #32
 80053b8:	189b      	adds	r3, r3, r2
 80053ba:	19db      	adds	r3, r3, r7
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d015      	beq.n	80053ee <UART_SetConfig+0x516>
 80053c2:	dc18      	bgt.n	80053f6 <UART_SetConfig+0x51e>
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d00d      	beq.n	80053e4 <UART_SetConfig+0x50c>
 80053c8:	dc15      	bgt.n	80053f6 <UART_SetConfig+0x51e>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <UART_SetConfig+0x4fc>
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d005      	beq.n	80053de <UART_SetConfig+0x506>
 80053d2:	e010      	b.n	80053f6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d4:	f7fe fa2e 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 80053d8:	0003      	movs	r3, r0
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053dc:	e014      	b.n	8005408 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053de:	4b67      	ldr	r3, [pc, #412]	; (800557c <UART_SetConfig+0x6a4>)
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053e2:	e011      	b.n	8005408 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e4:	f7fe f99a 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80053e8:	0003      	movs	r3, r0
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053ec:	e00c      	b.n	8005408 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053f4:	e008      	b.n	8005408 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80053fa:	231a      	movs	r3, #26
 80053fc:	2220      	movs	r2, #32
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	19db      	adds	r3, r3, r7
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
        break;
 8005406:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d100      	bne.n	8005410 <UART_SetConfig+0x538>
 800540e:	e09a      	b.n	8005546 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005414:	4b5a      	ldr	r3, [pc, #360]	; (8005580 <UART_SetConfig+0x6a8>)
 8005416:	0052      	lsls	r2, r2, #1
 8005418:	5ad3      	ldrh	r3, [r2, r3]
 800541a:	0019      	movs	r1, r3
 800541c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800541e:	f7fa fe83 	bl	8000128 <__udivsi3>
 8005422:	0003      	movs	r3, r0
 8005424:	005a      	lsls	r2, r3, #1
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	18d2      	adds	r2, r2, r3
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	0019      	movs	r1, r3
 8005434:	0010      	movs	r0, r2
 8005436:	f7fa fe77 	bl	8000128 <__udivsi3>
 800543a:	0003      	movs	r3, r0
 800543c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	2b0f      	cmp	r3, #15
 8005442:	d921      	bls.n	8005488 <UART_SetConfig+0x5b0>
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	025b      	lsls	r3, r3, #9
 800544a:	429a      	cmp	r2, r3
 800544c:	d21c      	bcs.n	8005488 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	b29a      	uxth	r2, r3
 8005452:	200e      	movs	r0, #14
 8005454:	2420      	movs	r4, #32
 8005456:	1903      	adds	r3, r0, r4
 8005458:	19db      	adds	r3, r3, r7
 800545a:	210f      	movs	r1, #15
 800545c:	438a      	bics	r2, r1
 800545e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	b29b      	uxth	r3, r3
 8005466:	2207      	movs	r2, #7
 8005468:	4013      	ands	r3, r2
 800546a:	b299      	uxth	r1, r3
 800546c:	1903      	adds	r3, r0, r4
 800546e:	19db      	adds	r3, r3, r7
 8005470:	1902      	adds	r2, r0, r4
 8005472:	19d2      	adds	r2, r2, r7
 8005474:	8812      	ldrh	r2, [r2, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	1902      	adds	r2, r0, r4
 8005480:	19d2      	adds	r2, r2, r7
 8005482:	8812      	ldrh	r2, [r2, #0]
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	e05e      	b.n	8005546 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005488:	231a      	movs	r3, #26
 800548a:	2220      	movs	r2, #32
 800548c:	189b      	adds	r3, r3, r2
 800548e:	19db      	adds	r3, r3, r7
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e057      	b.n	8005546 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005496:	231b      	movs	r3, #27
 8005498:	2220      	movs	r2, #32
 800549a:	189b      	adds	r3, r3, r2
 800549c:	19db      	adds	r3, r3, r7
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d015      	beq.n	80054d0 <UART_SetConfig+0x5f8>
 80054a4:	dc18      	bgt.n	80054d8 <UART_SetConfig+0x600>
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d00d      	beq.n	80054c6 <UART_SetConfig+0x5ee>
 80054aa:	dc15      	bgt.n	80054d8 <UART_SetConfig+0x600>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <UART_SetConfig+0x5de>
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d005      	beq.n	80054c0 <UART_SetConfig+0x5e8>
 80054b4:	e010      	b.n	80054d8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b6:	f7fe f9bd 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 80054ba:	0003      	movs	r3, r0
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054be:	e014      	b.n	80054ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c0:	4b2e      	ldr	r3, [pc, #184]	; (800557c <UART_SetConfig+0x6a4>)
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054c4:	e011      	b.n	80054ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c6:	f7fe f929 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80054ca:	0003      	movs	r3, r0
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ce:	e00c      	b.n	80054ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054d6:	e008      	b.n	80054ea <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054dc:	231a      	movs	r3, #26
 80054de:	2220      	movs	r2, #32
 80054e0:	189b      	adds	r3, r3, r2
 80054e2:	19db      	adds	r3, r3, r7
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
        break;
 80054e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d02a      	beq.n	8005546 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <UART_SetConfig+0x6a8>)
 80054f6:	0052      	lsls	r2, r2, #1
 80054f8:	5ad3      	ldrh	r3, [r2, r3]
 80054fa:	0019      	movs	r1, r3
 80054fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054fe:	f7fa fe13 	bl	8000128 <__udivsi3>
 8005502:	0003      	movs	r3, r0
 8005504:	001a      	movs	r2, r3
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	18d2      	adds	r2, r2, r3
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	0019      	movs	r1, r3
 8005514:	0010      	movs	r0, r2
 8005516:	f7fa fe07 	bl	8000128 <__udivsi3>
 800551a:	0003      	movs	r3, r0
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2b0f      	cmp	r3, #15
 8005522:	d90a      	bls.n	800553a <UART_SetConfig+0x662>
 8005524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	025b      	lsls	r3, r3, #9
 800552a:	429a      	cmp	r2, r3
 800552c:	d205      	bcs.n	800553a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	b29a      	uxth	r2, r3
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e005      	b.n	8005546 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800553a:	231a      	movs	r3, #26
 800553c:	2220      	movs	r2, #32
 800553e:	189b      	adds	r3, r3, r2
 8005540:	19db      	adds	r3, r3, r7
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	226a      	movs	r2, #106	; 0x6a
 800554a:	2101      	movs	r1, #1
 800554c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	2268      	movs	r2, #104	; 0x68
 8005552:	2101      	movs	r1, #1
 8005554:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	2200      	movs	r2, #0
 800555a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	2200      	movs	r2, #0
 8005560:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005562:	231a      	movs	r3, #26
 8005564:	2220      	movs	r2, #32
 8005566:	189b      	adds	r3, r3, r2
 8005568:	19db      	adds	r3, r3, r7
 800556a:	781b      	ldrb	r3, [r3, #0]
}
 800556c:	0018      	movs	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	b010      	add	sp, #64	; 0x40
 8005572:	bdb0      	pop	{r4, r5, r7, pc}
 8005574:	40008000 	.word	0x40008000
 8005578:	40008400 	.word	0x40008400
 800557c:	00f42400 	.word	0x00f42400
 8005580:	08007ec4 	.word	0x08007ec4

08005584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	2208      	movs	r2, #8
 8005592:	4013      	ands	r3, r2
 8005594:	d00b      	beq.n	80055ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4a4a      	ldr	r2, [pc, #296]	; (80056c8 <UART_AdvFeatureConfig+0x144>)
 800559e:	4013      	ands	r3, r2
 80055a0:	0019      	movs	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	2201      	movs	r2, #1
 80055b4:	4013      	ands	r3, r2
 80055b6:	d00b      	beq.n	80055d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4a43      	ldr	r2, [pc, #268]	; (80056cc <UART_AdvFeatureConfig+0x148>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	0019      	movs	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	2202      	movs	r2, #2
 80055d6:	4013      	ands	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4a3b      	ldr	r2, [pc, #236]	; (80056d0 <UART_AdvFeatureConfig+0x14c>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	0019      	movs	r1, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	2204      	movs	r2, #4
 80055f8:	4013      	ands	r3, r2
 80055fa:	d00b      	beq.n	8005614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4a34      	ldr	r2, [pc, #208]	; (80056d4 <UART_AdvFeatureConfig+0x150>)
 8005604:	4013      	ands	r3, r2
 8005606:	0019      	movs	r1, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	2210      	movs	r2, #16
 800561a:	4013      	ands	r3, r2
 800561c:	d00b      	beq.n	8005636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <UART_AdvFeatureConfig+0x154>)
 8005626:	4013      	ands	r3, r2
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	2220      	movs	r2, #32
 800563c:	4013      	ands	r3, r2
 800563e:	d00b      	beq.n	8005658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	4a25      	ldr	r2, [pc, #148]	; (80056dc <UART_AdvFeatureConfig+0x158>)
 8005648:	4013      	ands	r3, r2
 800564a:	0019      	movs	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	2240      	movs	r2, #64	; 0x40
 800565e:	4013      	ands	r3, r2
 8005660:	d01d      	beq.n	800569e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a1d      	ldr	r2, [pc, #116]	; (80056e0 <UART_AdvFeatureConfig+0x15c>)
 800566a:	4013      	ands	r3, r2
 800566c:	0019      	movs	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	035b      	lsls	r3, r3, #13
 8005682:	429a      	cmp	r2, r3
 8005684:	d10b      	bne.n	800569e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <UART_AdvFeatureConfig+0x160>)
 800568e:	4013      	ands	r3, r2
 8005690:	0019      	movs	r1, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	4013      	ands	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <UART_AdvFeatureConfig+0x164>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
  }
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	ffff7fff 	.word	0xffff7fff
 80056cc:	fffdffff 	.word	0xfffdffff
 80056d0:	fffeffff 	.word	0xfffeffff
 80056d4:	fffbffff 	.word	0xfffbffff
 80056d8:	ffffefff 	.word	0xffffefff
 80056dc:	ffffdfff 	.word	0xffffdfff
 80056e0:	ffefffff 	.word	0xffefffff
 80056e4:	ff9fffff 	.word	0xff9fffff
 80056e8:	fff7ffff 	.word	0xfff7ffff

080056ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b092      	sub	sp, #72	; 0x48
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2290      	movs	r2, #144	; 0x90
 80056f8:	2100      	movs	r1, #0
 80056fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056fc:	f7fd f876 	bl	80027ec <HAL_GetTick>
 8005700:	0003      	movs	r3, r0
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2208      	movs	r2, #8
 800570c:	4013      	ands	r3, r2
 800570e:	2b08      	cmp	r3, #8
 8005710:	d12d      	bne.n	800576e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	0391      	lsls	r1, r2, #14
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4a47      	ldr	r2, [pc, #284]	; (8005838 <UART_CheckIdleState+0x14c>)
 800571c:	9200      	str	r2, [sp, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	f000 f88e 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8005724:	1e03      	subs	r3, r0, #0
 8005726:	d022      	beq.n	800576e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005728:	f3ef 8310 	mrs	r3, PRIMASK
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005730:	63bb      	str	r3, [r7, #56]	; 0x38
 8005732:	2301      	movs	r3, #1
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	f383 8810 	msr	PRIMASK, r3
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	438a      	bics	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	f383 8810 	msr	PRIMASK, r3
}
 8005758:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2288      	movs	r2, #136	; 0x88
 800575e:	2120      	movs	r1, #32
 8005760:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2284      	movs	r2, #132	; 0x84
 8005766:	2100      	movs	r1, #0
 8005768:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e060      	b.n	8005830 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2204      	movs	r2, #4
 8005776:	4013      	ands	r3, r2
 8005778:	2b04      	cmp	r3, #4
 800577a:	d146      	bne.n	800580a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	03d1      	lsls	r1, r2, #15
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4a2c      	ldr	r2, [pc, #176]	; (8005838 <UART_CheckIdleState+0x14c>)
 8005786:	9200      	str	r2, [sp, #0]
 8005788:	2200      	movs	r2, #0
 800578a:	f000 f859 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 800578e:	1e03      	subs	r3, r0, #0
 8005790:	d03b      	beq.n	800580a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005792:	f3ef 8310 	mrs	r3, PRIMASK
 8005796:	60fb      	str	r3, [r7, #12]
  return(result);
 8005798:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
 800579c:	2301      	movs	r3, #1
 800579e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f383 8810 	msr	PRIMASK, r3
}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4922      	ldr	r1, [pc, #136]	; (800583c <UART_CheckIdleState+0x150>)
 80057b4:	400a      	ands	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f383 8810 	msr	PRIMASK, r3
}
 80057c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c4:	f3ef 8310 	mrs	r3, PRIMASK
 80057c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80057ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
 80057ce:	2301      	movs	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			; (mov r8, r8)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2101      	movs	r1, #1
 80057e6:	438a      	bics	r2, r1
 80057e8:	609a      	str	r2, [r3, #8]
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f383 8810 	msr	PRIMASK, r3
}
 80057f4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	228c      	movs	r2, #140	; 0x8c
 80057fa:	2120      	movs	r1, #32
 80057fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2284      	movs	r2, #132	; 0x84
 8005802:	2100      	movs	r1, #0
 8005804:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e012      	b.n	8005830 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2288      	movs	r2, #136	; 0x88
 800580e:	2120      	movs	r1, #32
 8005810:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	228c      	movs	r2, #140	; 0x8c
 8005816:	2120      	movs	r1, #32
 8005818:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2284      	movs	r2, #132	; 0x84
 800582a:	2100      	movs	r1, #0
 800582c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b010      	add	sp, #64	; 0x40
 8005836:	bd80      	pop	{r7, pc}
 8005838:	01ffffff 	.word	0x01ffffff
 800583c:	fffffedf 	.word	0xfffffedf

08005840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	1dfb      	adds	r3, r7, #7
 800584e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005850:	e051      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	3301      	adds	r3, #1
 8005856:	d04e      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005858:	f7fc ffc8 	bl	80027ec <HAL_GetTick>
 800585c:	0002      	movs	r2, r0
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e051      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2204      	movs	r2, #4
 800587a:	4013      	ands	r3, r2
 800587c:	d03b      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	d038      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d035      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	2208      	movs	r2, #8
 8005892:	4013      	ands	r3, r2
 8005894:	2b08      	cmp	r3, #8
 8005896:	d111      	bne.n	80058bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2208      	movs	r2, #8
 800589e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	0018      	movs	r0, r3
 80058a4:	f000 f83c 	bl	8005920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2290      	movs	r2, #144	; 0x90
 80058ac:	2108      	movs	r1, #8
 80058ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2284      	movs	r2, #132	; 0x84
 80058b4:	2100      	movs	r1, #0
 80058b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e02c      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	401a      	ands	r2, r3
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d112      	bne.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2280      	movs	r2, #128	; 0x80
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 f81f 	bl	8005920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2290      	movs	r2, #144	; 0x90
 80058e6:	2120      	movs	r1, #32
 80058e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2284      	movs	r2, #132	; 0x84
 80058ee:	2100      	movs	r1, #0
 80058f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e00f      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	4013      	ands	r3, r2
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	425a      	negs	r2, r3
 8005906:	4153      	adcs	r3, r2
 8005908:	b2db      	uxtb	r3, r3
 800590a:	001a      	movs	r2, r3
 800590c:	1dfb      	adds	r3, r7, #7
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d09e      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b004      	add	sp, #16
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08e      	sub	sp, #56	; 0x38
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005928:	f3ef 8310 	mrs	r3, PRIMASK
 800592c:	617b      	str	r3, [r7, #20]
  return(result);
 800592e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
 8005932:	2301      	movs	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4926      	ldr	r1, [pc, #152]	; (80059e4 <UART_EndRxTransfer+0xc4>)
 800594a:	400a      	ands	r2, r1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f383 8810 	msr	PRIMASK, r3
}
 8005958:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595a:	f3ef 8310 	mrs	r3, PRIMASK
 800595e:	623b      	str	r3, [r7, #32]
  return(result);
 8005960:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005962:	633b      	str	r3, [r7, #48]	; 0x30
 8005964:	2301      	movs	r3, #1
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	491b      	ldr	r1, [pc, #108]	; (80059e8 <UART_EndRxTransfer+0xc8>)
 800597c:	400a      	ands	r2, r1
 800597e:	609a      	str	r2, [r3, #8]
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d118      	bne.n	80059c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005994:	f3ef 8310 	mrs	r3, PRIMASK
 8005998:	60bb      	str	r3, [r7, #8]
  return(result);
 800599a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599e:	2301      	movs	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f383 8810 	msr	PRIMASK, r3
}
 80059a8:	46c0      	nop			; (mov r8, r8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2110      	movs	r1, #16
 80059b6:	438a      	bics	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f383 8810 	msr	PRIMASK, r3
}
 80059c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	228c      	movs	r2, #140	; 0x8c
 80059ca:	2120      	movs	r1, #32
 80059cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46bd      	mov	sp, r7
 80059de:	b00e      	add	sp, #56	; 0x38
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	fffffedf 	.word	0xfffffedf
 80059e8:	effffffe 	.word	0xeffffffe

080059ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2284      	movs	r2, #132	; 0x84
 80059f8:	5c9b      	ldrb	r3, [r3, r2]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_UARTEx_DisableFifoMode+0x16>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e027      	b.n	8005a52 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2284      	movs	r2, #132	; 0x84
 8005a06:	2101      	movs	r1, #1
 8005a08:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2288      	movs	r2, #136	; 0x88
 8005a0e:	2124      	movs	r1, #36	; 0x24
 8005a10:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2101      	movs	r1, #1
 8005a26:	438a      	bics	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a0b      	ldr	r2, [pc, #44]	; (8005a5c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2288      	movs	r2, #136	; 0x88
 8005a44:	2120      	movs	r1, #32
 8005a46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2284      	movs	r2, #132	; 0x84
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b004      	add	sp, #16
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	dfffffff 	.word	0xdfffffff

08005a60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2284      	movs	r2, #132	; 0x84
 8005a6e:	5c9b      	ldrb	r3, [r3, r2]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e02e      	b.n	8005ad6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2284      	movs	r2, #132	; 0x84
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2288      	movs	r2, #136	; 0x88
 8005a84:	2124      	movs	r1, #36	; 0x24
 8005a86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	438a      	bics	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	08d9      	lsrs	r1, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f000 f854 	bl	8005b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2288      	movs	r2, #136	; 0x88
 8005ac8:	2120      	movs	r1, #32
 8005aca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2284      	movs	r2, #132	; 0x84
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b004      	add	sp, #16
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2284      	movs	r2, #132	; 0x84
 8005aee:	5c9b      	ldrb	r3, [r3, r2]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e02f      	b.n	8005b58 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2284      	movs	r2, #132	; 0x84
 8005afc:	2101      	movs	r1, #1
 8005afe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2288      	movs	r2, #136	; 0x88
 8005b04:	2124      	movs	r1, #36	; 0x24
 8005b06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	438a      	bics	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	4a0e      	ldr	r2, [pc, #56]	; (8005b60 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 f813 	bl	8005b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2288      	movs	r2, #136	; 0x88
 8005b4a:	2120      	movs	r1, #32
 8005b4c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2284      	movs	r2, #132	; 0x84
 8005b52:	2100      	movs	r1, #0
 8005b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b004      	add	sp, #16
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	f1ffffff 	.word	0xf1ffffff

08005b64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d108      	bne.n	8005b86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	226a      	movs	r2, #106	; 0x6a
 8005b78:	2101      	movs	r1, #1
 8005b7a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2268      	movs	r2, #104	; 0x68
 8005b80:	2101      	movs	r1, #1
 8005b82:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b84:	e043      	b.n	8005c0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b86:	260f      	movs	r6, #15
 8005b88:	19bb      	adds	r3, r7, r6
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b8e:	200e      	movs	r0, #14
 8005b90:	183b      	adds	r3, r7, r0
 8005b92:	2208      	movs	r2, #8
 8005b94:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	0e5b      	lsrs	r3, r3, #25
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	240d      	movs	r4, #13
 8005ba2:	193b      	adds	r3, r7, r4
 8005ba4:	2107      	movs	r1, #7
 8005ba6:	400a      	ands	r2, r1
 8005ba8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	0f5b      	lsrs	r3, r3, #29
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	250c      	movs	r5, #12
 8005bb6:	197b      	adds	r3, r7, r5
 8005bb8:	2107      	movs	r1, #7
 8005bba:	400a      	ands	r2, r1
 8005bbc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bbe:	183b      	adds	r3, r7, r0
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	197a      	adds	r2, r7, r5
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	4914      	ldr	r1, [pc, #80]	; (8005c18 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bc8:	5c8a      	ldrb	r2, [r1, r2]
 8005bca:	435a      	muls	r2, r3
 8005bcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bce:	197b      	adds	r3, r7, r5
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <UARTEx_SetNbDataToProcess+0xb8>)
 8005bd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	f7fa fb30 	bl	800023c <__divsi3>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	b299      	uxth	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	226a      	movs	r2, #106	; 0x6a
 8005be4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be6:	19bb      	adds	r3, r7, r6
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	193a      	adds	r2, r7, r4
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	490a      	ldr	r1, [pc, #40]	; (8005c18 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bf0:	5c8a      	ldrb	r2, [r1, r2]
 8005bf2:	435a      	muls	r2, r3
 8005bf4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bf6:	193b      	adds	r3, r7, r4
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <UARTEx_SetNbDataToProcess+0xb8>)
 8005bfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bfe:	0019      	movs	r1, r3
 8005c00:	f7fa fb1c 	bl	800023c <__divsi3>
 8005c04:	0003      	movs	r3, r0
 8005c06:	b299      	uxth	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2268      	movs	r2, #104	; 0x68
 8005c0c:	5299      	strh	r1, [r3, r2]
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b005      	add	sp, #20
 8005c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	08007edc 	.word	0x08007edc
 8005c1c:	08007ee4 	.word	0x08007ee4

08005c20 <sniprintf>:
 8005c20:	b40c      	push	{r2, r3}
 8005c22:	b530      	push	{r4, r5, lr}
 8005c24:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <sniprintf+0x64>)
 8005c26:	000c      	movs	r4, r1
 8005c28:	681d      	ldr	r5, [r3, #0]
 8005c2a:	b09d      	sub	sp, #116	; 0x74
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	da08      	bge.n	8005c42 <sniprintf+0x22>
 8005c30:	238b      	movs	r3, #139	; 0x8b
 8005c32:	2001      	movs	r0, #1
 8005c34:	602b      	str	r3, [r5, #0]
 8005c36:	4240      	negs	r0, r0
 8005c38:	b01d      	add	sp, #116	; 0x74
 8005c3a:	bc30      	pop	{r4, r5}
 8005c3c:	bc08      	pop	{r3}
 8005c3e:	b002      	add	sp, #8
 8005c40:	4718      	bx	r3
 8005c42:	2382      	movs	r3, #130	; 0x82
 8005c44:	466a      	mov	r2, sp
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	8293      	strh	r3, [r2, #20]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9002      	str	r0, [sp, #8]
 8005c4e:	9006      	str	r0, [sp, #24]
 8005c50:	4299      	cmp	r1, r3
 8005c52:	d000      	beq.n	8005c56 <sniprintf+0x36>
 8005c54:	1e4b      	subs	r3, r1, #1
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	9307      	str	r3, [sp, #28]
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	466a      	mov	r2, sp
 8005c5e:	425b      	negs	r3, r3
 8005c60:	82d3      	strh	r3, [r2, #22]
 8005c62:	0028      	movs	r0, r5
 8005c64:	ab21      	add	r3, sp, #132	; 0x84
 8005c66:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c68:	a902      	add	r1, sp, #8
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	f000 f9ca 	bl	8006004 <_svfiprintf_r>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	da01      	bge.n	8005c78 <sniprintf+0x58>
 8005c74:	238b      	movs	r3, #139	; 0x8b
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	2c00      	cmp	r4, #0
 8005c7a:	d0dd      	beq.n	8005c38 <sniprintf+0x18>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	9b02      	ldr	r3, [sp, #8]
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e7d9      	b.n	8005c38 <sniprintf+0x18>
 8005c84:	20000058 	.word	0x20000058

08005c88 <siprintf>:
 8005c88:	b40e      	push	{r1, r2, r3}
 8005c8a:	b500      	push	{lr}
 8005c8c:	490b      	ldr	r1, [pc, #44]	; (8005cbc <siprintf+0x34>)
 8005c8e:	b09c      	sub	sp, #112	; 0x70
 8005c90:	ab1d      	add	r3, sp, #116	; 0x74
 8005c92:	9002      	str	r0, [sp, #8]
 8005c94:	9006      	str	r0, [sp, #24]
 8005c96:	9107      	str	r1, [sp, #28]
 8005c98:	9104      	str	r1, [sp, #16]
 8005c9a:	4809      	ldr	r0, [pc, #36]	; (8005cc0 <siprintf+0x38>)
 8005c9c:	4909      	ldr	r1, [pc, #36]	; (8005cc4 <siprintf+0x3c>)
 8005c9e:	cb04      	ldmia	r3!, {r2}
 8005ca0:	9105      	str	r1, [sp, #20]
 8005ca2:	6800      	ldr	r0, [r0, #0]
 8005ca4:	a902      	add	r1, sp, #8
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	f000 f9ac 	bl	8006004 <_svfiprintf_r>
 8005cac:	2200      	movs	r2, #0
 8005cae:	9b02      	ldr	r3, [sp, #8]
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	b01c      	add	sp, #112	; 0x70
 8005cb4:	bc08      	pop	{r3}
 8005cb6:	b003      	add	sp, #12
 8005cb8:	4718      	bx	r3
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	7fffffff 	.word	0x7fffffff
 8005cc0:	20000058 	.word	0x20000058
 8005cc4:	ffff0208 	.word	0xffff0208

08005cc8 <memset>:
 8005cc8:	0003      	movs	r3, r0
 8005cca:	1882      	adds	r2, r0, r2
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	7019      	strb	r1, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <__errno>:
 8005cd8:	4b01      	ldr	r3, [pc, #4]	; (8005ce0 <__errno+0x8>)
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	4770      	bx	lr
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	20000058 	.word	0x20000058

08005ce4 <__libc_init_array>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	4c0c      	ldr	r4, [pc, #48]	; (8005d1c <__libc_init_array+0x38>)
 8005cea:	4d0d      	ldr	r5, [pc, #52]	; (8005d20 <__libc_init_array+0x3c>)
 8005cec:	1b64      	subs	r4, r4, r5
 8005cee:	10a4      	asrs	r4, r4, #2
 8005cf0:	42a6      	cmp	r6, r4
 8005cf2:	d109      	bne.n	8005d08 <__libc_init_array+0x24>
 8005cf4:	2600      	movs	r6, #0
 8005cf6:	f000 fc6d 	bl	80065d4 <_init>
 8005cfa:	4c0a      	ldr	r4, [pc, #40]	; (8005d24 <__libc_init_array+0x40>)
 8005cfc:	4d0a      	ldr	r5, [pc, #40]	; (8005d28 <__libc_init_array+0x44>)
 8005cfe:	1b64      	subs	r4, r4, r5
 8005d00:	10a4      	asrs	r4, r4, #2
 8005d02:	42a6      	cmp	r6, r4
 8005d04:	d105      	bne.n	8005d12 <__libc_init_array+0x2e>
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	00b3      	lsls	r3, r6, #2
 8005d0a:	58eb      	ldr	r3, [r5, r3]
 8005d0c:	4798      	blx	r3
 8005d0e:	3601      	adds	r6, #1
 8005d10:	e7ee      	b.n	8005cf0 <__libc_init_array+0xc>
 8005d12:	00b3      	lsls	r3, r6, #2
 8005d14:	58eb      	ldr	r3, [r5, r3]
 8005d16:	4798      	blx	r3
 8005d18:	3601      	adds	r6, #1
 8005d1a:	e7f2      	b.n	8005d02 <__libc_init_array+0x1e>
 8005d1c:	08007f28 	.word	0x08007f28
 8005d20:	08007f28 	.word	0x08007f28
 8005d24:	08007f2c 	.word	0x08007f2c
 8005d28:	08007f28 	.word	0x08007f28

08005d2c <__retarget_lock_acquire_recursive>:
 8005d2c:	4770      	bx	lr

08005d2e <__retarget_lock_release_recursive>:
 8005d2e:	4770      	bx	lr

08005d30 <memcpy>:
 8005d30:	2300      	movs	r3, #0
 8005d32:	b510      	push	{r4, lr}
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d100      	bne.n	8005d3a <memcpy+0xa>
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	5ccc      	ldrb	r4, [r1, r3]
 8005d3c:	54c4      	strb	r4, [r0, r3]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	e7f8      	b.n	8005d34 <memcpy+0x4>
	...

08005d44 <_free_r>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	0005      	movs	r5, r0
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	d010      	beq.n	8005d6e <_free_r+0x2a>
 8005d4c:	1f0c      	subs	r4, r1, #4
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da00      	bge.n	8005d56 <_free_r+0x12>
 8005d54:	18e4      	adds	r4, r4, r3
 8005d56:	0028      	movs	r0, r5
 8005d58:	f000 f8e2 	bl	8005f20 <__malloc_lock>
 8005d5c:	4a1d      	ldr	r2, [pc, #116]	; (8005dd4 <_free_r+0x90>)
 8005d5e:	6813      	ldr	r3, [r2, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <_free_r+0x2c>
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	6014      	str	r4, [r2, #0]
 8005d68:	0028      	movs	r0, r5
 8005d6a:	f000 f8e1 	bl	8005f30 <__malloc_unlock>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	d908      	bls.n	8005d86 <_free_r+0x42>
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	1821      	adds	r1, r4, r0
 8005d78:	428b      	cmp	r3, r1
 8005d7a:	d1f3      	bne.n	8005d64 <_free_r+0x20>
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	1809      	adds	r1, r1, r0
 8005d82:	6021      	str	r1, [r4, #0]
 8005d84:	e7ee      	b.n	8005d64 <_free_r+0x20>
 8005d86:	001a      	movs	r2, r3
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <_free_r+0x4e>
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	d9f9      	bls.n	8005d86 <_free_r+0x42>
 8005d92:	6811      	ldr	r1, [r2, #0]
 8005d94:	1850      	adds	r0, r2, r1
 8005d96:	42a0      	cmp	r0, r4
 8005d98:	d10b      	bne.n	8005db2 <_free_r+0x6e>
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	1809      	adds	r1, r1, r0
 8005d9e:	1850      	adds	r0, r2, r1
 8005da0:	6011      	str	r1, [r2, #0]
 8005da2:	4283      	cmp	r3, r0
 8005da4:	d1e0      	bne.n	8005d68 <_free_r+0x24>
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	1841      	adds	r1, r0, r1
 8005dac:	6011      	str	r1, [r2, #0]
 8005dae:	6053      	str	r3, [r2, #4]
 8005db0:	e7da      	b.n	8005d68 <_free_r+0x24>
 8005db2:	42a0      	cmp	r0, r4
 8005db4:	d902      	bls.n	8005dbc <_free_r+0x78>
 8005db6:	230c      	movs	r3, #12
 8005db8:	602b      	str	r3, [r5, #0]
 8005dba:	e7d5      	b.n	8005d68 <_free_r+0x24>
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	1821      	adds	r1, r4, r0
 8005dc0:	428b      	cmp	r3, r1
 8005dc2:	d103      	bne.n	8005dcc <_free_r+0x88>
 8005dc4:	6819      	ldr	r1, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	1809      	adds	r1, r1, r0
 8005dca:	6021      	str	r1, [r4, #0]
 8005dcc:	6063      	str	r3, [r4, #4]
 8005dce:	6054      	str	r4, [r2, #4]
 8005dd0:	e7ca      	b.n	8005d68 <_free_r+0x24>
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	2000045c 	.word	0x2000045c

08005dd8 <sbrk_aligned>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4e0f      	ldr	r6, [pc, #60]	; (8005e18 <sbrk_aligned+0x40>)
 8005ddc:	000d      	movs	r5, r1
 8005dde:	6831      	ldr	r1, [r6, #0]
 8005de0:	0004      	movs	r4, r0
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d102      	bne.n	8005dec <sbrk_aligned+0x14>
 8005de6:	f000 fba1 	bl	800652c <_sbrk_r>
 8005dea:	6030      	str	r0, [r6, #0]
 8005dec:	0029      	movs	r1, r5
 8005dee:	0020      	movs	r0, r4
 8005df0:	f000 fb9c 	bl	800652c <_sbrk_r>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d00a      	beq.n	8005e0e <sbrk_aligned+0x36>
 8005df8:	2303      	movs	r3, #3
 8005dfa:	1cc5      	adds	r5, r0, #3
 8005dfc:	439d      	bics	r5, r3
 8005dfe:	42a8      	cmp	r0, r5
 8005e00:	d007      	beq.n	8005e12 <sbrk_aligned+0x3a>
 8005e02:	1a29      	subs	r1, r5, r0
 8005e04:	0020      	movs	r0, r4
 8005e06:	f000 fb91 	bl	800652c <_sbrk_r>
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d101      	bne.n	8005e12 <sbrk_aligned+0x3a>
 8005e0e:	2501      	movs	r5, #1
 8005e10:	426d      	negs	r5, r5
 8005e12:	0028      	movs	r0, r5
 8005e14:	bd70      	pop	{r4, r5, r6, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	20000460 	.word	0x20000460

08005e1c <_malloc_r>:
 8005e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e1e:	2203      	movs	r2, #3
 8005e20:	1ccb      	adds	r3, r1, #3
 8005e22:	4393      	bics	r3, r2
 8005e24:	3308      	adds	r3, #8
 8005e26:	0006      	movs	r6, r0
 8005e28:	001f      	movs	r7, r3
 8005e2a:	2b0c      	cmp	r3, #12
 8005e2c:	d238      	bcs.n	8005ea0 <_malloc_r+0x84>
 8005e2e:	270c      	movs	r7, #12
 8005e30:	42b9      	cmp	r1, r7
 8005e32:	d837      	bhi.n	8005ea4 <_malloc_r+0x88>
 8005e34:	0030      	movs	r0, r6
 8005e36:	f000 f873 	bl	8005f20 <__malloc_lock>
 8005e3a:	4b38      	ldr	r3, [pc, #224]	; (8005f1c <_malloc_r+0x100>)
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	001c      	movs	r4, r3
 8005e42:	2c00      	cmp	r4, #0
 8005e44:	d133      	bne.n	8005eae <_malloc_r+0x92>
 8005e46:	0039      	movs	r1, r7
 8005e48:	0030      	movs	r0, r6
 8005e4a:	f7ff ffc5 	bl	8005dd8 <sbrk_aligned>
 8005e4e:	0004      	movs	r4, r0
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d15e      	bne.n	8005f12 <_malloc_r+0xf6>
 8005e54:	9b00      	ldr	r3, [sp, #0]
 8005e56:	681c      	ldr	r4, [r3, #0]
 8005e58:	0025      	movs	r5, r4
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	d14e      	bne.n	8005efc <_malloc_r+0xe0>
 8005e5e:	2c00      	cmp	r4, #0
 8005e60:	d051      	beq.n	8005f06 <_malloc_r+0xea>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	0029      	movs	r1, r5
 8005e66:	18e3      	adds	r3, r4, r3
 8005e68:	0030      	movs	r0, r6
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	f000 fb5e 	bl	800652c <_sbrk_r>
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	4283      	cmp	r3, r0
 8005e74:	d147      	bne.n	8005f06 <_malloc_r+0xea>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	0030      	movs	r0, r6
 8005e7a:	1aff      	subs	r7, r7, r3
 8005e7c:	0039      	movs	r1, r7
 8005e7e:	f7ff ffab 	bl	8005dd8 <sbrk_aligned>
 8005e82:	3001      	adds	r0, #1
 8005e84:	d03f      	beq.n	8005f06 <_malloc_r+0xea>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	19db      	adds	r3, r3, r7
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	9b00      	ldr	r3, [sp, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d040      	beq.n	8005f16 <_malloc_r+0xfa>
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	42a2      	cmp	r2, r4
 8005e98:	d133      	bne.n	8005f02 <_malloc_r+0xe6>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	e014      	b.n	8005eca <_malloc_r+0xae>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dac5      	bge.n	8005e30 <_malloc_r+0x14>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	2500      	movs	r5, #0
 8005ea8:	6033      	str	r3, [r6, #0]
 8005eaa:	0028      	movs	r0, r5
 8005eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005eae:	6821      	ldr	r1, [r4, #0]
 8005eb0:	1bc9      	subs	r1, r1, r7
 8005eb2:	d420      	bmi.n	8005ef6 <_malloc_r+0xda>
 8005eb4:	290b      	cmp	r1, #11
 8005eb6:	d918      	bls.n	8005eea <_malloc_r+0xce>
 8005eb8:	19e2      	adds	r2, r4, r7
 8005eba:	6027      	str	r7, [r4, #0]
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	d112      	bne.n	8005ee6 <_malloc_r+0xca>
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	6863      	ldr	r3, [r4, #4]
 8005ec6:	6011      	str	r1, [r2, #0]
 8005ec8:	6053      	str	r3, [r2, #4]
 8005eca:	0030      	movs	r0, r6
 8005ecc:	0025      	movs	r5, r4
 8005ece:	f000 f82f 	bl	8005f30 <__malloc_unlock>
 8005ed2:	2207      	movs	r2, #7
 8005ed4:	350b      	adds	r5, #11
 8005ed6:	1d23      	adds	r3, r4, #4
 8005ed8:	4395      	bics	r5, r2
 8005eda:	1aea      	subs	r2, r5, r3
 8005edc:	429d      	cmp	r5, r3
 8005ede:	d0e4      	beq.n	8005eaa <_malloc_r+0x8e>
 8005ee0:	1b5b      	subs	r3, r3, r5
 8005ee2:	50a3      	str	r3, [r4, r2]
 8005ee4:	e7e1      	b.n	8005eaa <_malloc_r+0x8e>
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	e7ec      	b.n	8005ec4 <_malloc_r+0xa8>
 8005eea:	6862      	ldr	r2, [r4, #4]
 8005eec:	42a3      	cmp	r3, r4
 8005eee:	d1d5      	bne.n	8005e9c <_malloc_r+0x80>
 8005ef0:	9b00      	ldr	r3, [sp, #0]
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e7e9      	b.n	8005eca <_malloc_r+0xae>
 8005ef6:	0023      	movs	r3, r4
 8005ef8:	6864      	ldr	r4, [r4, #4]
 8005efa:	e7a2      	b.n	8005e42 <_malloc_r+0x26>
 8005efc:	002c      	movs	r4, r5
 8005efe:	686d      	ldr	r5, [r5, #4]
 8005f00:	e7ab      	b.n	8005e5a <_malloc_r+0x3e>
 8005f02:	0013      	movs	r3, r2
 8005f04:	e7c4      	b.n	8005e90 <_malloc_r+0x74>
 8005f06:	230c      	movs	r3, #12
 8005f08:	0030      	movs	r0, r6
 8005f0a:	6033      	str	r3, [r6, #0]
 8005f0c:	f000 f810 	bl	8005f30 <__malloc_unlock>
 8005f10:	e7cb      	b.n	8005eaa <_malloc_r+0x8e>
 8005f12:	6027      	str	r7, [r4, #0]
 8005f14:	e7d9      	b.n	8005eca <_malloc_r+0xae>
 8005f16:	605b      	str	r3, [r3, #4]
 8005f18:	deff      	udf	#255	; 0xff
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	2000045c 	.word	0x2000045c

08005f20 <__malloc_lock>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	4802      	ldr	r0, [pc, #8]	; (8005f2c <__malloc_lock+0xc>)
 8005f24:	f7ff ff02 	bl	8005d2c <__retarget_lock_acquire_recursive>
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	20000458 	.word	0x20000458

08005f30 <__malloc_unlock>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	4802      	ldr	r0, [pc, #8]	; (8005f3c <__malloc_unlock+0xc>)
 8005f34:	f7ff fefb 	bl	8005d2e <__retarget_lock_release_recursive>
 8005f38:	bd10      	pop	{r4, pc}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	20000458 	.word	0x20000458

08005f40 <__ssputs_r>:
 8005f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f42:	b085      	sub	sp, #20
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	9203      	str	r2, [sp, #12]
 8005f48:	688e      	ldr	r6, [r1, #8]
 8005f4a:	9a01      	ldr	r2, [sp, #4]
 8005f4c:	0007      	movs	r7, r0
 8005f4e:	000c      	movs	r4, r1
 8005f50:	680b      	ldr	r3, [r1, #0]
 8005f52:	4296      	cmp	r6, r2
 8005f54:	d831      	bhi.n	8005fba <__ssputs_r+0x7a>
 8005f56:	898a      	ldrh	r2, [r1, #12]
 8005f58:	2190      	movs	r1, #144	; 0x90
 8005f5a:	00c9      	lsls	r1, r1, #3
 8005f5c:	420a      	tst	r2, r1
 8005f5e:	d029      	beq.n	8005fb4 <__ssputs_r+0x74>
 8005f60:	2003      	movs	r0, #3
 8005f62:	6921      	ldr	r1, [r4, #16]
 8005f64:	1a5b      	subs	r3, r3, r1
 8005f66:	9302      	str	r3, [sp, #8]
 8005f68:	6963      	ldr	r3, [r4, #20]
 8005f6a:	4343      	muls	r3, r0
 8005f6c:	0fdd      	lsrs	r5, r3, #31
 8005f6e:	18ed      	adds	r5, r5, r3
 8005f70:	9b01      	ldr	r3, [sp, #4]
 8005f72:	9802      	ldr	r0, [sp, #8]
 8005f74:	3301      	adds	r3, #1
 8005f76:	181b      	adds	r3, r3, r0
 8005f78:	106d      	asrs	r5, r5, #1
 8005f7a:	42ab      	cmp	r3, r5
 8005f7c:	d900      	bls.n	8005f80 <__ssputs_r+0x40>
 8005f7e:	001d      	movs	r5, r3
 8005f80:	0552      	lsls	r2, r2, #21
 8005f82:	d529      	bpl.n	8005fd8 <__ssputs_r+0x98>
 8005f84:	0029      	movs	r1, r5
 8005f86:	0038      	movs	r0, r7
 8005f88:	f7ff ff48 	bl	8005e1c <_malloc_r>
 8005f8c:	1e06      	subs	r6, r0, #0
 8005f8e:	d02d      	beq.n	8005fec <__ssputs_r+0xac>
 8005f90:	9a02      	ldr	r2, [sp, #8]
 8005f92:	6921      	ldr	r1, [r4, #16]
 8005f94:	f7ff fecc 	bl	8005d30 <memcpy>
 8005f98:	89a2      	ldrh	r2, [r4, #12]
 8005f9a:	4b19      	ldr	r3, [pc, #100]	; (8006000 <__ssputs_r+0xc0>)
 8005f9c:	401a      	ands	r2, r3
 8005f9e:	2380      	movs	r3, #128	; 0x80
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	9b02      	ldr	r3, [sp, #8]
 8005fa6:	6126      	str	r6, [r4, #16]
 8005fa8:	18f6      	adds	r6, r6, r3
 8005faa:	6026      	str	r6, [r4, #0]
 8005fac:	6165      	str	r5, [r4, #20]
 8005fae:	9e01      	ldr	r6, [sp, #4]
 8005fb0:	1aed      	subs	r5, r5, r3
 8005fb2:	60a5      	str	r5, [r4, #8]
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	429e      	cmp	r6, r3
 8005fb8:	d900      	bls.n	8005fbc <__ssputs_r+0x7c>
 8005fba:	9e01      	ldr	r6, [sp, #4]
 8005fbc:	0032      	movs	r2, r6
 8005fbe:	9903      	ldr	r1, [sp, #12]
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	f000 fa9f 	bl	8006504 <memmove>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	68a3      	ldr	r3, [r4, #8]
 8005fca:	1b9b      	subs	r3, r3, r6
 8005fcc:	60a3      	str	r3, [r4, #8]
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	199b      	adds	r3, r3, r6
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	b005      	add	sp, #20
 8005fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd8:	002a      	movs	r2, r5
 8005fda:	0038      	movs	r0, r7
 8005fdc:	f000 fac3 	bl	8006566 <_realloc_r>
 8005fe0:	1e06      	subs	r6, r0, #0
 8005fe2:	d1df      	bne.n	8005fa4 <__ssputs_r+0x64>
 8005fe4:	0038      	movs	r0, r7
 8005fe6:	6921      	ldr	r1, [r4, #16]
 8005fe8:	f7ff feac 	bl	8005d44 <_free_r>
 8005fec:	230c      	movs	r3, #12
 8005fee:	2001      	movs	r0, #1
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	89a2      	ldrh	r2, [r4, #12]
 8005ff4:	3334      	adds	r3, #52	; 0x34
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	81a3      	strh	r3, [r4, #12]
 8005ffa:	4240      	negs	r0, r0
 8005ffc:	e7ea      	b.n	8005fd4 <__ssputs_r+0x94>
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	fffffb7f 	.word	0xfffffb7f

08006004 <_svfiprintf_r>:
 8006004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006006:	b0a1      	sub	sp, #132	; 0x84
 8006008:	9003      	str	r0, [sp, #12]
 800600a:	001d      	movs	r5, r3
 800600c:	898b      	ldrh	r3, [r1, #12]
 800600e:	000f      	movs	r7, r1
 8006010:	0016      	movs	r6, r2
 8006012:	061b      	lsls	r3, r3, #24
 8006014:	d511      	bpl.n	800603a <_svfiprintf_r+0x36>
 8006016:	690b      	ldr	r3, [r1, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10e      	bne.n	800603a <_svfiprintf_r+0x36>
 800601c:	2140      	movs	r1, #64	; 0x40
 800601e:	f7ff fefd 	bl	8005e1c <_malloc_r>
 8006022:	6038      	str	r0, [r7, #0]
 8006024:	6138      	str	r0, [r7, #16]
 8006026:	2800      	cmp	r0, #0
 8006028:	d105      	bne.n	8006036 <_svfiprintf_r+0x32>
 800602a:	230c      	movs	r3, #12
 800602c:	9a03      	ldr	r2, [sp, #12]
 800602e:	3801      	subs	r0, #1
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	b021      	add	sp, #132	; 0x84
 8006034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006036:	2340      	movs	r3, #64	; 0x40
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	2300      	movs	r3, #0
 800603c:	ac08      	add	r4, sp, #32
 800603e:	6163      	str	r3, [r4, #20]
 8006040:	3320      	adds	r3, #32
 8006042:	7663      	strb	r3, [r4, #25]
 8006044:	3310      	adds	r3, #16
 8006046:	76a3      	strb	r3, [r4, #26]
 8006048:	9507      	str	r5, [sp, #28]
 800604a:	0035      	movs	r5, r6
 800604c:	782b      	ldrb	r3, [r5, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <_svfiprintf_r+0x52>
 8006052:	2b25      	cmp	r3, #37	; 0x25
 8006054:	d148      	bne.n	80060e8 <_svfiprintf_r+0xe4>
 8006056:	1bab      	subs	r3, r5, r6
 8006058:	9305      	str	r3, [sp, #20]
 800605a:	42b5      	cmp	r5, r6
 800605c:	d00b      	beq.n	8006076 <_svfiprintf_r+0x72>
 800605e:	0032      	movs	r2, r6
 8006060:	0039      	movs	r1, r7
 8006062:	9803      	ldr	r0, [sp, #12]
 8006064:	f7ff ff6c 	bl	8005f40 <__ssputs_r>
 8006068:	3001      	adds	r0, #1
 800606a:	d100      	bne.n	800606e <_svfiprintf_r+0x6a>
 800606c:	e0af      	b.n	80061ce <_svfiprintf_r+0x1ca>
 800606e:	6963      	ldr	r3, [r4, #20]
 8006070:	9a05      	ldr	r2, [sp, #20]
 8006072:	189b      	adds	r3, r3, r2
 8006074:	6163      	str	r3, [r4, #20]
 8006076:	782b      	ldrb	r3, [r5, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d100      	bne.n	800607e <_svfiprintf_r+0x7a>
 800607c:	e0a7      	b.n	80061ce <_svfiprintf_r+0x1ca>
 800607e:	2201      	movs	r2, #1
 8006080:	2300      	movs	r3, #0
 8006082:	4252      	negs	r2, r2
 8006084:	6062      	str	r2, [r4, #4]
 8006086:	a904      	add	r1, sp, #16
 8006088:	3254      	adds	r2, #84	; 0x54
 800608a:	1852      	adds	r2, r2, r1
 800608c:	1c6e      	adds	r6, r5, #1
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	60e3      	str	r3, [r4, #12]
 8006092:	60a3      	str	r3, [r4, #8]
 8006094:	7013      	strb	r3, [r2, #0]
 8006096:	65a3      	str	r3, [r4, #88]	; 0x58
 8006098:	4b55      	ldr	r3, [pc, #340]	; (80061f0 <_svfiprintf_r+0x1ec>)
 800609a:	2205      	movs	r2, #5
 800609c:	0018      	movs	r0, r3
 800609e:	7831      	ldrb	r1, [r6, #0]
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	f000 fa55 	bl	8006550 <memchr>
 80060a6:	1c75      	adds	r5, r6, #1
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d11f      	bne.n	80060ec <_svfiprintf_r+0xe8>
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	06d3      	lsls	r3, r2, #27
 80060b0:	d504      	bpl.n	80060bc <_svfiprintf_r+0xb8>
 80060b2:	2353      	movs	r3, #83	; 0x53
 80060b4:	a904      	add	r1, sp, #16
 80060b6:	185b      	adds	r3, r3, r1
 80060b8:	2120      	movs	r1, #32
 80060ba:	7019      	strb	r1, [r3, #0]
 80060bc:	0713      	lsls	r3, r2, #28
 80060be:	d504      	bpl.n	80060ca <_svfiprintf_r+0xc6>
 80060c0:	2353      	movs	r3, #83	; 0x53
 80060c2:	a904      	add	r1, sp, #16
 80060c4:	185b      	adds	r3, r3, r1
 80060c6:	212b      	movs	r1, #43	; 0x2b
 80060c8:	7019      	strb	r1, [r3, #0]
 80060ca:	7833      	ldrb	r3, [r6, #0]
 80060cc:	2b2a      	cmp	r3, #42	; 0x2a
 80060ce:	d016      	beq.n	80060fe <_svfiprintf_r+0xfa>
 80060d0:	0035      	movs	r5, r6
 80060d2:	2100      	movs	r1, #0
 80060d4:	200a      	movs	r0, #10
 80060d6:	68e3      	ldr	r3, [r4, #12]
 80060d8:	782a      	ldrb	r2, [r5, #0]
 80060da:	1c6e      	adds	r6, r5, #1
 80060dc:	3a30      	subs	r2, #48	; 0x30
 80060de:	2a09      	cmp	r2, #9
 80060e0:	d94e      	bls.n	8006180 <_svfiprintf_r+0x17c>
 80060e2:	2900      	cmp	r1, #0
 80060e4:	d111      	bne.n	800610a <_svfiprintf_r+0x106>
 80060e6:	e017      	b.n	8006118 <_svfiprintf_r+0x114>
 80060e8:	3501      	adds	r5, #1
 80060ea:	e7af      	b.n	800604c <_svfiprintf_r+0x48>
 80060ec:	9b05      	ldr	r3, [sp, #20]
 80060ee:	6822      	ldr	r2, [r4, #0]
 80060f0:	1ac0      	subs	r0, r0, r3
 80060f2:	2301      	movs	r3, #1
 80060f4:	4083      	lsls	r3, r0
 80060f6:	4313      	orrs	r3, r2
 80060f8:	002e      	movs	r6, r5
 80060fa:	6023      	str	r3, [r4, #0]
 80060fc:	e7cc      	b.n	8006098 <_svfiprintf_r+0x94>
 80060fe:	9b07      	ldr	r3, [sp, #28]
 8006100:	1d19      	adds	r1, r3, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	9107      	str	r1, [sp, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	db01      	blt.n	800610e <_svfiprintf_r+0x10a>
 800610a:	930b      	str	r3, [sp, #44]	; 0x2c
 800610c:	e004      	b.n	8006118 <_svfiprintf_r+0x114>
 800610e:	425b      	negs	r3, r3
 8006110:	60e3      	str	r3, [r4, #12]
 8006112:	2302      	movs	r3, #2
 8006114:	4313      	orrs	r3, r2
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	782b      	ldrb	r3, [r5, #0]
 800611a:	2b2e      	cmp	r3, #46	; 0x2e
 800611c:	d10a      	bne.n	8006134 <_svfiprintf_r+0x130>
 800611e:	786b      	ldrb	r3, [r5, #1]
 8006120:	2b2a      	cmp	r3, #42	; 0x2a
 8006122:	d135      	bne.n	8006190 <_svfiprintf_r+0x18c>
 8006124:	9b07      	ldr	r3, [sp, #28]
 8006126:	3502      	adds	r5, #2
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	9207      	str	r2, [sp, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	db2b      	blt.n	800618a <_svfiprintf_r+0x186>
 8006132:	9309      	str	r3, [sp, #36]	; 0x24
 8006134:	4e2f      	ldr	r6, [pc, #188]	; (80061f4 <_svfiprintf_r+0x1f0>)
 8006136:	2203      	movs	r2, #3
 8006138:	0030      	movs	r0, r6
 800613a:	7829      	ldrb	r1, [r5, #0]
 800613c:	f000 fa08 	bl	8006550 <memchr>
 8006140:	2800      	cmp	r0, #0
 8006142:	d006      	beq.n	8006152 <_svfiprintf_r+0x14e>
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	1b80      	subs	r0, r0, r6
 8006148:	4083      	lsls	r3, r0
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	3501      	adds	r5, #1
 800614e:	4313      	orrs	r3, r2
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	7829      	ldrb	r1, [r5, #0]
 8006154:	2206      	movs	r2, #6
 8006156:	4828      	ldr	r0, [pc, #160]	; (80061f8 <_svfiprintf_r+0x1f4>)
 8006158:	1c6e      	adds	r6, r5, #1
 800615a:	7621      	strb	r1, [r4, #24]
 800615c:	f000 f9f8 	bl	8006550 <memchr>
 8006160:	2800      	cmp	r0, #0
 8006162:	d03c      	beq.n	80061de <_svfiprintf_r+0x1da>
 8006164:	4b25      	ldr	r3, [pc, #148]	; (80061fc <_svfiprintf_r+0x1f8>)
 8006166:	2b00      	cmp	r3, #0
 8006168:	d125      	bne.n	80061b6 <_svfiprintf_r+0x1b2>
 800616a:	2207      	movs	r2, #7
 800616c:	9b07      	ldr	r3, [sp, #28]
 800616e:	3307      	adds	r3, #7
 8006170:	4393      	bics	r3, r2
 8006172:	3308      	adds	r3, #8
 8006174:	9307      	str	r3, [sp, #28]
 8006176:	6963      	ldr	r3, [r4, #20]
 8006178:	9a04      	ldr	r2, [sp, #16]
 800617a:	189b      	adds	r3, r3, r2
 800617c:	6163      	str	r3, [r4, #20]
 800617e:	e764      	b.n	800604a <_svfiprintf_r+0x46>
 8006180:	4343      	muls	r3, r0
 8006182:	0035      	movs	r5, r6
 8006184:	2101      	movs	r1, #1
 8006186:	189b      	adds	r3, r3, r2
 8006188:	e7a6      	b.n	80060d8 <_svfiprintf_r+0xd4>
 800618a:	2301      	movs	r3, #1
 800618c:	425b      	negs	r3, r3
 800618e:	e7d0      	b.n	8006132 <_svfiprintf_r+0x12e>
 8006190:	2300      	movs	r3, #0
 8006192:	200a      	movs	r0, #10
 8006194:	001a      	movs	r2, r3
 8006196:	3501      	adds	r5, #1
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	7829      	ldrb	r1, [r5, #0]
 800619c:	1c6e      	adds	r6, r5, #1
 800619e:	3930      	subs	r1, #48	; 0x30
 80061a0:	2909      	cmp	r1, #9
 80061a2:	d903      	bls.n	80061ac <_svfiprintf_r+0x1a8>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0c5      	beq.n	8006134 <_svfiprintf_r+0x130>
 80061a8:	9209      	str	r2, [sp, #36]	; 0x24
 80061aa:	e7c3      	b.n	8006134 <_svfiprintf_r+0x130>
 80061ac:	4342      	muls	r2, r0
 80061ae:	0035      	movs	r5, r6
 80061b0:	2301      	movs	r3, #1
 80061b2:	1852      	adds	r2, r2, r1
 80061b4:	e7f1      	b.n	800619a <_svfiprintf_r+0x196>
 80061b6:	aa07      	add	r2, sp, #28
 80061b8:	9200      	str	r2, [sp, #0]
 80061ba:	0021      	movs	r1, r4
 80061bc:	003a      	movs	r2, r7
 80061be:	4b10      	ldr	r3, [pc, #64]	; (8006200 <_svfiprintf_r+0x1fc>)
 80061c0:	9803      	ldr	r0, [sp, #12]
 80061c2:	e000      	b.n	80061c6 <_svfiprintf_r+0x1c2>
 80061c4:	bf00      	nop
 80061c6:	9004      	str	r0, [sp, #16]
 80061c8:	9b04      	ldr	r3, [sp, #16]
 80061ca:	3301      	adds	r3, #1
 80061cc:	d1d3      	bne.n	8006176 <_svfiprintf_r+0x172>
 80061ce:	89bb      	ldrh	r3, [r7, #12]
 80061d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80061d2:	065b      	lsls	r3, r3, #25
 80061d4:	d400      	bmi.n	80061d8 <_svfiprintf_r+0x1d4>
 80061d6:	e72c      	b.n	8006032 <_svfiprintf_r+0x2e>
 80061d8:	2001      	movs	r0, #1
 80061da:	4240      	negs	r0, r0
 80061dc:	e729      	b.n	8006032 <_svfiprintf_r+0x2e>
 80061de:	aa07      	add	r2, sp, #28
 80061e0:	9200      	str	r2, [sp, #0]
 80061e2:	0021      	movs	r1, r4
 80061e4:	003a      	movs	r2, r7
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <_svfiprintf_r+0x1fc>)
 80061e8:	9803      	ldr	r0, [sp, #12]
 80061ea:	f000 f87b 	bl	80062e4 <_printf_i>
 80061ee:	e7ea      	b.n	80061c6 <_svfiprintf_r+0x1c2>
 80061f0:	08007eec 	.word	0x08007eec
 80061f4:	08007ef2 	.word	0x08007ef2
 80061f8:	08007ef6 	.word	0x08007ef6
 80061fc:	00000000 	.word	0x00000000
 8006200:	08005f41 	.word	0x08005f41

08006204 <_printf_common>:
 8006204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006206:	0016      	movs	r6, r2
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	688a      	ldr	r2, [r1, #8]
 800620c:	690b      	ldr	r3, [r1, #16]
 800620e:	000c      	movs	r4, r1
 8006210:	9000      	str	r0, [sp, #0]
 8006212:	4293      	cmp	r3, r2
 8006214:	da00      	bge.n	8006218 <_printf_common+0x14>
 8006216:	0013      	movs	r3, r2
 8006218:	0022      	movs	r2, r4
 800621a:	6033      	str	r3, [r6, #0]
 800621c:	3243      	adds	r2, #67	; 0x43
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	2a00      	cmp	r2, #0
 8006222:	d001      	beq.n	8006228 <_printf_common+0x24>
 8006224:	3301      	adds	r3, #1
 8006226:	6033      	str	r3, [r6, #0]
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	069b      	lsls	r3, r3, #26
 800622c:	d502      	bpl.n	8006234 <_printf_common+0x30>
 800622e:	6833      	ldr	r3, [r6, #0]
 8006230:	3302      	adds	r3, #2
 8006232:	6033      	str	r3, [r6, #0]
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	2306      	movs	r3, #6
 8006238:	0015      	movs	r5, r2
 800623a:	401d      	ands	r5, r3
 800623c:	421a      	tst	r2, r3
 800623e:	d027      	beq.n	8006290 <_printf_common+0x8c>
 8006240:	0023      	movs	r3, r4
 8006242:	3343      	adds	r3, #67	; 0x43
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	1e5a      	subs	r2, r3, #1
 8006248:	4193      	sbcs	r3, r2
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	0692      	lsls	r2, r2, #26
 800624e:	d430      	bmi.n	80062b2 <_printf_common+0xae>
 8006250:	0022      	movs	r2, r4
 8006252:	9901      	ldr	r1, [sp, #4]
 8006254:	9800      	ldr	r0, [sp, #0]
 8006256:	9d08      	ldr	r5, [sp, #32]
 8006258:	3243      	adds	r2, #67	; 0x43
 800625a:	47a8      	blx	r5
 800625c:	3001      	adds	r0, #1
 800625e:	d025      	beq.n	80062ac <_printf_common+0xa8>
 8006260:	2206      	movs	r2, #6
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	2500      	movs	r5, #0
 8006266:	4013      	ands	r3, r2
 8006268:	2b04      	cmp	r3, #4
 800626a:	d105      	bne.n	8006278 <_printf_common+0x74>
 800626c:	6833      	ldr	r3, [r6, #0]
 800626e:	68e5      	ldr	r5, [r4, #12]
 8006270:	1aed      	subs	r5, r5, r3
 8006272:	43eb      	mvns	r3, r5
 8006274:	17db      	asrs	r3, r3, #31
 8006276:	401d      	ands	r5, r3
 8006278:	68a3      	ldr	r3, [r4, #8]
 800627a:	6922      	ldr	r2, [r4, #16]
 800627c:	4293      	cmp	r3, r2
 800627e:	dd01      	ble.n	8006284 <_printf_common+0x80>
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	18ed      	adds	r5, r5, r3
 8006284:	2600      	movs	r6, #0
 8006286:	42b5      	cmp	r5, r6
 8006288:	d120      	bne.n	80062cc <_printf_common+0xc8>
 800628a:	2000      	movs	r0, #0
 800628c:	e010      	b.n	80062b0 <_printf_common+0xac>
 800628e:	3501      	adds	r5, #1
 8006290:	68e3      	ldr	r3, [r4, #12]
 8006292:	6832      	ldr	r2, [r6, #0]
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	42ab      	cmp	r3, r5
 8006298:	ddd2      	ble.n	8006240 <_printf_common+0x3c>
 800629a:	0022      	movs	r2, r4
 800629c:	2301      	movs	r3, #1
 800629e:	9901      	ldr	r1, [sp, #4]
 80062a0:	9800      	ldr	r0, [sp, #0]
 80062a2:	9f08      	ldr	r7, [sp, #32]
 80062a4:	3219      	adds	r2, #25
 80062a6:	47b8      	blx	r7
 80062a8:	3001      	adds	r0, #1
 80062aa:	d1f0      	bne.n	800628e <_printf_common+0x8a>
 80062ac:	2001      	movs	r0, #1
 80062ae:	4240      	negs	r0, r0
 80062b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062b2:	2030      	movs	r0, #48	; 0x30
 80062b4:	18e1      	adds	r1, r4, r3
 80062b6:	3143      	adds	r1, #67	; 0x43
 80062b8:	7008      	strb	r0, [r1, #0]
 80062ba:	0021      	movs	r1, r4
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	3145      	adds	r1, #69	; 0x45
 80062c0:	7809      	ldrb	r1, [r1, #0]
 80062c2:	18a2      	adds	r2, r4, r2
 80062c4:	3243      	adds	r2, #67	; 0x43
 80062c6:	3302      	adds	r3, #2
 80062c8:	7011      	strb	r1, [r2, #0]
 80062ca:	e7c1      	b.n	8006250 <_printf_common+0x4c>
 80062cc:	0022      	movs	r2, r4
 80062ce:	2301      	movs	r3, #1
 80062d0:	9901      	ldr	r1, [sp, #4]
 80062d2:	9800      	ldr	r0, [sp, #0]
 80062d4:	9f08      	ldr	r7, [sp, #32]
 80062d6:	321a      	adds	r2, #26
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	d0e6      	beq.n	80062ac <_printf_common+0xa8>
 80062de:	3601      	adds	r6, #1
 80062e0:	e7d1      	b.n	8006286 <_printf_common+0x82>
	...

080062e4 <_printf_i>:
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e6:	b08b      	sub	sp, #44	; 0x2c
 80062e8:	9206      	str	r2, [sp, #24]
 80062ea:	000a      	movs	r2, r1
 80062ec:	3243      	adds	r2, #67	; 0x43
 80062ee:	9307      	str	r3, [sp, #28]
 80062f0:	9005      	str	r0, [sp, #20]
 80062f2:	9204      	str	r2, [sp, #16]
 80062f4:	7e0a      	ldrb	r2, [r1, #24]
 80062f6:	000c      	movs	r4, r1
 80062f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062fa:	2a78      	cmp	r2, #120	; 0x78
 80062fc:	d809      	bhi.n	8006312 <_printf_i+0x2e>
 80062fe:	2a62      	cmp	r2, #98	; 0x62
 8006300:	d80b      	bhi.n	800631a <_printf_i+0x36>
 8006302:	2a00      	cmp	r2, #0
 8006304:	d100      	bne.n	8006308 <_printf_i+0x24>
 8006306:	e0be      	b.n	8006486 <_printf_i+0x1a2>
 8006308:	497c      	ldr	r1, [pc, #496]	; (80064fc <_printf_i+0x218>)
 800630a:	9103      	str	r1, [sp, #12]
 800630c:	2a58      	cmp	r2, #88	; 0x58
 800630e:	d100      	bne.n	8006312 <_printf_i+0x2e>
 8006310:	e093      	b.n	800643a <_printf_i+0x156>
 8006312:	0026      	movs	r6, r4
 8006314:	3642      	adds	r6, #66	; 0x42
 8006316:	7032      	strb	r2, [r6, #0]
 8006318:	e022      	b.n	8006360 <_printf_i+0x7c>
 800631a:	0010      	movs	r0, r2
 800631c:	3863      	subs	r0, #99	; 0x63
 800631e:	2815      	cmp	r0, #21
 8006320:	d8f7      	bhi.n	8006312 <_printf_i+0x2e>
 8006322:	f7f9 fef7 	bl	8000114 <__gnu_thumb1_case_shi>
 8006326:	0016      	.short	0x0016
 8006328:	fff6001f 	.word	0xfff6001f
 800632c:	fff6fff6 	.word	0xfff6fff6
 8006330:	001ffff6 	.word	0x001ffff6
 8006334:	fff6fff6 	.word	0xfff6fff6
 8006338:	fff6fff6 	.word	0xfff6fff6
 800633c:	003600a3 	.word	0x003600a3
 8006340:	fff60083 	.word	0xfff60083
 8006344:	00b4fff6 	.word	0x00b4fff6
 8006348:	0036fff6 	.word	0x0036fff6
 800634c:	fff6fff6 	.word	0xfff6fff6
 8006350:	0087      	.short	0x0087
 8006352:	0026      	movs	r6, r4
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	3642      	adds	r6, #66	; 0x42
 8006358:	1d11      	adds	r1, r2, #4
 800635a:	6019      	str	r1, [r3, #0]
 800635c:	6813      	ldr	r3, [r2, #0]
 800635e:	7033      	strb	r3, [r6, #0]
 8006360:	2301      	movs	r3, #1
 8006362:	e0a2      	b.n	80064aa <_printf_i+0x1c6>
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	6809      	ldr	r1, [r1, #0]
 8006368:	1d02      	adds	r2, r0, #4
 800636a:	060d      	lsls	r5, r1, #24
 800636c:	d50b      	bpl.n	8006386 <_printf_i+0xa2>
 800636e:	6805      	ldr	r5, [r0, #0]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	2d00      	cmp	r5, #0
 8006374:	da03      	bge.n	800637e <_printf_i+0x9a>
 8006376:	232d      	movs	r3, #45	; 0x2d
 8006378:	9a04      	ldr	r2, [sp, #16]
 800637a:	426d      	negs	r5, r5
 800637c:	7013      	strb	r3, [r2, #0]
 800637e:	4b5f      	ldr	r3, [pc, #380]	; (80064fc <_printf_i+0x218>)
 8006380:	270a      	movs	r7, #10
 8006382:	9303      	str	r3, [sp, #12]
 8006384:	e01b      	b.n	80063be <_printf_i+0xda>
 8006386:	6805      	ldr	r5, [r0, #0]
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	0649      	lsls	r1, r1, #25
 800638c:	d5f1      	bpl.n	8006372 <_printf_i+0x8e>
 800638e:	b22d      	sxth	r5, r5
 8006390:	e7ef      	b.n	8006372 <_printf_i+0x8e>
 8006392:	680d      	ldr	r5, [r1, #0]
 8006394:	6819      	ldr	r1, [r3, #0]
 8006396:	1d08      	adds	r0, r1, #4
 8006398:	6018      	str	r0, [r3, #0]
 800639a:	062e      	lsls	r6, r5, #24
 800639c:	d501      	bpl.n	80063a2 <_printf_i+0xbe>
 800639e:	680d      	ldr	r5, [r1, #0]
 80063a0:	e003      	b.n	80063aa <_printf_i+0xc6>
 80063a2:	066d      	lsls	r5, r5, #25
 80063a4:	d5fb      	bpl.n	800639e <_printf_i+0xba>
 80063a6:	680d      	ldr	r5, [r1, #0]
 80063a8:	b2ad      	uxth	r5, r5
 80063aa:	4b54      	ldr	r3, [pc, #336]	; (80064fc <_printf_i+0x218>)
 80063ac:	2708      	movs	r7, #8
 80063ae:	9303      	str	r3, [sp, #12]
 80063b0:	2a6f      	cmp	r2, #111	; 0x6f
 80063b2:	d000      	beq.n	80063b6 <_printf_i+0xd2>
 80063b4:	3702      	adds	r7, #2
 80063b6:	0023      	movs	r3, r4
 80063b8:	2200      	movs	r2, #0
 80063ba:	3343      	adds	r3, #67	; 0x43
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	60a3      	str	r3, [r4, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	db03      	blt.n	80063ce <_printf_i+0xea>
 80063c6:	2104      	movs	r1, #4
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	438a      	bics	r2, r1
 80063cc:	6022      	str	r2, [r4, #0]
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	d102      	bne.n	80063d8 <_printf_i+0xf4>
 80063d2:	9e04      	ldr	r6, [sp, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00c      	beq.n	80063f2 <_printf_i+0x10e>
 80063d8:	9e04      	ldr	r6, [sp, #16]
 80063da:	0028      	movs	r0, r5
 80063dc:	0039      	movs	r1, r7
 80063de:	f7f9 ff29 	bl	8000234 <__aeabi_uidivmod>
 80063e2:	9b03      	ldr	r3, [sp, #12]
 80063e4:	3e01      	subs	r6, #1
 80063e6:	5c5b      	ldrb	r3, [r3, r1]
 80063e8:	7033      	strb	r3, [r6, #0]
 80063ea:	002b      	movs	r3, r5
 80063ec:	0005      	movs	r5, r0
 80063ee:	429f      	cmp	r7, r3
 80063f0:	d9f3      	bls.n	80063da <_printf_i+0xf6>
 80063f2:	2f08      	cmp	r7, #8
 80063f4:	d109      	bne.n	800640a <_printf_i+0x126>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	07db      	lsls	r3, r3, #31
 80063fa:	d506      	bpl.n	800640a <_printf_i+0x126>
 80063fc:	6862      	ldr	r2, [r4, #4]
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	429a      	cmp	r2, r3
 8006402:	dc02      	bgt.n	800640a <_printf_i+0x126>
 8006404:	2330      	movs	r3, #48	; 0x30
 8006406:	3e01      	subs	r6, #1
 8006408:	7033      	strb	r3, [r6, #0]
 800640a:	9b04      	ldr	r3, [sp, #16]
 800640c:	1b9b      	subs	r3, r3, r6
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	9b07      	ldr	r3, [sp, #28]
 8006412:	0021      	movs	r1, r4
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	9805      	ldr	r0, [sp, #20]
 8006418:	9b06      	ldr	r3, [sp, #24]
 800641a:	aa09      	add	r2, sp, #36	; 0x24
 800641c:	f7ff fef2 	bl	8006204 <_printf_common>
 8006420:	3001      	adds	r0, #1
 8006422:	d147      	bne.n	80064b4 <_printf_i+0x1d0>
 8006424:	2001      	movs	r0, #1
 8006426:	4240      	negs	r0, r0
 8006428:	b00b      	add	sp, #44	; 0x2c
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642c:	2220      	movs	r2, #32
 800642e:	6809      	ldr	r1, [r1, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	6022      	str	r2, [r4, #0]
 8006434:	2278      	movs	r2, #120	; 0x78
 8006436:	4932      	ldr	r1, [pc, #200]	; (8006500 <_printf_i+0x21c>)
 8006438:	9103      	str	r1, [sp, #12]
 800643a:	0021      	movs	r1, r4
 800643c:	3145      	adds	r1, #69	; 0x45
 800643e:	700a      	strb	r2, [r1, #0]
 8006440:	6819      	ldr	r1, [r3, #0]
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	c920      	ldmia	r1!, {r5}
 8006446:	0610      	lsls	r0, r2, #24
 8006448:	d402      	bmi.n	8006450 <_printf_i+0x16c>
 800644a:	0650      	lsls	r0, r2, #25
 800644c:	d500      	bpl.n	8006450 <_printf_i+0x16c>
 800644e:	b2ad      	uxth	r5, r5
 8006450:	6019      	str	r1, [r3, #0]
 8006452:	07d3      	lsls	r3, r2, #31
 8006454:	d502      	bpl.n	800645c <_printf_i+0x178>
 8006456:	2320      	movs	r3, #32
 8006458:	4313      	orrs	r3, r2
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	2710      	movs	r7, #16
 800645e:	2d00      	cmp	r5, #0
 8006460:	d1a9      	bne.n	80063b6 <_printf_i+0xd2>
 8006462:	2220      	movs	r2, #32
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	4393      	bics	r3, r2
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	e7a4      	b.n	80063b6 <_printf_i+0xd2>
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	680d      	ldr	r5, [r1, #0]
 8006470:	1d10      	adds	r0, r2, #4
 8006472:	6949      	ldr	r1, [r1, #20]
 8006474:	6018      	str	r0, [r3, #0]
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	062e      	lsls	r6, r5, #24
 800647a:	d501      	bpl.n	8006480 <_printf_i+0x19c>
 800647c:	6019      	str	r1, [r3, #0]
 800647e:	e002      	b.n	8006486 <_printf_i+0x1a2>
 8006480:	066d      	lsls	r5, r5, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0x198>
 8006484:	8019      	strh	r1, [r3, #0]
 8006486:	2300      	movs	r3, #0
 8006488:	9e04      	ldr	r6, [sp, #16]
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	e7c0      	b.n	8006410 <_printf_i+0x12c>
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	1d11      	adds	r1, r2, #4
 8006492:	6019      	str	r1, [r3, #0]
 8006494:	6816      	ldr	r6, [r2, #0]
 8006496:	2100      	movs	r1, #0
 8006498:	0030      	movs	r0, r6
 800649a:	6862      	ldr	r2, [r4, #4]
 800649c:	f000 f858 	bl	8006550 <memchr>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d001      	beq.n	80064a8 <_printf_i+0x1c4>
 80064a4:	1b80      	subs	r0, r0, r6
 80064a6:	6060      	str	r0, [r4, #4]
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9a04      	ldr	r2, [sp, #16]
 80064b0:	7013      	strb	r3, [r2, #0]
 80064b2:	e7ad      	b.n	8006410 <_printf_i+0x12c>
 80064b4:	0032      	movs	r2, r6
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	9906      	ldr	r1, [sp, #24]
 80064ba:	9805      	ldr	r0, [sp, #20]
 80064bc:	9d07      	ldr	r5, [sp, #28]
 80064be:	47a8      	blx	r5
 80064c0:	3001      	adds	r0, #1
 80064c2:	d0af      	beq.n	8006424 <_printf_i+0x140>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	079b      	lsls	r3, r3, #30
 80064c8:	d415      	bmi.n	80064f6 <_printf_i+0x212>
 80064ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064cc:	68e0      	ldr	r0, [r4, #12]
 80064ce:	4298      	cmp	r0, r3
 80064d0:	daaa      	bge.n	8006428 <_printf_i+0x144>
 80064d2:	0018      	movs	r0, r3
 80064d4:	e7a8      	b.n	8006428 <_printf_i+0x144>
 80064d6:	0022      	movs	r2, r4
 80064d8:	2301      	movs	r3, #1
 80064da:	9906      	ldr	r1, [sp, #24]
 80064dc:	9805      	ldr	r0, [sp, #20]
 80064de:	9e07      	ldr	r6, [sp, #28]
 80064e0:	3219      	adds	r2, #25
 80064e2:	47b0      	blx	r6
 80064e4:	3001      	adds	r0, #1
 80064e6:	d09d      	beq.n	8006424 <_printf_i+0x140>
 80064e8:	3501      	adds	r5, #1
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	dcf0      	bgt.n	80064d6 <_printf_i+0x1f2>
 80064f4:	e7e9      	b.n	80064ca <_printf_i+0x1e6>
 80064f6:	2500      	movs	r5, #0
 80064f8:	e7f7      	b.n	80064ea <_printf_i+0x206>
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	08007efd 	.word	0x08007efd
 8006500:	08007f0e 	.word	0x08007f0e

08006504 <memmove>:
 8006504:	b510      	push	{r4, lr}
 8006506:	4288      	cmp	r0, r1
 8006508:	d902      	bls.n	8006510 <memmove+0xc>
 800650a:	188b      	adds	r3, r1, r2
 800650c:	4298      	cmp	r0, r3
 800650e:	d303      	bcc.n	8006518 <memmove+0x14>
 8006510:	2300      	movs	r3, #0
 8006512:	e007      	b.n	8006524 <memmove+0x20>
 8006514:	5c8b      	ldrb	r3, [r1, r2]
 8006516:	5483      	strb	r3, [r0, r2]
 8006518:	3a01      	subs	r2, #1
 800651a:	d2fb      	bcs.n	8006514 <memmove+0x10>
 800651c:	bd10      	pop	{r4, pc}
 800651e:	5ccc      	ldrb	r4, [r1, r3]
 8006520:	54c4      	strb	r4, [r0, r3]
 8006522:	3301      	adds	r3, #1
 8006524:	429a      	cmp	r2, r3
 8006526:	d1fa      	bne.n	800651e <memmove+0x1a>
 8006528:	e7f8      	b.n	800651c <memmove+0x18>
	...

0800652c <_sbrk_r>:
 800652c:	2300      	movs	r3, #0
 800652e:	b570      	push	{r4, r5, r6, lr}
 8006530:	4d06      	ldr	r5, [pc, #24]	; (800654c <_sbrk_r+0x20>)
 8006532:	0004      	movs	r4, r0
 8006534:	0008      	movs	r0, r1
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	f7fc f876 	bl	8002628 <_sbrk>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d103      	bne.n	8006548 <_sbrk_r+0x1c>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d000      	beq.n	8006548 <_sbrk_r+0x1c>
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	bd70      	pop	{r4, r5, r6, pc}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	20000454 	.word	0x20000454

08006550 <memchr>:
 8006550:	b2c9      	uxtb	r1, r1
 8006552:	1882      	adds	r2, r0, r2
 8006554:	4290      	cmp	r0, r2
 8006556:	d101      	bne.n	800655c <memchr+0xc>
 8006558:	2000      	movs	r0, #0
 800655a:	4770      	bx	lr
 800655c:	7803      	ldrb	r3, [r0, #0]
 800655e:	428b      	cmp	r3, r1
 8006560:	d0fb      	beq.n	800655a <memchr+0xa>
 8006562:	3001      	adds	r0, #1
 8006564:	e7f6      	b.n	8006554 <memchr+0x4>

08006566 <_realloc_r>:
 8006566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006568:	0007      	movs	r7, r0
 800656a:	000e      	movs	r6, r1
 800656c:	0014      	movs	r4, r2
 800656e:	2900      	cmp	r1, #0
 8006570:	d105      	bne.n	800657e <_realloc_r+0x18>
 8006572:	0011      	movs	r1, r2
 8006574:	f7ff fc52 	bl	8005e1c <_malloc_r>
 8006578:	0005      	movs	r5, r0
 800657a:	0028      	movs	r0, r5
 800657c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800657e:	2a00      	cmp	r2, #0
 8006580:	d103      	bne.n	800658a <_realloc_r+0x24>
 8006582:	f7ff fbdf 	bl	8005d44 <_free_r>
 8006586:	0025      	movs	r5, r4
 8006588:	e7f7      	b.n	800657a <_realloc_r+0x14>
 800658a:	f000 f81b 	bl	80065c4 <_malloc_usable_size_r>
 800658e:	9001      	str	r0, [sp, #4]
 8006590:	4284      	cmp	r4, r0
 8006592:	d803      	bhi.n	800659c <_realloc_r+0x36>
 8006594:	0035      	movs	r5, r6
 8006596:	0843      	lsrs	r3, r0, #1
 8006598:	42a3      	cmp	r3, r4
 800659a:	d3ee      	bcc.n	800657a <_realloc_r+0x14>
 800659c:	0021      	movs	r1, r4
 800659e:	0038      	movs	r0, r7
 80065a0:	f7ff fc3c 	bl	8005e1c <_malloc_r>
 80065a4:	1e05      	subs	r5, r0, #0
 80065a6:	d0e8      	beq.n	800657a <_realloc_r+0x14>
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	0022      	movs	r2, r4
 80065ac:	429c      	cmp	r4, r3
 80065ae:	d900      	bls.n	80065b2 <_realloc_r+0x4c>
 80065b0:	001a      	movs	r2, r3
 80065b2:	0031      	movs	r1, r6
 80065b4:	0028      	movs	r0, r5
 80065b6:	f7ff fbbb 	bl	8005d30 <memcpy>
 80065ba:	0031      	movs	r1, r6
 80065bc:	0038      	movs	r0, r7
 80065be:	f7ff fbc1 	bl	8005d44 <_free_r>
 80065c2:	e7da      	b.n	800657a <_realloc_r+0x14>

080065c4 <_malloc_usable_size_r>:
 80065c4:	1f0b      	subs	r3, r1, #4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	1f18      	subs	r0, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da01      	bge.n	80065d2 <_malloc_usable_size_r+0xe>
 80065ce:	580b      	ldr	r3, [r1, r0]
 80065d0:	18c0      	adds	r0, r0, r3
 80065d2:	4770      	bx	lr

080065d4 <_init>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr

080065e0 <_fini>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr
