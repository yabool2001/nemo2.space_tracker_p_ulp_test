
nemo2.space_tracker_p_ulp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006718  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001910  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e4  080080e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080ec  080080ec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080080f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  2000005c  08008150  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08008150  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120d2  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002616  00000000  00000000  00032199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  000347b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc1  00000000  00000000  00035818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce9b  00000000  00000000  000364d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cfb  00000000  00000000  00053374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b73c3  00000000  00000000  0006506f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040c4  00000000  00000000  0011c434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001204f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080067bc 	.word	0x080067bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080067bc 	.word	0x080067bc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8d8 	bl	8000628 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8d3 	bl	8000628 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b0e4      	sub	sp, #400	; 0x190
 8000644:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000646:	24c8      	movs	r4, #200	; 0xc8
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	23c6      	movs	r3, #198	; 0xc6
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f005 fc2d 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <astronode_send_cfg_sr+0x64>)
 8000658:	25c8      	movs	r5, #200	; 0xc8
 800065a:	006d      	lsls	r5, r5, #1
 800065c:	195b      	adds	r3, r3, r5
 800065e:	19db      	adds	r3, r3, r7
 8000660:	0018      	movs	r0, r3
 8000662:	23c6      	movs	r3, #198	; 0xc6
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f005 fc22 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2210      	movs	r2, #16
 8000670:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8000672:	003a      	movs	r2, r7
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0011      	movs	r1, r2
 8000678:	0018      	movs	r0, r3
 800067a:	f000 ff79 	bl	8001570 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <astronode_send_cfg_sr+0x64>)
 8000680:	195b      	adds	r3, r3, r5
 8000682:	19db      	adds	r3, r3, r7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b90      	cmp	r3, #144	; 0x90
 8000688:	d104      	bne.n	8000694 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <astronode_send_cfg_sr+0x68>)
 800068c:	0018      	movs	r0, r3
 800068e:	f001 fd29 	bl	80020e4 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8000692:	e003      	b.n	800069c <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <astronode_send_cfg_sr+0x6c>)
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fd24 	bl	80020e4 <send_debug_logs>
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b064      	add	sp, #400	; 0x190
 80006a2:	bdb0      	pop	{r4, r5, r7, pc}
 80006a4:	fffffe70 	.word	0xfffffe70
 80006a8:	08006be4 	.word	0x08006be4
 80006ac:	08006c18 	.word	0x08006c18

080006b0 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	b0e7      	sub	sp, #412	; 0x19c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	0005      	movs	r5, r0
 80006b8:	000c      	movs	r4, r1
 80006ba:	0010      	movs	r0, r2
 80006bc:	0019      	movs	r1, r3
 80006be:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <astronode_send_cfg_wr+0x13c>)
 80006c0:	26cc      	movs	r6, #204	; 0xcc
 80006c2:	0076      	lsls	r6, r6, #1
 80006c4:	199b      	adds	r3, r3, r6
 80006c6:	19db      	adds	r3, r3, r7
 80006c8:	1c2a      	adds	r2, r5, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <astronode_send_cfg_wr+0x140>)
 80006ce:	0035      	movs	r5, r6
 80006d0:	195b      	adds	r3, r3, r5
 80006d2:	19db      	adds	r3, r3, r7
 80006d4:	1c22      	adds	r2, r4, #0
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <astronode_send_cfg_wr+0x144>)
 80006da:	002c      	movs	r4, r5
 80006dc:	191b      	adds	r3, r3, r4
 80006de:	19db      	adds	r3, r3, r7
 80006e0:	1c02      	adds	r2, r0, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <astronode_send_cfg_wr+0x148>)
 80006e6:	191b      	adds	r3, r3, r4
 80006e8:	19db      	adds	r3, r3, r7
 80006ea:	1c0a      	adds	r2, r1, #0
 80006ec:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80006ee:	25d0      	movs	r5, #208	; 0xd0
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	0018      	movs	r0, r3
 80006f4:	23c6      	movs	r3, #198	; 0xc6
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f005 fbd9 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 80006fe:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <astronode_send_cfg_wr+0x14c>)
 8000700:	191b      	adds	r3, r3, r4
 8000702:	19db      	adds	r3, r3, r7
 8000704:	0018      	movs	r0, r3
 8000706:	23c6      	movs	r3, #198	; 0xc6
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f005 fbd0 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8000710:	0029      	movs	r1, r5
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2205      	movs	r2, #5
 8000716:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8000718:	4b34      	ldr	r3, [pc, #208]	; (80007ec <astronode_send_cfg_wr+0x13c>)
 800071a:	191b      	adds	r3, r3, r4
 800071c:	19db      	adds	r3, r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	569a      	ldrsb	r2, [r3, r2]
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <astronode_send_cfg_wr+0x140>)
 8000724:	191b      	adds	r3, r3, r4
 8000726:	19db      	adds	r3, r3, r7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8000732:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <astronode_send_cfg_wr+0x144>)
 8000734:	191b      	adds	r3, r3, r4
 8000736:	19db      	adds	r3, r3, r7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <astronode_send_cfg_wr+0x148>)
 8000744:	191b      	adds	r3, r3, r4
 8000746:	19db      	adds	r3, r3, r7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b25b      	sxtb	r3, r3
 8000752:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8000754:	187b      	adds	r3, r7, r1
 8000756:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8000758:	23d4      	movs	r3, #212	; 0xd4
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2508      	movs	r5, #8
 800075e:	195b      	adds	r3, r3, r5
 8000760:	19db      	adds	r3, r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	569a      	ldrsb	r2, [r3, r2]
 8000766:	23d6      	movs	r3, #214	; 0xd6
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	195b      	adds	r3, r3, r5
 800076c:	19db      	adds	r3, r3, r7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b25b      	sxtb	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8000778:	23d8      	movs	r3, #216	; 0xd8
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	195b      	adds	r3, r3, r5
 800077e:	19db      	adds	r3, r3, r7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800078a:	23da      	movs	r3, #218	; 0xda
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	195b      	adds	r3, r3, r5
 8000790:	19db      	adds	r3, r3, r7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b25b      	sxtb	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b25b      	sxtb	r3, r3
 800079c:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80007a2:	0008      	movs	r0, r1
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	22c4      	movs	r2, #196	; 0xc4
 80007a8:	2103      	movs	r1, #3
 80007aa:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80007ac:	002b      	movs	r3, r5
 80007ae:	18fa      	adds	r2, r7, r3
 80007b0:	183b      	adds	r3, r7, r0
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fedb 	bl	8001570 <astronode_transport_send_receive>
 80007ba:	0003      	movs	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10f      	bne.n	80007e0 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <astronode_send_cfg_wr+0x14c>)
 80007c2:	191b      	adds	r3, r3, r4
 80007c4:	19db      	adds	r3, r3, r7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b85      	cmp	r3, #133	; 0x85
 80007ca:	d105      	bne.n	80007d8 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <astronode_send_cfg_wr+0x150>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fc88 	bl	80020e4 <send_debug_logs>
            return true ;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e004      	b.n	80007e2 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <astronode_send_cfg_wr+0x154>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fc82 	bl	80020e4 <send_debug_logs>
        }
    }
    return false ;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b067      	add	sp, #412	; 0x19c
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	fffffe6f 	.word	0xfffffe6f
 80007f0:	fffffe6e 	.word	0xfffffe6e
 80007f4:	fffffe6d 	.word	0xfffffe6d
 80007f8:	fffffe6c 	.word	0xfffffe6c
 80007fc:	fffffe70 	.word	0xfffffe70
 8000800:	08006c4c 	.word	0x08006c4c
 8000804:	08006c78 	.word	0x08006c78

08000808 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	b0ed      	sub	sp, #436	; 0x1b4
 800080c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800080e:	21c8      	movs	r1, #200	; 0xc8
 8000810:	2318      	movs	r3, #24
 8000812:	18cb      	adds	r3, r1, r3
 8000814:	19db      	adds	r3, r3, r7
 8000816:	0018      	movs	r0, r3
 8000818:	23c6      	movs	r3, #198	; 0xc6
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f005 fb47 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000822:	4b4a      	ldr	r3, [pc, #296]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000824:	26cc      	movs	r6, #204	; 0xcc
 8000826:	0076      	lsls	r6, r6, #1
 8000828:	199b      	adds	r3, r3, r6
 800082a:	2218      	movs	r2, #24
 800082c:	4694      	mov	ip, r2
 800082e:	44bc      	add	ip, r7
 8000830:	4463      	add	r3, ip
 8000832:	0018      	movs	r0, r3
 8000834:	23c6      	movs	r3, #198	; 0xc6
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f005 fb39 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800083e:	21c8      	movs	r1, #200	; 0xc8
 8000840:	2318      	movs	r3, #24
 8000842:	18cb      	adds	r3, r1, r3
 8000844:	19db      	adds	r3, r3, r7
 8000846:	2219      	movs	r2, #25
 8000848:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800084a:	2318      	movs	r3, #24
 800084c:	18fa      	adds	r2, r7, r3
 800084e:	2318      	movs	r3, #24
 8000850:	18cb      	adds	r3, r1, r3
 8000852:	19db      	adds	r3, r3, r7
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fe8a 	bl	8001570 <astronode_transport_send_receive>
 800085c:	0003      	movs	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d16f      	bne.n	8000942 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000864:	0032      	movs	r2, r6
 8000866:	189b      	adds	r3, r3, r2
 8000868:	2118      	movs	r1, #24
 800086a:	468c      	mov	ip, r1
 800086c:	44bc      	add	ip, r7
 800086e:	4463      	add	r3, ip
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b99      	cmp	r3, #153	; 0x99
 8000874:	d161      	bne.n	800093a <astronode_send_mgi_rr+0x132>
        {
 8000876:	466b      	mov	r3, sp
 8000878:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <astronode_send_mgi_rr+0x144>)
 800087c:	189b      	adds	r3, r3, r2
 800087e:	2218      	movs	r2, #24
 8000880:	4694      	mov	ip, r2
 8000882:	44bc      	add	ip, r7
 8000884:	4463      	add	r3, ip
 8000886:	22c4      	movs	r2, #196	; 0xc4
 8000888:	5a9b      	ldrh	r3, [r3, r2]
 800088a:	001a      	movs	r2, r3
 800088c:	3a01      	subs	r2, #1
 800088e:	21ca      	movs	r1, #202	; 0xca
 8000890:	0049      	lsls	r1, r1, #1
 8000892:	2018      	movs	r0, #24
 8000894:	1809      	adds	r1, r1, r0
 8000896:	19c9      	adds	r1, r1, r7
 8000898:	600a      	str	r2, [r1, #0]
 800089a:	001c      	movs	r4, r3
 800089c:	2200      	movs	r2, #0
 800089e:	0015      	movs	r5, r2
 80008a0:	0020      	movs	r0, r4
 80008a2:	0029      	movs	r1, r5
 80008a4:	0004      	movs	r4, r0
 80008a6:	0f62      	lsrs	r2, r4, #29
 80008a8:	000c      	movs	r4, r1
 80008aa:	00e4      	lsls	r4, r4, #3
 80008ac:	617c      	str	r4, [r7, #20]
 80008ae:	697c      	ldr	r4, [r7, #20]
 80008b0:	4314      	orrs	r4, r2
 80008b2:	617c      	str	r4, [r7, #20]
 80008b4:	0001      	movs	r1, r0
 80008b6:	00c9      	lsls	r1, r1, #3
 80008b8:	6139      	str	r1, [r7, #16]
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	0004      	movs	r4, r0
 80008c6:	0f62      	lsrs	r2, r4, #29
 80008c8:	000c      	movs	r4, r1
 80008ca:	00e4      	lsls	r4, r4, #3
 80008cc:	60fc      	str	r4, [r7, #12]
 80008ce:	68fc      	ldr	r4, [r7, #12]
 80008d0:	4314      	orrs	r4, r2
 80008d2:	60fc      	str	r4, [r7, #12]
 80008d4:	0001      	movs	r1, r0
 80008d6:	00ca      	lsls	r2, r1, #3
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	3307      	adds	r3, #7
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4669      	mov	r1, sp
 80008e2:	1acb      	subs	r3, r1, r3
 80008e4:	469d      	mov	sp, r3
 80008e6:	466b      	mov	r3, sp
 80008e8:	3300      	adds	r3, #0
 80008ea:	24c8      	movs	r4, #200	; 0xc8
 80008ec:	0064      	lsls	r4, r4, #1
 80008ee:	2218      	movs	r2, #24
 80008f0:	18a2      	adds	r2, r4, r2
 80008f2:	19d1      	adds	r1, r2, r7
 80008f4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <astronode_send_mgi_rr+0x148>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fbf3 	bl	80020e4 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <astronode_send_mgi_rr+0x144>)
 8000900:	22cc      	movs	r2, #204	; 0xcc
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	189b      	adds	r3, r3, r2
 8000906:	2218      	movs	r2, #24
 8000908:	4694      	mov	ip, r2
 800090a:	44bc      	add	ip, r7
 800090c:	4463      	add	r3, ip
 800090e:	22c4      	movs	r2, #196	; 0xc4
 8000910:	5a9b      	ldrh	r3, [r3, r2]
 8000912:	0019      	movs	r1, r3
 8000914:	2318      	movs	r3, #24
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	3301      	adds	r3, #1
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <astronode_send_mgi_rr+0x14c>)
 800091c:	2018      	movs	r0, #24
 800091e:	1820      	adds	r0, r4, r0
 8000920:	19c0      	adds	r0, r0, r7
 8000922:	6800      	ldr	r0, [r0, #0]
 8000924:	f005 fa70 	bl	8005e08 <sniprintf>
            send_debug_logs(guid);
 8000928:	2318      	movs	r3, #24
 800092a:	18e3      	adds	r3, r4, r3
 800092c:	19db      	adds	r3, r3, r7
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0018      	movs	r0, r3
 8000932:	f001 fbd7 	bl	80020e4 <send_debug_logs>
 8000936:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8000938:	e003      	b.n	8000942 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <astronode_send_mgi_rr+0x150>)
 800093c:	0018      	movs	r0, r3
 800093e:	f001 fbd1 	bl	80020e4 <send_debug_logs>
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b06d      	add	sp, #436	; 0x1b4
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	fffffe68 	.word	0xfffffe68
 8000950:	08006d04 	.word	0x08006d04
 8000954:	08006d14 	.word	0x08006d14
 8000958:	08006d18 	.word	0x08006d18

0800095c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	b0ed      	sub	sp, #436	; 0x1b4
 8000960:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000962:	21c8      	movs	r1, #200	; 0xc8
 8000964:	2318      	movs	r3, #24
 8000966:	18cb      	adds	r3, r1, r3
 8000968:	19db      	adds	r3, r3, r7
 800096a:	0018      	movs	r0, r3
 800096c:	23c6      	movs	r3, #198	; 0xc6
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f005 fa9d 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000976:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 8000978:	26cc      	movs	r6, #204	; 0xcc
 800097a:	0076      	lsls	r6, r6, #1
 800097c:	199b      	adds	r3, r3, r6
 800097e:	2218      	movs	r2, #24
 8000980:	4694      	mov	ip, r2
 8000982:	44bc      	add	ip, r7
 8000984:	4463      	add	r3, ip
 8000986:	0018      	movs	r0, r3
 8000988:	23c6      	movs	r3, #198	; 0xc6
 800098a:	001a      	movs	r2, r3
 800098c:	2100      	movs	r1, #0
 800098e:	f005 fa8f 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8000992:	21c8      	movs	r1, #200	; 0xc8
 8000994:	2318      	movs	r3, #24
 8000996:	18cb      	adds	r3, r1, r3
 8000998:	19db      	adds	r3, r3, r7
 800099a:	221a      	movs	r2, #26
 800099c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800099e:	2318      	movs	r3, #24
 80009a0:	18fa      	adds	r2, r7, r3
 80009a2:	2318      	movs	r3, #24
 80009a4:	18cb      	adds	r3, r1, r3
 80009a6:	19db      	adds	r3, r3, r7
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fde0 	bl	8001570 <astronode_transport_send_receive>
 80009b0:	0003      	movs	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d16f      	bne.n	8000a96 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 80009b8:	0032      	movs	r2, r6
 80009ba:	189b      	adds	r3, r3, r2
 80009bc:	2118      	movs	r1, #24
 80009be:	468c      	mov	ip, r1
 80009c0:	44bc      	add	ip, r7
 80009c2:	4463      	add	r3, ip
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b9a      	cmp	r3, #154	; 0x9a
 80009c8:	d161      	bne.n	8000a8e <astronode_send_msn_rr+0x132>
        {
 80009ca:	466b      	mov	r3, sp
 80009cc:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 80009d0:	189b      	adds	r3, r3, r2
 80009d2:	2218      	movs	r2, #24
 80009d4:	4694      	mov	ip, r2
 80009d6:	44bc      	add	ip, r7
 80009d8:	4463      	add	r3, ip
 80009da:	22c4      	movs	r2, #196	; 0xc4
 80009dc:	5a9b      	ldrh	r3, [r3, r2]
 80009de:	001a      	movs	r2, r3
 80009e0:	3a01      	subs	r2, #1
 80009e2:	21ca      	movs	r1, #202	; 0xca
 80009e4:	0049      	lsls	r1, r1, #1
 80009e6:	2018      	movs	r0, #24
 80009e8:	1809      	adds	r1, r1, r0
 80009ea:	19c9      	adds	r1, r1, r7
 80009ec:	600a      	str	r2, [r1, #0]
 80009ee:	001c      	movs	r4, r3
 80009f0:	2200      	movs	r2, #0
 80009f2:	0015      	movs	r5, r2
 80009f4:	0020      	movs	r0, r4
 80009f6:	0029      	movs	r1, r5
 80009f8:	0004      	movs	r4, r0
 80009fa:	0f62      	lsrs	r2, r4, #29
 80009fc:	000c      	movs	r4, r1
 80009fe:	00e4      	lsls	r4, r4, #3
 8000a00:	617c      	str	r4, [r7, #20]
 8000a02:	697c      	ldr	r4, [r7, #20]
 8000a04:	4314      	orrs	r4, r2
 8000a06:	617c      	str	r4, [r7, #20]
 8000a08:	0001      	movs	r1, r0
 8000a0a:	00c9      	lsls	r1, r1, #3
 8000a0c:	6139      	str	r1, [r7, #16]
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	0004      	movs	r4, r0
 8000a1a:	0f62      	lsrs	r2, r4, #29
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	00e4      	lsls	r4, r4, #3
 8000a20:	60fc      	str	r4, [r7, #12]
 8000a22:	68fc      	ldr	r4, [r7, #12]
 8000a24:	4314      	orrs	r4, r2
 8000a26:	60fc      	str	r4, [r7, #12]
 8000a28:	0001      	movs	r1, r0
 8000a2a:	00ca      	lsls	r2, r1, #3
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	3307      	adds	r3, #7
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	4669      	mov	r1, sp
 8000a36:	1acb      	subs	r3, r1, r3
 8000a38:	469d      	mov	sp, r3
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	3300      	adds	r3, #0
 8000a3e:	24c8      	movs	r4, #200	; 0xc8
 8000a40:	0064      	lsls	r4, r4, #1
 8000a42:	2218      	movs	r2, #24
 8000a44:	18a2      	adds	r2, r4, r2
 8000a46:	19d1      	adds	r1, r2, r7
 8000a48:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <astronode_send_msn_rr+0x148>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 fb49 	bl	80020e4 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <astronode_send_msn_rr+0x144>)
 8000a54:	22cc      	movs	r2, #204	; 0xcc
 8000a56:	0052      	lsls	r2, r2, #1
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	44bc      	add	ip, r7
 8000a60:	4463      	add	r3, ip
 8000a62:	22c4      	movs	r2, #196	; 0xc4
 8000a64:	5a9b      	ldrh	r3, [r3, r2]
 8000a66:	0019      	movs	r1, r3
 8000a68:	2318      	movs	r3, #24
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <astronode_send_msn_rr+0x14c>)
 8000a70:	2018      	movs	r0, #24
 8000a72:	1820      	adds	r0, r4, r0
 8000a74:	19c0      	adds	r0, r0, r7
 8000a76:	6800      	ldr	r0, [r0, #0]
 8000a78:	f005 f9c6 	bl	8005e08 <sniprintf>
            send_debug_logs(serial_number);
 8000a7c:	2318      	movs	r3, #24
 8000a7e:	18e3      	adds	r3, r4, r3
 8000a80:	19db      	adds	r3, r3, r7
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fb2d 	bl	80020e4 <send_debug_logs>
 8000a8a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8000a8c:	e003      	b.n	8000a96 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <astronode_send_msn_rr+0x150>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 fb27 	bl	80020e4 <send_debug_logs>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b06d      	add	sp, #436	; 0x1b4
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	fffffe68 	.word	0xfffffe68
 8000aa4:	08006d34 	.word	0x08006d34
 8000aa8:	08006d14 	.word	0x08006d14
 8000aac:	08006d50 	.word	0x08006d50

08000ab0 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b0e4      	sub	sp, #400	; 0x190
 8000ab4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ab6:	24c8      	movs	r4, #200	; 0xc8
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	0018      	movs	r0, r3
 8000abc:	23c6      	movs	r3, #198	; 0xc6
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f005 f9f5 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000ac8:	25c8      	movs	r5, #200	; 0xc8
 8000aca:	006d      	lsls	r5, r5, #1
 8000acc:	195b      	adds	r3, r3, r5
 8000ace:	19db      	adds	r3, r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	23c6      	movs	r3, #198	; 0xc6
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f005 f9ea 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2265      	movs	r2, #101	; 0x65
 8000ae0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fd41 	bl	8001570 <astronode_transport_send_receive>
 8000aee:	0003      	movs	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d147      	bne.n	8000b84 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000af6:	195b      	adds	r3, r3, r5
 8000af8:	19db      	adds	r3, r3, r7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2be5      	cmp	r3, #229	; 0xe5
 8000afe:	d141      	bne.n	8000b84 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b02:	195b      	adds	r3, r3, r5
 8000b04:	19db      	adds	r3, r3, r7
 8000b06:	785b      	ldrb	r3, [r3, #1]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d006      	beq.n	8000b1e <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <astronode_send_evt_rr+0xe0>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <astronode_send_evt_rr+0xe4>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 fae3 	bl	80020e4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b20:	22c8      	movs	r2, #200	; 0xc8
 8000b22:	0052      	lsls	r2, r2, #1
 8000b24:	189b      	adds	r3, r3, r2
 8000b26:	19db      	adds	r3, r3, r7
 8000b28:	785b      	ldrb	r3, [r3, #1]
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d006      	beq.n	8000b40 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <astronode_send_evt_rr+0xe8>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <astronode_send_evt_rr+0xec>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 fad2 	bl	80020e4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b42:	22c8      	movs	r2, #200	; 0xc8
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	189b      	adds	r3, r3, r2
 8000b48:	19db      	adds	r3, r3, r7
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2304      	movs	r3, #4
 8000b50:	4013      	ands	r3, r2
 8000b52:	d006      	beq.n	8000b62 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <astronode_send_evt_rr+0xf0>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <astronode_send_evt_rr+0xf4>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 fac1 	bl	80020e4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <astronode_send_evt_rr+0xdc>)
 8000b64:	22c8      	movs	r2, #200	; 0xc8
 8000b66:	0052      	lsls	r2, r2, #1
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	19db      	adds	r3, r3, r7
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2308      	movs	r3, #8
 8000b72:	4013      	ands	r3, r2
 8000b74:	d006      	beq.n	8000b84 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <astronode_send_evt_rr+0xf8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <astronode_send_evt_rr+0xfc>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fab0 	bl	80020e4 <send_debug_logs>
            }

        }
    }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b064      	add	sp, #400	; 0x190
 8000b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8c:	fffffe70 	.word	0xfffffe70
 8000b90:	20000078 	.word	0x20000078
 8000b94:	08006df8 	.word	0x08006df8
 8000b98:	20000079 	.word	0x20000079
 8000b9c:	08006e1c 	.word	0x08006e1c
 8000ba0:	2000007a 	.word	0x2000007a
 8000ba4:	08006e34 	.word	0x08006e34
 8000ba8:	2000007b 	.word	0x2000007b
 8000bac:	08006e48 	.word	0x08006e48

08000bb0 <astronode_send_pld_fr>:
    }
    return false ;
}

void astronode_send_pld_fr(void)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b0e4      	sub	sp, #400	; 0x190
 8000bb4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000bb6:	24c8      	movs	r4, #200	; 0xc8
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	23c6      	movs	r3, #198	; 0xc6
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f005 f975 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <astronode_send_pld_fr+0x6c>)
 8000bc8:	25c8      	movs	r5, #200	; 0xc8
 8000bca:	006d      	lsls	r5, r5, #1
 8000bcc:	195b      	adds	r3, r3, r5
 8000bce:	19db      	adds	r3, r3, r7
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	23c6      	movs	r3, #198	; 0xc6
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f005 f96a 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2227      	movs	r2, #39	; 0x27
 8000be0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000be2:	003a      	movs	r2, r7
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 fcc1 	bl	8001570 <astronode_transport_send_receive>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10e      	bne.n	8000c12 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <astronode_send_pld_fr+0x6c>)
 8000bf6:	195b      	adds	r3, r3, r5
 8000bf8:	19db      	adds	r3, r3, r7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2ba7      	cmp	r3, #167	; 0xa7
 8000bfe:	d104      	bne.n	8000c0a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <astronode_send_pld_fr+0x70>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f001 fa6e 	bl	80020e4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8000c08:	e003      	b.n	8000c12 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <astronode_send_pld_fr+0x74>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 fa69 	bl	80020e4 <send_debug_logs>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b064      	add	sp, #400	; 0x190
 8000c18:	bdb0      	pop	{r4, r5, r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	fffffe70 	.word	0xfffffe70
 8000c20:	08006f70 	.word	0x08006f70
 8000c24:	08006fa8 	.word	0x08006fa8

08000c28 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b0e4      	sub	sp, #400	; 0x190
 8000c2c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000c2e:	24c8      	movs	r4, #200	; 0xc8
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	0018      	movs	r0, r3
 8000c34:	23c6      	movs	r3, #198	; 0xc6
 8000c36:	001a      	movs	r2, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f005 f939 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <astronode_send_res_cr+0x70>)
 8000c40:	25c8      	movs	r5, #200	; 0xc8
 8000c42:	006d      	lsls	r5, r5, #1
 8000c44:	195b      	adds	r3, r3, r5
 8000c46:	19db      	adds	r3, r3, r7
 8000c48:	0018      	movs	r0, r3
 8000c4a:	23c6      	movs	r3, #198	; 0xc6
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f005 f92e 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2255      	movs	r2, #85	; 0x55
 8000c58:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000c5a:	003a      	movs	r2, r7
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fc85 	bl	8001570 <astronode_transport_send_receive>
 8000c66:	0003      	movs	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d111      	bne.n	8000c90 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <astronode_send_res_cr+0x70>)
 8000c6e:	195b      	adds	r3, r3, r5
 8000c70:	19db      	adds	r3, r3, r7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2bd5      	cmp	r3, #213	; 0xd5
 8000c76:	d107      	bne.n	8000c88 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <astronode_send_res_cr+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <astronode_send_res_cr+0x78>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fa2f 	bl	80020e4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8000c86:	e003      	b.n	8000c90 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <astronode_send_res_cr+0x7c>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f001 fa2a 	bl	80020e4 <send_debug_logs>
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b064      	add	sp, #400	; 0x190
 8000c96:	bdb0      	pop	{r4, r5, r7, pc}
 8000c98:	fffffe70 	.word	0xfffffe70
 8000c9c:	20000079 	.word	0x20000079
 8000ca0:	08006fe4 	.word	0x08006fe4
 8000ca4:	08007018 	.word	0x08007018

08000ca8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b0fa      	sub	sp, #488	; 0x1e8
 8000cac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8000cae:	258e      	movs	r5, #142	; 0x8e
 8000cb0:	006d      	lsls	r5, r5, #1
 8000cb2:	197b      	adds	r3, r7, r5
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	23c6      	movs	r3, #198	; 0xc6
 8000cb8:	001a      	movs	r2, r3
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f005 f8f8 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0} ;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000cc2:	24f4      	movs	r4, #244	; 0xf4
 8000cc4:	0064      	lsls	r4, r4, #1
 8000cc6:	191b      	adds	r3, r3, r4
 8000cc8:	19db      	adds	r3, r3, r7
 8000cca:	0018      	movs	r0, r3
 8000ccc:	23c6      	movs	r3, #198	; 0xc6
 8000cce:	001a      	movs	r2, r3
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f005 f8ed 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8000cd6:	197b      	adds	r3, r7, r5
 8000cd8:	2217      	movs	r2, #23
 8000cda:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8000cdc:	2354      	movs	r3, #84	; 0x54
 8000cde:	18fa      	adds	r2, r7, r3
 8000ce0:	197b      	adds	r3, r7, r5
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fc43 	bl	8001570 <astronode_transport_send_receive>
 8000cea:	0003      	movs	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d133      	bne.n	8000d58 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	185b      	adds	r3, r3, r1
 8000cf6:	19db      	adds	r3, r3, r7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b97      	cmp	r3, #151	; 0x97
 8000cfc:	d128      	bne.n	8000d50 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d00:	185b      	adds	r3, r3, r1
 8000d02:	19db      	adds	r3, r3, r7
 8000d04:	785b      	ldrb	r3, [r3, #1]
 8000d06:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d0a:	185b      	adds	r3, r3, r1
 8000d0c:	19db      	adds	r3, r3, r7
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d16:	185b      	adds	r3, r3, r1
 8000d18:	19db      	adds	r3, r3, r7
 8000d1a:	78db      	ldrb	r3, [r3, #3]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <astronode_send_rtc_rr+0xbc>)
 8000d22:	185b      	adds	r3, r3, r1
 8000d24:	19db      	adds	r3, r3, r7
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	061b      	lsls	r3, r3, #24
 8000d2a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8000d2c:	24f2      	movs	r4, #242	; 0xf2
 8000d2e:	0064      	lsls	r4, r4, #1
 8000d30:	193a      	adds	r2, r7, r4
 8000d32:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	490b      	ldr	r1, [pc, #44]	; (8000d68 <astronode_send_rtc_rr+0xc0>)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f005 f897 	bl	8005e70 <siprintf>
            send_debug_logs ( str ) ;
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 f9cd 	bl	80020e4 <send_debug_logs>
            return rtc_time ;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	e004      	b.n	8000d5a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <astronode_send_rtc_rr+0xc4>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 f9c6 	bl	80020e4 <send_debug_logs>
        }
    }
    return 0 ;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b07a      	add	sp, #488	; 0x1e8
 8000d60:	bdb0      	pop	{r4, r5, r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	fffffe6c 	.word	0xfffffe6c
 8000d68:	08007044 	.word	0x08007044
 8000d6c:	08007084 	.word	0x08007084

08000d70 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b0f8      	sub	sp, #480	; 0x1e0
 8000d74:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000d76:	258c      	movs	r5, #140	; 0x8c
 8000d78:	006d      	lsls	r5, r5, #1
 8000d7a:	197b      	adds	r3, r7, r5
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	23c6      	movs	r3, #198	; 0xc6
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f005 f894 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000d8a:	24f0      	movs	r4, #240	; 0xf0
 8000d8c:	0064      	lsls	r4, r4, #1
 8000d8e:	191b      	adds	r3, r3, r4
 8000d90:	19db      	adds	r3, r3, r7
 8000d92:	0018      	movs	r0, r3
 8000d94:	23c6      	movs	r3, #198	; 0xc6
 8000d96:	001a      	movs	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f005 f889 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8000d9e:	197b      	adds	r3, r7, r5
 8000da0:	2245      	movs	r2, #69	; 0x45
 8000da2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000da4:	2350      	movs	r3, #80	; 0x50
 8000da6:	18fa      	adds	r2, r7, r3
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fbdf 	bl	8001570 <astronode_transport_send_receive>
 8000db2:	0003      	movs	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d126      	bne.n	8000e06 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dba:	191b      	adds	r3, r3, r4
 8000dbc:	19db      	adds	r3, r3, r7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2bc5      	cmp	r3, #197	; 0xc5
 8000dc2:	d11c      	bne.n	8000dfe <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dc6:	191b      	adds	r3, r3, r4
 8000dc8:	19db      	adds	r3, r3, r7
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <astronode_send_sak_rr+0xa0>)
 8000dd0:	191b      	adds	r3, r3, r4
 8000dd2:	19db      	adds	r3, r3, r7
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	20ef      	movs	r0, #239	; 0xef
 8000dde:	0040      	lsls	r0, r0, #1
 8000de0:	183b      	adds	r3, r7, r0
 8000de2:	188a      	adds	r2, r1, r2
 8000de4:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	490a      	ldr	r1, [pc, #40]	; (8000e14 <astronode_send_sak_rr+0xa4>)
 8000dec:	003b      	movs	r3, r7
 8000dee:	0018      	movs	r0, r3
 8000df0:	f005 f83e 	bl	8005e70 <siprintf>
            send_debug_logs(str);
 8000df4:	003b      	movs	r3, r7
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 f974 	bl	80020e4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8000dfc:	e003      	b.n	8000e06 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <astronode_send_sak_rr+0xa8>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 f96f 	bl	80020e4 <send_debug_logs>
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b078      	add	sp, #480	; 0x1e0
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	fffffe70 	.word	0xfffffe70
 8000e14:	080070a0 	.word	0x080070a0
 8000e18:	080070cc 	.word	0x080070cc

08000e1c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b0e4      	sub	sp, #400	; 0x190
 8000e20:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000e22:	24c8      	movs	r4, #200	; 0xc8
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	0018      	movs	r0, r3
 8000e28:	23c6      	movs	r3, #198	; 0xc6
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f005 f83f 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <astronode_send_sak_cr+0x70>)
 8000e34:	25c8      	movs	r5, #200	; 0xc8
 8000e36:	006d      	lsls	r5, r5, #1
 8000e38:	195b      	adds	r3, r3, r5
 8000e3a:	19db      	adds	r3, r3, r7
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	23c6      	movs	r3, #198	; 0xc6
 8000e40:	001a      	movs	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f005 f834 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	2246      	movs	r2, #70	; 0x46
 8000e4c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000e4e:	003a      	movs	r2, r7
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 fb8b 	bl	8001570 <astronode_transport_send_receive>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d111      	bne.n	8000e84 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <astronode_send_sak_cr+0x70>)
 8000e62:	195b      	adds	r3, r3, r5
 8000e64:	19db      	adds	r3, r3, r7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2bc6      	cmp	r3, #198	; 0xc6
 8000e6a:	d107      	bne.n	8000e7c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <astronode_send_sak_cr+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <astronode_send_sak_cr+0x78>)
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 f935 	bl	80020e4 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8000e7a:	e003      	b.n	8000e84 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <astronode_send_sak_cr+0x7c>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 f930 	bl	80020e4 <send_debug_logs>
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b064      	add	sp, #400	; 0x190
 8000e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8c:	fffffe70 	.word	0xfffffe70
 8000e90:	20000078 	.word	0x20000078
 8000e94:	08007100 	.word	0x08007100
 8000e98:	08007128 	.word	0x08007128

08000e9c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	b0ed      	sub	sp, #436	; 0x1b4
 8000ea0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ea2:	21c8      	movs	r1, #200	; 0xc8
 8000ea4:	2318      	movs	r3, #24
 8000ea6:	18cb      	adds	r3, r1, r3
 8000ea8:	19db      	adds	r3, r3, r7
 8000eaa:	0018      	movs	r0, r3
 8000eac:	23c6      	movs	r3, #198	; 0xc6
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f004 fffd 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8000eb6:	4b4a      	ldr	r3, [pc, #296]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000eb8:	26cc      	movs	r6, #204	; 0xcc
 8000eba:	0076      	lsls	r6, r6, #1
 8000ebc:	199b      	adds	r3, r3, r6
 8000ebe:	2218      	movs	r2, #24
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	44bc      	add	ip, r7
 8000ec4:	4463      	add	r3, ip
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	23c6      	movs	r3, #198	; 0xc6
 8000eca:	001a      	movs	r2, r3
 8000ecc:	2100      	movs	r1, #0
 8000ece:	f004 ffef 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8000ed2:	21c8      	movs	r1, #200	; 0xc8
 8000ed4:	2318      	movs	r3, #24
 8000ed6:	18cb      	adds	r3, r1, r3
 8000ed8:	19db      	adds	r3, r3, r7
 8000eda:	221b      	movs	r2, #27
 8000edc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8000ede:	2318      	movs	r3, #24
 8000ee0:	18fa      	adds	r2, r7, r3
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	18cb      	adds	r3, r1, r3
 8000ee6:	19db      	adds	r3, r3, r7
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fb40 	bl	8001570 <astronode_transport_send_receive>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d16f      	bne.n	8000fd6 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000ef8:	0032      	movs	r2, r6
 8000efa:	189b      	adds	r3, r3, r2
 8000efc:	2118      	movs	r1, #24
 8000efe:	468c      	mov	ip, r1
 8000f00:	44bc      	add	ip, r7
 8000f02:	4463      	add	r3, ip
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b9b      	cmp	r3, #155	; 0x9b
 8000f08:	d161      	bne.n	8000fce <astronode_send_mpn_rr+0x132>
        {
 8000f0a:	466b      	mov	r3, sp
 8000f0c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000f10:	189b      	adds	r3, r3, r2
 8000f12:	2218      	movs	r2, #24
 8000f14:	4694      	mov	ip, r2
 8000f16:	44bc      	add	ip, r7
 8000f18:	4463      	add	r3, ip
 8000f1a:	22c4      	movs	r2, #196	; 0xc4
 8000f1c:	5a9b      	ldrh	r3, [r3, r2]
 8000f1e:	001a      	movs	r2, r3
 8000f20:	3a01      	subs	r2, #1
 8000f22:	21ca      	movs	r1, #202	; 0xca
 8000f24:	0049      	lsls	r1, r1, #1
 8000f26:	2018      	movs	r0, #24
 8000f28:	1809      	adds	r1, r1, r0
 8000f2a:	19c9      	adds	r1, r1, r7
 8000f2c:	600a      	str	r2, [r1, #0]
 8000f2e:	001c      	movs	r4, r3
 8000f30:	2200      	movs	r2, #0
 8000f32:	0015      	movs	r5, r2
 8000f34:	0020      	movs	r0, r4
 8000f36:	0029      	movs	r1, r5
 8000f38:	0004      	movs	r4, r0
 8000f3a:	0f62      	lsrs	r2, r4, #29
 8000f3c:	000c      	movs	r4, r1
 8000f3e:	00e4      	lsls	r4, r4, #3
 8000f40:	617c      	str	r4, [r7, #20]
 8000f42:	697c      	ldr	r4, [r7, #20]
 8000f44:	4314      	orrs	r4, r2
 8000f46:	617c      	str	r4, [r7, #20]
 8000f48:	0001      	movs	r1, r0
 8000f4a:	00c9      	lsls	r1, r1, #3
 8000f4c:	6139      	str	r1, [r7, #16]
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	0004      	movs	r4, r0
 8000f5a:	0f62      	lsrs	r2, r4, #29
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	00e4      	lsls	r4, r4, #3
 8000f60:	60fc      	str	r4, [r7, #12]
 8000f62:	68fc      	ldr	r4, [r7, #12]
 8000f64:	4314      	orrs	r4, r2
 8000f66:	60fc      	str	r4, [r7, #12]
 8000f68:	0001      	movs	r1, r0
 8000f6a:	00ca      	lsls	r2, r1, #3
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	3307      	adds	r3, #7
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4669      	mov	r1, sp
 8000f76:	1acb      	subs	r3, r1, r3
 8000f78:	469d      	mov	sp, r3
 8000f7a:	466b      	mov	r3, sp
 8000f7c:	3300      	adds	r3, #0
 8000f7e:	24c8      	movs	r4, #200	; 0xc8
 8000f80:	0064      	lsls	r4, r4, #1
 8000f82:	2218      	movs	r2, #24
 8000f84:	18a2      	adds	r2, r4, r2
 8000f86:	19d1      	adds	r1, r2, r7
 8000f88:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <astronode_send_mpn_rr+0x148>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 f8a9 	bl	80020e4 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <astronode_send_mpn_rr+0x144>)
 8000f94:	22cc      	movs	r2, #204	; 0xcc
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	189b      	adds	r3, r3, r2
 8000f9a:	2218      	movs	r2, #24
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	44bc      	add	ip, r7
 8000fa0:	4463      	add	r3, ip
 8000fa2:	22c4      	movs	r2, #196	; 0xc4
 8000fa4:	5a9b      	ldrh	r3, [r3, r2]
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	2318      	movs	r3, #24
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <astronode_send_mpn_rr+0x14c>)
 8000fb0:	2018      	movs	r0, #24
 8000fb2:	1820      	adds	r0, r4, r0
 8000fb4:	19c0      	adds	r0, r0, r7
 8000fb6:	6800      	ldr	r0, [r0, #0]
 8000fb8:	f004 ff26 	bl	8005e08 <sniprintf>
            send_debug_logs(product_number);
 8000fbc:	2318      	movs	r3, #24
 8000fbe:	18e3      	adds	r3, r4, r3
 8000fc0:	19db      	adds	r3, r3, r7
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 f88d 	bl	80020e4 <send_debug_logs>
 8000fca:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8000fcc:	e003      	b.n	8000fd6 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <astronode_send_mpn_rr+0x150>)
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 f887 	bl	80020e4 <send_debug_logs>
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b06d      	add	sp, #436	; 0x1b4
 8000fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	fffffe68 	.word	0xfffffe68
 8000fe4:	080071f0 	.word	0x080071f0
 8000fe8:	08006d14 	.word	0x08006d14
 8000fec:	08006d50 	.word	0x08006d50

08000ff0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b0e4      	sub	sp, #400	; 0x190
 8000ff4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8000ff6:	24c8      	movs	r4, #200	; 0xc8
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	23c6      	movs	r3, #198	; 0xc6
 8000ffe:	001a      	movs	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	f004 ff55 	bl	8005eb0 <memset>
    astronode_app_msg_t answer = {0};
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <astronode_send_cmd_cr+0x70>)
 8001008:	25c8      	movs	r5, #200	; 0xc8
 800100a:	006d      	lsls	r5, r5, #1
 800100c:	195b      	adds	r3, r3, r5
 800100e:	19db      	adds	r3, r3, r7
 8001010:	0018      	movs	r0, r3
 8001012:	23c6      	movs	r3, #198	; 0xc6
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f004 ff4a 	bl	8005eb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2248      	movs	r2, #72	; 0x48
 8001020:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001022:	003a      	movs	r2, r7
 8001024:	193b      	adds	r3, r7, r4
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f000 faa1 	bl	8001570 <astronode_transport_send_receive>
 800102e:	0003      	movs	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d111      	bne.n	8001058 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <astronode_send_cmd_cr+0x70>)
 8001036:	195b      	adds	r3, r3, r5
 8001038:	19db      	adds	r3, r3, r7
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2bc8      	cmp	r3, #200	; 0xc8
 800103e:	d107      	bne.n	8001050 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <astronode_send_cmd_cr+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <astronode_send_cmd_cr+0x78>)
 8001048:	0018      	movs	r0, r3
 800104a:	f001 f84b 	bl	80020e4 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800104e:	e003      	b.n	8001058 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <astronode_send_cmd_cr+0x7c>)
 8001052:	0018      	movs	r0, r3
 8001054:	f001 f846 	bl	80020e4 <send_debug_logs>
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b064      	add	sp, #400	; 0x190
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	fffffe70 	.word	0xfffffe70
 8001064:	2000007a 	.word	0x2000007a
 8001068:	08007640 	.word	0x08007640
 800106c:	08007664 	.word	0x08007664

08001070 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <is_sak_available+0x10>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	20000078 	.word	0x20000078

08001084 <is_astronode_reset>:

bool is_astronode_reset()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <is_astronode_reset+0x10>)
 800108a:	781b      	ldrb	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000079 	.word	0x20000079

08001098 <is_command_available>:

bool is_command_available()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    return g_is_command_available;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <is_command_available+0x10>)
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	2000007a 	.word	0x2000007a

080010ac <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b2f      	cmp	r3, #47	; 0x2f
 80010c0:	d90b      	bls.n	80010da <ascii_to_value+0x2e>
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b39      	cmp	r3, #57	; 0x39
 80010c8:	d807      	bhi.n	80010da <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b30      	subs	r3, #48	; 0x30
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
        return true;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e010      	b.n	80010fc <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b40      	cmp	r3, #64	; 0x40
 80010e0:	d90b      	bls.n	80010fa <ascii_to_value+0x4e>
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b46      	cmp	r3, #70	; 0x46
 80010e8:	d807      	bhi.n	80010fa <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	3b37      	subs	r3, #55	; 0x37
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	701a      	strb	r2, [r3, #0]
        return true;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <ascii_to_value+0x50>
    }
    else
    {
        return false;
 80010fa:	2300      	movs	r3, #0
    }
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800110e:	250e      	movs	r5, #14
 8001110:	197b      	adds	r3, r7, r5
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8001116:	197b      	adds	r3, r7, r5
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	197a      	adds	r2, r7, r5
 800111c:	1c59      	adds	r1, r3, #1
 800111e:	8011      	strh	r1, [r2, #0]
 8001120:	001a      	movs	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	189b      	adds	r3, r3, r2
 8001126:	2202      	movs	r2, #2
 8001128:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	260a      	movs	r6, #10
 800112e:	19bc      	adds	r4, r7, r6
 8001130:	4a44      	ldr	r2, [pc, #272]	; (8001244 <astronode_create_request_transport+0x140>)
 8001132:	2101      	movs	r1, #1
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fa7d 	bl	8001634 <calculate_crc>
 800113a:	0003      	movs	r3, r0
 800113c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	1c58      	adds	r0, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	22c4      	movs	r2, #196	; 0xc4
 8001146:	5a99      	ldrh	r1, [r3, r2]
 8001148:	19bc      	adds	r4, r7, r6
 800114a:	19bb      	adds	r3, r7, r6
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	001a      	movs	r2, r3
 8001150:	f000 fa70 	bl	8001634 <calculate_crc>
 8001154:	0003      	movs	r3, r0
 8001156:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8001158:	19bb      	adds	r3, r7, r6
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	0031      	movs	r1, r6
 8001162:	19bb      	adds	r3, r7, r6
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21a      	sxth	r2, r3
 8001170:	187b      	adds	r3, r7, r1
 8001172:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7818      	ldrb	r0, [r3, #0]
 8001178:	197b      	adds	r3, r7, r5
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	0019      	movs	r1, r3
 8001182:	f000 fbeb 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 8001186:	197b      	adds	r3, r7, r5
 8001188:	197a      	adds	r2, r7, r5
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	3202      	adds	r2, #2
 800118e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8001190:	230c      	movs	r3, #12
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
 8001198:	e017      	b.n	80011ca <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 800119a:	240c      	movs	r4, #12
 800119c:	193b      	adds	r3, r7, r4
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	18d3      	adds	r3, r2, r3
 80011a4:	7858      	ldrb	r0, [r3, #1]
 80011a6:	250e      	movs	r5, #14
 80011a8:	197b      	adds	r3, r7, r5
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	0019      	movs	r1, r3
 80011b2:	f000 fbd3 	bl	800195c <uint8_to_ascii_buffer>
        index += 2;
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	197a      	adds	r2, r7, r5
 80011ba:	8812      	ldrh	r2, [r2, #0]
 80011bc:	3202      	adds	r2, #2
 80011be:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	3201      	adds	r2, #1
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	22c4      	movs	r2, #196	; 0xc4
 80011ce:	5a9b      	ldrh	r3, [r3, r2]
 80011d0:	220c      	movs	r2, #12
 80011d2:	18ba      	adds	r2, r7, r2
 80011d4:	8812      	ldrh	r2, [r2, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3df      	bcc.n	800119a <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80011da:	250a      	movs	r5, #10
 80011dc:	197b      	adds	r3, r7, r5
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	240e      	movs	r4, #14
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	18d3      	adds	r3, r2, r3
 80011f0:	0019      	movs	r1, r3
 80011f2:	f000 fbb3 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 80011f6:	0021      	movs	r1, r4
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	187a      	adds	r2, r7, r1
 80011fc:	8812      	ldrh	r2, [r2, #0]
 80011fe:	3202      	adds	r2, #2
 8001200:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8001202:	197b      	adds	r3, r7, r5
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b2d8      	uxtb	r0, r3
 8001208:	000c      	movs	r4, r1
 800120a:	187b      	adds	r3, r7, r1
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	18d3      	adds	r3, r2, r3
 8001212:	0019      	movs	r1, r3
 8001214:	f000 fba2 	bl	800195c <uint8_to_ascii_buffer>
    index += 2;
 8001218:	0020      	movs	r0, r4
 800121a:	183b      	adds	r3, r7, r0
 800121c:	183a      	adds	r2, r7, r0
 800121e:	8812      	ldrh	r2, [r2, #0]
 8001220:	3202      	adds	r2, #2
 8001222:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8001224:	183b      	adds	r3, r7, r0
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	183a      	adds	r2, r7, r0
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	8011      	strh	r1, [r2, #0]
 800122e:	001a      	movs	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	189b      	adds	r3, r3, r2
 8001234:	2203      	movs	r2, #3
 8001236:	701a      	strb	r2, [r3, #0]

    return index;
 8001238:	183b      	adds	r3, r7, r0
 800123a:	881b      	ldrh	r3, [r3, #0]
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b005      	add	sp, #20
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	0000ffff 	.word	0x0000ffff

08001248 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	230a      	movs	r3, #10
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	1c0a      	adds	r2, r1, #0
 8001258:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d005      	beq.n	800126e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8001262:	4bbd      	ldr	r3, [pc, #756]	; (8001558 <astronode_decode_answer_transport+0x310>)
 8001264:	0018      	movs	r0, r3
 8001266:	f000 ff3d 	bl	80020e4 <send_debug_logs>
        return RS_FAILURE;
 800126a:	2300      	movs	r3, #0
 800126c:	e170      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800126e:	210a      	movs	r1, #10
 8001270:	187b      	adds	r3, r7, r1
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	2201      	movs	r2, #1
 8001276:	4013      	ands	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <astronode_decode_answer_transport+0x3e>
 800127e:	187b      	adds	r3, r7, r1
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d805      	bhi.n	8001292 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8001286:	4bb5      	ldr	r3, [pc, #724]	; (800155c <astronode_decode_answer_transport+0x314>)
 8001288:	0018      	movs	r0, r3
 800128a:	f000 ff2b 	bl	80020e4 <send_debug_logs>
        return RS_FAILURE;
 800128e:	2300      	movs	r3, #0
 8001290:	e15e      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8001292:	230a      	movs	r3, #10
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	3b08      	subs	r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	da00      	bge.n	80012a0 <astronode_decode_answer_transport+0x58>
 800129e:	3301      	adds	r3, #1
 80012a0:	105b      	asrs	r3, r3, #1
 80012a2:	b299      	uxth	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	22c4      	movs	r2, #196	; 0xc4
 80012a8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80012aa:	230a      	movs	r3, #10
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d005      	beq.n	80012c8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80012bc:	4ba8      	ldr	r3, [pc, #672]	; (8001560 <astronode_decode_answer_transport+0x318>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 ff10 	bl	80020e4 <send_debug_logs>
        return RS_FAILURE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e143      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80012c8:	2117      	movs	r1, #23
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80012d0:	2416      	movs	r4, #22
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	187a      	adds	r2, r7, r1
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff fee2 	bl	80010ac <ascii_to_value>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	2301      	movs	r3, #1
 80012ee:	4053      	eors	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10e      	bne.n	8001314 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3302      	adds	r3, #2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	193a      	adds	r2, r7, r4
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff fed3 	bl	80010ac <ascii_to_value>
 8001306:	0003      	movs	r3, r0
 8001308:	001a      	movs	r2, r3
 800130a:	2301      	movs	r3, #1
 800130c:	4053      	eors	r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001314:	4b93      	ldr	r3, [pc, #588]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001316:	0018      	movs	r0, r3
 8001318:	f000 fee4 	bl	80020e4 <send_debug_logs>
        return RS_FAILURE;
 800131c:	2300      	movs	r3, #0
 800131e:	e117      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8001320:	2317      	movs	r3, #23
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	b2da      	uxtb	r2, r3
 800132a:	2316      	movs	r3, #22
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8001338:	231e      	movs	r3, #30
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2203      	movs	r2, #3
 800133e:	801a      	strh	r2, [r3, #0]
 8001340:	231c      	movs	r3, #28
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2200      	movs	r2, #0
 8001346:	801a      	strh	r2, [r3, #0]
 8001348:	e045      	b.n	80013d6 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800134a:	241e      	movs	r4, #30
 800134c:	193b      	adds	r3, r7, r4
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	18d3      	adds	r3, r2, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2217      	movs	r2, #23
 8001358:	18ba      	adds	r2, r7, r2
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fea5 	bl	80010ac <ascii_to_value>
 8001362:	0003      	movs	r3, r0
 8001364:	001a      	movs	r2, r3
 8001366:	2301      	movs	r3, #1
 8001368:	4053      	eors	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d112      	bne.n	8001396 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8001370:	193b      	adds	r3, r7, r4
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2216      	movs	r2, #22
 800137e:	18ba      	adds	r2, r7, r2
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fe92 	bl	80010ac <ascii_to_value>
 8001388:	0003      	movs	r3, r0
 800138a:	001a      	movs	r2, r3
 800138c:	2301      	movs	r3, #1
 800138e:	4053      	eors	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001398:	0018      	movs	r0, r3
 800139a:	f000 fea3 	bl	80020e4 <send_debug_logs>
            return RS_FAILURE;
 800139e:	2300      	movs	r3, #0
 80013a0:	e0d6      	b.n	8001550 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80013a2:	2317      	movs	r3, #23
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b2d9      	uxtb	r1, r3
 80013ac:	2316      	movs	r3, #22
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	201c      	movs	r0, #28
 80013b4:	183b      	adds	r3, r7, r0
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	1838      	adds	r0, r7, r0
 80013ba:	1c5c      	adds	r4, r3, #1
 80013bc:	8004      	strh	r4, [r0, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	188b      	adds	r3, r1, r2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	181b      	adds	r3, r3, r0
 80013c8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80013ca:	221e      	movs	r2, #30
 80013cc:	18bb      	adds	r3, r7, r2
 80013ce:	18ba      	adds	r2, r7, r2
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	3202      	adds	r2, #2
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	231e      	movs	r3, #30
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	260a      	movs	r6, #10
 80013de:	19bb      	adds	r3, r7, r6
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	3b05      	subs	r3, #5
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbb0      	blt.n	800134a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	251a      	movs	r5, #26
 80013ec:	197c      	adds	r4, r7, r5
 80013ee:	4a5e      	ldr	r2, [pc, #376]	; (8001568 <astronode_decode_answer_transport+0x320>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 f91e 	bl	8001634 <calculate_crc>
 80013f8:	0003      	movs	r3, r0
 80013fa:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1c58      	adds	r0, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	22c4      	movs	r2, #196	; 0xc4
 8001404:	5a99      	ldrh	r1, [r3, r2]
 8001406:	197c      	adds	r4, r7, r5
 8001408:	197b      	adds	r3, r7, r5
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	001a      	movs	r2, r3
 800140e:	f000 f911 	bl	8001634 <calculate_crc>
 8001412:	0003      	movs	r3, r0
 8001414:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8001416:	197b      	adds	r3, r7, r5
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	0029      	movs	r1, r5
 8001420:	197b      	adds	r3, r7, r5
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	187b      	adds	r3, r7, r1
 8001430:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8001432:	19bb      	adds	r3, r7, r6
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	3b05      	subs	r3, #5
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2217      	movs	r2, #23
 8001440:	18ba      	adds	r2, r7, r2
 8001442:	0011      	movs	r1, r2
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff fe31 	bl	80010ac <ascii_to_value>
 800144a:	0003      	movs	r3, r0
 800144c:	001a      	movs	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	4053      	eors	r3, r2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d112      	bne.n	800147e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8001458:	19bb      	adds	r3, r7, r6
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	3b04      	subs	r3, #4
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	18d3      	adds	r3, r2, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2216      	movs	r2, #22
 8001466:	18ba      	adds	r2, r7, r2
 8001468:	0011      	movs	r1, r2
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff fe1e 	bl	80010ac <ascii_to_value>
 8001470:	0003      	movs	r3, r0
 8001472:	001a      	movs	r2, r3
 8001474:	2301      	movs	r3, #1
 8001476:	4053      	eors	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 8001480:	0018      	movs	r0, r3
 8001482:	f000 fe2f 	bl	80020e4 <send_debug_logs>
        return RS_FAILURE;
 8001486:	2300      	movs	r3, #0
 8001488:	e062      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800148a:	2017      	movs	r0, #23
 800148c:	183b      	adds	r3, r7, r0
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	b299      	uxth	r1, r3
 8001496:	2416      	movs	r4, #22
 8001498:	193b      	adds	r3, r7, r4
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	2318      	movs	r3, #24
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	188a      	adds	r2, r1, r2
 80014a8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80014aa:	250a      	movs	r5, #10
 80014ac:	197b      	adds	r3, r7, r5
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	183a      	adds	r2, r7, r0
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fdf5 	bl	80010ac <ascii_to_value>
 80014c2:	0003      	movs	r3, r0
 80014c4:	001a      	movs	r2, r3
 80014c6:	2301      	movs	r3, #1
 80014c8:	4053      	eors	r3, r2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d111      	bne.n	80014f4 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80014d0:	197b      	adds	r3, r7, r5
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	3b02      	subs	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	193a      	adds	r2, r7, r4
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fde3 	bl	80010ac <ascii_to_value>
 80014e6:	0003      	movs	r3, r0
 80014e8:	001a      	movs	r2, r3
 80014ea:	2301      	movs	r3, #1
 80014ec:	4053      	eors	r3, r2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <astronode_decode_answer_transport+0x31c>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 fdf4 	bl	80020e4 <send_debug_logs>
        return RS_FAILURE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e027      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	b29a      	uxth	r2, r3
 800150c:	2316      	movs	r3, #22
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	18d3      	adds	r3, r2, r3
 8001516:	b299      	uxth	r1, r3
 8001518:	2018      	movs	r0, #24
 800151a:	183b      	adds	r3, r7, r0
 800151c:	183a      	adds	r2, r7, r0
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	188a      	adds	r2, r1, r2
 8001522:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8001524:	183a      	adds	r2, r7, r0
 8001526:	231a      	movs	r3, #26
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d005      	beq.n	800153e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <astronode_decode_answer_transport+0x324>)
 8001534:	0018      	movs	r0, r3
 8001536:	f000 fdd5 	bl	80020e4 <send_debug_logs>
        return RS_FAILURE;
 800153a:	2300      	movs	r3, #0
 800153c:	e008      	b.n	8001550 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d103      	bne.n	800154e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f8c3 	bl	80016d4 <check_for_error>
    }

    return RS_SUCCESS;
 800154e:	2301      	movs	r3, #1
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b009      	add	sp, #36	; 0x24
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001558:	080077d4 	.word	0x080077d4
 800155c:	08007824 	.word	0x08007824
 8001560:	08007874 	.word	0x08007874
 8001564:	080078c4 	.word	0x080078c4
 8001568:	0000ffff 	.word	0x0000ffff
 800156c:	08007910 	.word	0x08007910

08001570 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	4c2b      	ldr	r4, [pc, #172]	; (8001620 <astronode_transport_send_receive+0xb0>)
 8001574:	44a5      	add	sp, r4
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <astronode_transport_send_receive+0xb4>)
 800157e:	25ca      	movs	r5, #202	; 0xca
 8001580:	00ad      	lsls	r5, r5, #2
 8001582:	195b      	adds	r3, r3, r5
 8001584:	19db      	adds	r3, r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	22c4      	movs	r2, #196	; 0xc4
 800158e:	0052      	lsls	r2, r2, #1
 8001590:	2100      	movs	r1, #0
 8001592:	0018      	movs	r0, r3
 8001594:	f004 fc8c 	bl	8005eb0 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <astronode_transport_send_receive+0xb8>)
 800159a:	195b      	adds	r3, r3, r5
 800159c:	19db      	adds	r3, r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	3304      	adds	r3, #4
 80015a4:	22c4      	movs	r2, #196	; 0xc4
 80015a6:	0052      	lsls	r2, r2, #1
 80015a8:	2100      	movs	r1, #0
 80015aa:	0018      	movs	r0, r3
 80015ac:	f004 fc80 	bl	8005eb0 <memset>
    uint16_t answer_length =  0;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <astronode_transport_send_receive+0xbc>)
 80015b2:	195b      	adds	r3, r3, r5
 80015b4:	19db      	adds	r3, r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80015ba:	4e1d      	ldr	r6, [pc, #116]	; (8001630 <astronode_transport_send_receive+0xc0>)
 80015bc:	19bc      	adds	r4, r7, r6
 80015be:	23cc      	movs	r3, #204	; 0xcc
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	18fa      	adds	r2, r7, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff fd9b 	bl	8001104 <astronode_create_request_transport>
 80015ce:	0003      	movs	r3, r0
 80015d0:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80015d2:	19bb      	adds	r3, r7, r6
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	23cc      	movs	r3, #204	; 0xcc
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	0011      	movs	r1, r2
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 fdca 	bl	8002178 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80015e4:	230a      	movs	r3, #10
 80015e6:	18fa      	adds	r2, r7, r3
 80015e8:	240c      	movs	r4, #12
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	0011      	movs	r1, r2
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 f92c 	bl	800184c <receive_astronode_answer>
 80015f4:	0003      	movs	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10a      	bne.n	8001610 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <astronode_transport_send_receive+0xbc>)
 80015fc:	195b      	adds	r3, r3, r5
 80015fe:	19db      	adds	r3, r3, r7
 8001600:	8819      	ldrh	r1, [r3, #0]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	193b      	adds	r3, r7, r4
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fe1e 	bl	8001248 <astronode_decode_answer_transport>
 800160c:	0003      	movs	r3, r0
 800160e:	e000      	b.n	8001612 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8001610:	2300      	movs	r3, #0
    }
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	23cb      	movs	r3, #203	; 0xcb
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	449d      	add	sp, r3
 800161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	fffffcd4 	.word	0xfffffcd4
 8001624:	fffffe70 	.word	0xfffffe70
 8001628:	fffffce4 	.word	0xfffffce4
 800162c:	fffffce2 	.word	0xfffffce2
 8001630:	00000326 	.word	0x00000326

08001634 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	0008      	movs	r0, r1
 800163e:	0011      	movs	r1, r2
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	1c02      	adds	r2, r0, #0
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	003b      	movs	r3, r7
 8001648:	1c0a      	adds	r2, r1, #0
 800164a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800164c:	230e      	movs	r3, #14
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	003a      	movs	r2, r7
 8001652:	8812      	ldrh	r2, [r2, #0]
 8001654:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8001656:	e02e      	b.n	80016b6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8001658:	240e      	movs	r4, #14
 800165a:	193b      	adds	r3, r7, r4
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b299      	uxth	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b29a      	uxth	r2, r3
 800166c:	200c      	movs	r0, #12
 800166e:	183b      	adds	r3, r7, r0
 8001670:	404a      	eors	r2, r1
 8001672:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8001674:	183b      	adds	r3, r7, r0
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	b299      	uxth	r1, r3
 800167c:	183b      	adds	r3, r7, r0
 800167e:	183a      	adds	r2, r7, r0
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	404a      	eors	r2, r1
 8001684:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8001686:	0021      	movs	r1, r4
 8001688:	187b      	adds	r3, r7, r1
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	183b      	adds	r3, r7, r0
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	031b      	lsls	r3, r3, #12
 8001696:	b21b      	sxth	r3, r3
 8001698:	4053      	eors	r3, r2
 800169a:	b21a      	sxth	r2, r3
 800169c:	183b      	adds	r3, r7, r0
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4053      	eors	r3, r2
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	2000      	movs	r0, #0
 80016ac:	5e1b      	ldrsh	r3, [r3, r0]
 80016ae:	4053      	eors	r3, r2
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	1cba      	adds	r2, r7, #2
 80016bc:	1e59      	subs	r1, r3, #1
 80016be:	8011      	strh	r1, [r2, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1c9      	bne.n	8001658 <calculate_crc+0x24>
    }
    return crc;
 80016c4:	230e      	movs	r3, #14
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	881b      	ldrh	r3, [r3, #0]
}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b005      	add	sp, #20
 80016d0:	bd90      	pop	{r4, r7, pc}
	...

080016d4 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	b299      	uxth	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	200e      	movs	r0, #14
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	188a      	adds	r2, r1, r2
 80016f2:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80016f4:	183b      	adds	r3, r7, r0
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	4a40      	ldr	r2, [pc, #256]	; (80017fc <check_for_error+0x128>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d100      	bne.n	8001700 <check_for_error+0x2c>
 80016fe:	e06f      	b.n	80017e0 <check_for_error+0x10c>
 8001700:	4a3e      	ldr	r2, [pc, #248]	; (80017fc <check_for_error+0x128>)
 8001702:	4293      	cmp	r3, r2
 8001704:	dd00      	ble.n	8001708 <check_for_error+0x34>
 8001706:	e070      	b.n	80017ea <check_for_error+0x116>
 8001708:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <check_for_error+0x12c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d100      	bne.n	8001710 <check_for_error+0x3c>
 800170e:	e062      	b.n	80017d6 <check_for_error+0x102>
 8001710:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <check_for_error+0x12c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	dd00      	ble.n	8001718 <check_for_error+0x44>
 8001716:	e068      	b.n	80017ea <check_for_error+0x116>
 8001718:	4a3a      	ldr	r2, [pc, #232]	; (8001804 <check_for_error+0x130>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d056      	beq.n	80017cc <check_for_error+0xf8>
 800171e:	4a39      	ldr	r2, [pc, #228]	; (8001804 <check_for_error+0x130>)
 8001720:	4293      	cmp	r3, r2
 8001722:	dd00      	ble.n	8001726 <check_for_error+0x52>
 8001724:	e061      	b.n	80017ea <check_for_error+0x116>
 8001726:	4a38      	ldr	r2, [pc, #224]	; (8001808 <check_for_error+0x134>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04a      	beq.n	80017c2 <check_for_error+0xee>
 800172c:	4a36      	ldr	r2, [pc, #216]	; (8001808 <check_for_error+0x134>)
 800172e:	4293      	cmp	r3, r2
 8001730:	dc5b      	bgt.n	80017ea <check_for_error+0x116>
 8001732:	4a36      	ldr	r2, [pc, #216]	; (800180c <check_for_error+0x138>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d03f      	beq.n	80017b8 <check_for_error+0xe4>
 8001738:	4a34      	ldr	r2, [pc, #208]	; (800180c <check_for_error+0x138>)
 800173a:	4293      	cmp	r3, r2
 800173c:	dc55      	bgt.n	80017ea <check_for_error+0x116>
 800173e:	4a34      	ldr	r2, [pc, #208]	; (8001810 <check_for_error+0x13c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d034      	beq.n	80017ae <check_for_error+0xda>
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <check_for_error+0x13c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	dc4f      	bgt.n	80017ea <check_for_error+0x116>
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <check_for_error+0x140>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d029      	beq.n	80017a4 <check_for_error+0xd0>
 8001750:	4a30      	ldr	r2, [pc, #192]	; (8001814 <check_for_error+0x140>)
 8001752:	4293      	cmp	r3, r2
 8001754:	dc49      	bgt.n	80017ea <check_for_error+0x116>
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <check_for_error+0x144>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d01e      	beq.n	800179a <check_for_error+0xc6>
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <check_for_error+0x144>)
 800175e:	4293      	cmp	r3, r2
 8001760:	dc43      	bgt.n	80017ea <check_for_error+0x116>
 8001762:	2222      	movs	r2, #34	; 0x22
 8001764:	32ff      	adds	r2, #255	; 0xff
 8001766:	4293      	cmp	r3, r2
 8001768:	d012      	beq.n	8001790 <check_for_error+0xbc>
 800176a:	2291      	movs	r2, #145	; 0x91
 800176c:	0052      	lsls	r2, r2, #1
 800176e:	4293      	cmp	r3, r2
 8001770:	da3b      	bge.n	80017ea <check_for_error+0x116>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d002      	beq.n	800177c <check_for_error+0xa8>
 8001776:	2b11      	cmp	r3, #17
 8001778:	d005      	beq.n	8001786 <check_for_error+0xb2>
 800177a:	e036      	b.n	80017ea <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <check_for_error+0x148>)
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fcb0 	bl	80020e4 <send_debug_logs>
            break;
 8001784:	e036      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <check_for_error+0x14c>)
 8001788:	0018      	movs	r0, r3
 800178a:	f000 fcab 	bl	80020e4 <send_debug_logs>
            break;
 800178e:	e031      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <check_for_error+0x150>)
 8001792:	0018      	movs	r0, r3
 8001794:	f000 fca6 	bl	80020e4 <send_debug_logs>
            break;
 8001798:	e02c      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <check_for_error+0x154>)
 800179c:	0018      	movs	r0, r3
 800179e:	f000 fca1 	bl	80020e4 <send_debug_logs>
            break;
 80017a2:	e027      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <check_for_error+0x158>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 fc9c 	bl	80020e4 <send_debug_logs>
            break;
 80017ac:	e022      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <check_for_error+0x15c>)
 80017b0:	0018      	movs	r0, r3
 80017b2:	f000 fc97 	bl	80020e4 <send_debug_logs>
            break;
 80017b6:	e01d      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <check_for_error+0x160>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 fc92 	bl	80020e4 <send_debug_logs>
            break;
 80017c0:	e018      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <check_for_error+0x164>)
 80017c4:	0018      	movs	r0, r3
 80017c6:	f000 fc8d 	bl	80020e4 <send_debug_logs>
            break;
 80017ca:	e013      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <check_for_error+0x168>)
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 fc88 	bl	80020e4 <send_debug_logs>
            break;
 80017d4:	e00e      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <check_for_error+0x16c>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fc83 	bl	80020e4 <send_debug_logs>
            break;
 80017de:	e009      	b.n	80017f4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <check_for_error+0x170>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fc7e 	bl	80020e4 <send_debug_logs>
            break;
 80017e8:	e004      	b.n	80017f4 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <check_for_error+0x174>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 fc79 	bl	80020e4 <send_debug_logs>
            break;
 80017f2:	46c0      	nop			; (mov r8, r8)
    }
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b004      	add	sp, #16
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	00004601 	.word	0x00004601
 8001800:	00004501 	.word	0x00004501
 8001804:	00003501 	.word	0x00003501
 8001808:	00002601 	.word	0x00002601
 800180c:	00002511 	.word	0x00002511
 8001810:	00002501 	.word	0x00002501
 8001814:	00000611 	.word	0x00000611
 8001818:	00000601 	.word	0x00000601
 800181c:	08007954 	.word	0x08007954
 8001820:	080079a0 	.word	0x080079a0
 8001824:	08007a04 	.word	0x08007a04
 8001828:	08007a3c 	.word	0x08007a3c
 800182c:	08007ae0 	.word	0x08007ae0
 8001830:	08007b48 	.word	0x08007b48
 8001834:	08007ba8 	.word	0x08007ba8
 8001838:	08007c34 	.word	0x08007c34
 800183c:	08007c94 	.word	0x08007c94
 8001840:	08007d40 	.word	0x08007d40
 8001844:	08007d8c 	.word	0x08007d8c
 8001848:	08007dd4 	.word	0x08007dd4

0800184c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8001856:	230f      	movs	r3, #15
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800185e:	2316      	movs	r3, #22
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2200      	movs	r2, #0
 8001864:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8001866:	f000 fca5 	bl	80021b4 <get_systick>
 800186a:	0003      	movs	r3, r0
 800186c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800186e:	2315      	movs	r3, #21
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8001876:	e054      	b.n	8001922 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8001878:	4a34      	ldr	r2, [pc, #208]	; (800194c <receive_astronode_answer+0x100>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f000 fca0 	bl	80021c4 <is_systick_timeout_over>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d005      	beq.n	8001894 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <receive_astronode_answer+0x104>)
 800188a:	0018      	movs	r0, r3
 800188c:	f000 fc2a 	bl	80020e4 <send_debug_logs>
            return RS_FAILURE;
 8001890:	2300      	movs	r3, #0
 8001892:	e057      	b.n	8001944 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8001894:	250f      	movs	r5, #15
 8001896:	197b      	adds	r3, r7, r5
 8001898:	0018      	movs	r0, r3
 800189a:	f000 fca9 	bl	80021f0 <is_astronode_character_received>
 800189e:	0003      	movs	r3, r0
 80018a0:	0019      	movs	r1, r3
 80018a2:	2016      	movs	r0, #22
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	183a      	adds	r2, r7, r0
 80018a8:	8812      	ldrh	r2, [r2, #0]
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	2415      	movs	r4, #21
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	193a      	adds	r2, r7, r4
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	2900      	cmp	r1, #0
 80018b8:	d033      	beq.n	8001922 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80018ba:	197b      	adds	r3, r7, r5
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d105      	bne.n	80018ce <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
                length = 0;
 80018c8:	183b      	adds	r3, r7, r0
 80018ca:	2200      	movs	r2, #0
 80018cc:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80018ce:	2116      	movs	r1, #22
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	18d3      	adds	r3, r2, r3
 80018d8:	220f      	movs	r2, #15
 80018da:	18ba      	adds	r2, r7, r2
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	701a      	strb	r2, [r3, #0]
            length++;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	3201      	adds	r2, #1
 80018e8:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2bb2      	cmp	r3, #178	; 0xb2
 80018f0:	d905      	bls.n	80018fe <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <receive_astronode_answer+0x108>)
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 fbf5 	bl	80020e4 <send_debug_logs>
                return RS_FAILURE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e022      	b.n	8001944 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80018fe:	230f      	movs	r3, #15
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d10c      	bne.n	8001922 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8001908:	2216      	movs	r2, #22
 800190a:	18bb      	adds	r3, r7, r2
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d907      	bls.n	8001922 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	18ba      	adds	r2, r7, r2
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800191a:	2315      	movs	r3, #21
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8001922:	2315      	movs	r3, #21
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4053      	eors	r3, r2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1a2      	bne.n	8001878 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <receive_astronode_answer+0x10c>)
 8001934:	0018      	movs	r0, r3
 8001936:	f000 fbd5 	bl	80020e4 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0018      	movs	r0, r3
 800193e:	f000 fbd1 	bl	80020e4 <send_debug_logs>

    return RS_SUCCESS;
 8001942:	2301      	movs	r3, #1
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	000005dc 	.word	0x000005dc
 8001950:	08007df8 	.word	0x08007df8
 8001954:	08007e1c 	.word	0x08007e1c
 8001958:	08007e68 	.word	0x08007e68

0800195c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	0002      	movs	r2, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	b2db      	uxtb	r3, r3
 8001972:	001a      	movs	r2, r3
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <uint8_to_ascii_buffer+0x3c>)
 8001976:	5c9a      	ldrb	r2, [r3, r2]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800197c:	1dfb      	adds	r3, r7, #7
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	220f      	movs	r2, #15
 8001982:	401a      	ands	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <uint8_to_ascii_buffer+0x3c>)
 800198a:	5c8a      	ldrb	r2, [r1, r2]
 800198c:	701a      	strb	r2, [r3, #0]
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	08008018 	.word	0x08008018

0800199c <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	0008      	movs	r0, r1
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	0019      	movs	r1, r3
 80019aa:	230b      	movs	r3, #11
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	1c02      	adds	r2, r0, #0
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	2308      	movs	r3, #8
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	1c0a      	adds	r2, r1, #0
 80019b8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <iis2dh_read_reg+0x2a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	425b      	negs	r3, r3
 80019c4:	e00f      	b.n	80019e6 <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685c      	ldr	r4, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	68d8      	ldr	r0, [r3, #12]
 80019ce:	2308      	movs	r3, #8
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	881d      	ldrh	r5, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	230b      	movs	r3, #11
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	7819      	ldrb	r1, [r3, #0]
 80019dc:	002b      	movs	r3, r5
 80019de:	47a0      	blx	r4
 80019e0:	0003      	movs	r3, r0
 80019e2:	617b      	str	r3, [r7, #20]

  return ret;
 80019e4:	697b      	ldr	r3, [r7, #20]
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b006      	add	sp, #24
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}

080019ee <iis2dh_write_reg>:
  *
  */
int32_t __weak iis2dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80019ee:	b5b0      	push	{r4, r5, r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	0008      	movs	r0, r1
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	0019      	movs	r1, r3
 80019fc:	230b      	movs	r3, #11
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	1c02      	adds	r2, r0, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	2308      	movs	r3, #8
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	1c0a      	adds	r2, r1, #0
 8001a0a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <iis2dh_write_reg+0x2a>
 8001a12:	2301      	movs	r3, #1
 8001a14:	425b      	negs	r3, r3
 8001a16:	e00f      	b.n	8001a38 <iis2dh_write_reg+0x4a>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68d8      	ldr	r0, [r3, #12]
 8001a20:	2308      	movs	r3, #8
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	881d      	ldrh	r5, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	230b      	movs	r3, #11
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	7819      	ldrb	r1, [r3, #0]
 8001a2e:	002b      	movs	r3, r5
 8001a30:	47a0      	blx	r4
 8001a32:	0003      	movs	r3, r0
 8001a34:	617b      	str	r3, [r7, #20]

  return ret;
 8001a36:	697b      	ldr	r3, [r7, #20]
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}

08001a40 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	000a      	movs	r2, r1
 8001a4a:	1cfb      	adds	r3, r7, #3
 8001a4c:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001a4e:	2310      	movs	r3, #16
 8001a50:	18fa      	adds	r2, r7, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	2301      	movs	r3, #1
 8001a56:	2120      	movs	r1, #32
 8001a58:	f7ff ffa0 	bl	800199c <iis2dh_read_reg>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <iis2dh_operating_mode_set+0x38>
  {
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001a66:	230c      	movs	r3, #12
 8001a68:	18fa      	adds	r2, r7, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	2123      	movs	r1, #35	; 0x23
 8001a70:	f7ff ff94 	bl	800199c <iis2dh_read_reg>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d138      	bne.n	8001af0 <iis2dh_operating_mode_set+0xb0>
  {
    if (val == IIS2DH_HR_12bit)
 8001a7e:	1cfb      	adds	r3, r7, #3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10b      	bne.n	8001a9e <iis2dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8001a86:	2310      	movs	r3, #16
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	438a      	bics	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8001a92:	230c      	movs	r3, #12
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	2108      	movs	r1, #8
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_NM_10bit)
 8001a9e:	1cfb      	adds	r3, r7, #3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10b      	bne.n	8001abe <iis2dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	2108      	movs	r1, #8
 8001aae:	438a      	bics	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	2108      	movs	r1, #8
 8001aba:	438a      	bics	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_LP_8bit)
 8001abe:	1cfb      	adds	r3, r7, #3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d10b      	bne.n	8001ade <iis2dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	2108      	movs	r1, #8
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	2108      	movs	r1, #8
 8001ada:	438a      	bics	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001ade:	2310      	movs	r3, #16
 8001ae0:	18fa      	adds	r2, r7, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	f7ff ff81 	bl	80019ee <iis2dh_write_reg>
 8001aec:	0003      	movs	r3, r0
 8001aee:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <iis2dh_operating_mode_set+0xc8>
  {
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001af6:	230c      	movs	r3, #12
 8001af8:	18fa      	adds	r2, r7, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	2301      	movs	r3, #1
 8001afe:	2123      	movs	r1, #35	; 0x23
 8001b00:	f7ff ff75 	bl	80019ee <iis2dh_write_reg>
 8001b04:	0003      	movs	r3, r0
 8001b06:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001b08:	697b      	ldr	r3, [r7, #20]
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b006      	add	sp, #24
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(const stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 8001b12:	b590      	push	{r4, r7, lr}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	1cfb      	adds	r3, r7, #3
 8001b1e:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b20:	2408      	movs	r4, #8
 8001b22:	193a      	adds	r2, r7, r4
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2120      	movs	r1, #32
 8001b2a:	f7ff ff37 	bl	800199c <iis2dh_read_reg>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d115      	bne.n	8001b64 <iis2dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8001b38:	1cfb      	adds	r3, r7, #3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	4013      	ands	r3, r2
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	0110      	lsls	r0, r2, #4
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	210f      	movs	r1, #15
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	1c11      	adds	r1, r2, #0
 8001b4e:	1c02      	adds	r2, r0, #0
 8001b50:	430a      	orrs	r2, r1
 8001b52:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b54:	193a      	adds	r2, r7, r4
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	f7ff ff47 	bl	80019ee <iis2dh_write_reg>
 8001b60:	0003      	movs	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b64:	68fb      	ldr	r3, [r7, #12]
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b005      	add	sp, #20
 8001b6c:	bd90      	pop	{r4, r7, pc}

08001b6e <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(const stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 8001b6e:	b590      	push	{r4, r7, lr}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	000a      	movs	r2, r1
 8001b78:	1cfb      	adds	r3, r7, #3
 8001b7a:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001b7c:	2408      	movs	r4, #8
 8001b7e:	193a      	adds	r2, r7, r4
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	2301      	movs	r3, #1
 8001b84:	2123      	movs	r1, #35	; 0x23
 8001b86:	f7ff ff09 	bl	800199c <iis2dh_read_reg>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d117      	bne.n	8001bc4 <iis2dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001b94:	1cfb      	adds	r3, r7, #3
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	0110      	lsls	r0, r2, #4
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	2130      	movs	r1, #48	; 0x30
 8001baa:	438a      	bics	r2, r1
 8001bac:	1c11      	adds	r1, r2, #0
 8001bae:	1c02      	adds	r2, r0, #0
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001bb4:	193a      	adds	r2, r7, r4
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2123      	movs	r1, #35	; 0x23
 8001bbc:	f7ff ff17 	bl	80019ee <iis2dh_write_reg>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b005      	add	sp, #20
 8001bcc:	bd90      	pop	{r4, r7, pc}
	...

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd4:	f000 fd96 	bl	8002704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd8:	f000 f82a 	bl	8001c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bdc:	f000 f94a 	bl	8001e74 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001be0:	f000 f86e 	bl	8001cc0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001be4:	f000 f8aa 	bl	8001d3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001be8:	f000 f8f6 	bl	8001dd8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( "Hello ULP Test" ) ;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <main+0x54>)
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 fa78 	bl	80020e4 <send_debug_logs>
  sys_init () ;
 8001bf4:	f000 fb70 	bl	80022d8 <sys_init>
  HAL_Delay ( 4000 ) ;
 8001bf8:	23fa      	movs	r3, #250	; 0xfa
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 fe07 	bl	8002810 <HAL_Delay>
  HAL_UART_DeInit ( &huart2 ) ;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <main+0x58>)
 8001c04:	0018      	movs	r0, r3
 8001c06:	f003 f891 	bl	8004d2c <HAL_UART_DeInit>
  HAL_UART_DeInit ( &huart3 ) ;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <main+0x5c>)
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f003 f88d 	bl	8004d2c <HAL_UART_DeInit>
  HAL_Delay ( 1000 ) ;
 8001c12:	23fa      	movs	r3, #250	; 0xfa
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 fdfa 	bl	8002810 <HAL_Delay>
  HAL_PWREx_EnterSHUTDOWNMode () ;
 8001c1c:	f001 f9a4 	bl	8002f68 <HAL_PWREx_EnterSHUTDOWNMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <main+0x50>
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	08007e94 	.word	0x08007e94
 8001c28:	200000e0 	.word	0x200000e0
 8001c2c:	20000174 	.word	0x20000174

08001c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b095      	sub	sp, #84	; 0x54
 8001c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c36:	2414      	movs	r4, #20
 8001c38:	193b      	adds	r3, r7, r4
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	233c      	movs	r3, #60	; 0x3c
 8001c3e:	001a      	movs	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	f004 f935 	bl	8005eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	0018      	movs	r0, r3
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f004 f92e 	bl	8005eb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f001 f945 	bl	8002ee8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	2202      	movs	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	0052      	lsls	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	0018      	movs	r0, r3
 8001c82:	f001 f997 	bl	8002fb4 <HAL_RCC_OscConfig>
 8001c86:	1e03      	subs	r3, r0, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001c8a:	f000 fb30 	bl	80022ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2100      	movs	r1, #0
 8001caa:	0018      	movs	r0, r3
 8001cac:	f001 fce2 	bl	8003674 <HAL_RCC_ClockConfig>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001cb4:	f000 fb1b 	bl	80022ee <Error_Handler>
  }
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b015      	add	sp, #84	; 0x54
 8001cbe:	bd90      	pop	{r4, r7, pc}

08001cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <MX_SPI1_Init+0x78>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001ccc:	2282      	movs	r2, #130	; 0x82
 8001cce:	0052      	lsls	r2, r2, #1
 8001cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001cda:	22e0      	movs	r2, #224	; 0xe0
 8001cdc:	00d2      	lsls	r2, r2, #3
 8001cde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001d0e:	2207      	movs	r2, #7
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <MX_SPI1_Init+0x74>)
 8001d20:	0018      	movs	r0, r3
 8001d22:	f002 f88d 	bl	8003e40 <HAL_SPI_Init>
 8001d26:	1e03      	subs	r3, r0, #0
 8001d28:	d001      	beq.n	8001d2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d2a:	f000 fae0 	bl	80022ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000007c 	.word	0x2000007c
 8001d38:	40013000 	.word	0x40013000

08001d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d42:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <MX_USART2_UART_Init+0x98>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d48:	22e1      	movs	r2, #225	; 0xe1
 8001d4a:	0252      	lsls	r2, r2, #9
 8001d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d86:	0018      	movs	r0, r3
 8001d88:	f002 ff7a 	bl	8004c80 <HAL_UART_Init>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d90:	f000 faad 	bl	80022ee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d96:	2100      	movs	r1, #0
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f003 ff55 	bl	8005c48 <HAL_UARTEx_SetTxFifoThreshold>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001da2:	f000 faa4 	bl	80022ee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001da8:	2100      	movs	r1, #0
 8001daa:	0018      	movs	r0, r3
 8001dac:	f003 ff8c 	bl	8005cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001db4:	f000 fa9b 	bl	80022ee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f003 ff0a 	bl	8005bd4 <HAL_UARTEx_DisableFifoMode>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001dc4:	f000 fa93 	bl	80022ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	200000e0 	.word	0x200000e0
 8001dd4:	40004400 	.word	0x40004400

08001dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001dde:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <MX_USART3_UART_Init+0x98>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001de4:	2296      	movs	r2, #150	; 0x96
 8001de6:	0192      	lsls	r2, r2, #6
 8001de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e22:	0018      	movs	r0, r3
 8001e24:	f002 ff2c 	bl	8004c80 <HAL_UART_Init>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f000 fa5f 	bl	80022ee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e32:	2100      	movs	r1, #0
 8001e34:	0018      	movs	r0, r3
 8001e36:	f003 ff07 	bl	8005c48 <HAL_UARTEx_SetTxFifoThreshold>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f000 fa56 	bl	80022ee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e44:	2100      	movs	r1, #0
 8001e46:	0018      	movs	r0, r3
 8001e48:	f003 ff3e 	bl	8005cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001e4c:	1e03      	subs	r3, r0, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f000 fa4d 	bl	80022ee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001e56:	0018      	movs	r0, r3
 8001e58:	f003 febc 	bl	8005bd4 <HAL_UARTEx_DisableFifoMode>
 8001e5c:	1e03      	subs	r3, r0, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f000 fa45 	bl	80022ee <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	20000174 	.word	0x20000174
 8001e70:	40004800 	.word	0x40004800

08001e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7a:	240c      	movs	r4, #12
 8001e7c:	193b      	adds	r3, r7, r4
 8001e7e:	0018      	movs	r0, r3
 8001e80:	2314      	movs	r3, #20
 8001e82:	001a      	movs	r2, r3
 8001e84:	2100      	movs	r1, #0
 8001e86:	f004 f813 	bl	8005eb0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b3c      	ldr	r3, [pc, #240]	; (8001f7c <MX_GPIO_Init+0x108>)
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <MX_GPIO_Init+0x108>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <MX_GPIO_Init+0x108>)
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <MX_GPIO_Init+0x108>)
 8001ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <MX_GPIO_Init+0x108>)
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
 8001eae:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <MX_GPIO_Init+0x108>)
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 8001eba:	23a0      	movs	r3, #160	; 0xa0
 8001ebc:	05db      	lsls	r3, r3, #23
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fff3 	bl	8002eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 8001ec8:	492d      	ldr	r1, [pc, #180]	; (8001f80 <MX_GPIO_Init+0x10c>)
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <MX_GPIO_Init+0x110>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 ffed 	bl	8002eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GNSS_RST_GPIO_Port, GNSS_RST_Pin, GPIO_PIN_SET);
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	019b      	lsls	r3, r3, #6
 8001ed8:	482a      	ldr	r0, [pc, #168]	; (8001f84 <MX_GPIO_Init+0x110>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	0019      	movs	r1, r3
 8001ede:	f000 ffe6 	bl	8002eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 8001ee2:	193b      	adds	r3, r7, r4
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	2201      	movs	r2, #1
 8001eec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 8001efa:	193a      	adds	r2, r7, r4
 8001efc:	23a0      	movs	r3, #160	; 0xa0
 8001efe:	05db      	lsls	r3, r3, #23
 8001f00:	0011      	movs	r1, r2
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 fd72 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_RST_Pin|GNSS_PWR_SW_Pin;
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <MX_GPIO_Init+0x10c>)
 8001f0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	2201      	movs	r2, #1
 8001f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	193b      	adds	r3, r7, r4
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	193b      	adds	r3, r7, r4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	193b      	adds	r3, r7, r4
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <MX_GPIO_Init+0x110>)
 8001f24:	0019      	movs	r1, r3
 8001f26:	0010      	movs	r0, r2
 8001f28:	f000 fd60 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	2204      	movs	r2, #4
 8001f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <MX_GPIO_Init+0x110>)
 8001f42:	0019      	movs	r1, r3
 8001f44:	0010      	movs	r0, r2
 8001f46:	f000 fd51 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8001f4a:	0021      	movs	r1, r4
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	0192      	lsls	r2, r2, #6
 8001f52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	2211      	movs	r2, #17
 8001f58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <MX_GPIO_Init+0x110>)
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	0010      	movs	r0, r2
 8001f6e:	f000 fd3d 	bl	80029ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b009      	add	sp, #36	; 0x24
 8001f78:	bd90      	pop	{r4, r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	00008002 	.word	0x00008002
 8001f84:	50000400 	.word	0x50000400

08001f88 <acc_init>:

/* USER CODE BEGIN 4 */

void acc_init ( void )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	my_acc_ctx.write_reg = my_lis2dw12_platform_write ;
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <acc_init+0x3c>)
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <acc_init+0x40>)
 8001f90:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_lis2dw12_platform_read ;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <acc_init+0x3c>)
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <acc_init+0x44>)
 8001f96:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <acc_init+0x3c>)
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <acc_init+0x48>)
 8001f9c:	60da      	str	r2, [r3, #12]
	iis2dh_full_scale_set ( &my_acc_ctx , IIS2DH_2g ) ;
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <acc_init+0x3c>)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff fde3 	bl	8001b6e <iis2dh_full_scale_set>
	iis2dh_operating_mode_set ( &my_acc_ctx , IIS2DH_LP_8bit ) ;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <acc_init+0x3c>)
 8001faa:	2102      	movs	r1, #2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7ff fd47 	bl	8001a40 <iis2dh_operating_mode_set>
	iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_ODR_10Hz ) ;
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <acc_init+0x3c>)
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7ff fdab 	bl	8001b12 <iis2dh_data_rate_set>
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	20000304 	.word	0x20000304
 8001fc8:	08001fd5 	.word	0x08001fd5
 8001fcc:	0800203f 	.word	0x0800203f
 8001fd0:	2000007c 	.word	0x2000007c

08001fd4 <my_lis2dw12_platform_write>:
// ACC LL Function
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	0008      	movs	r0, r1
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	240b      	movs	r4, #11
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	1c02      	adds	r2, r0, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	2508      	movs	r5, #8
 8001fec:	197b      	adds	r3, r7, r5
 8001fee:	1c0a      	adds	r2, r1, #0
 8001ff0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_RESET ) ;
 8001ff2:	23a0      	movs	r3, #160	; 0xa0
 8001ff4:	05db      	lsls	r3, r3, #23
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2110      	movs	r1, #16
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 ff57 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8002000:	2014      	movs	r0, #20
 8002002:	f000 fc05 	bl	8002810 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8002006:	23fa      	movs	r3, #250	; 0xfa
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	1939      	adds	r1, r7, r4
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f001 ffce 	bl	8003fb0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8002014:	23fa      	movs	r3, #250	; 0xfa
 8002016:	009c      	lsls	r4, r3, #2
 8002018:	197b      	adds	r3, r7, r5
 800201a:	881a      	ldrh	r2, [r3, #0]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	0023      	movs	r3, r4
 8002022:	f001 ffc5 	bl	8003fb0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_SET) ;
 8002026:	23a0      	movs	r3, #160	; 0xa0
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	2201      	movs	r2, #1
 800202c:	2110      	movs	r1, #16
 800202e:	0018      	movs	r0, r3
 8002030:	f000 ff3d 	bl	8002eae <HAL_GPIO_WritePin>

	return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bdb0      	pop	{r4, r5, r7, pc}

0800203e <my_lis2dw12_platform_read>:

int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 800203e:	b5b0      	push	{r4, r5, r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	0008      	movs	r0, r1
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	0019      	movs	r1, r3
 800204c:	240b      	movs	r4, #11
 800204e:	193b      	adds	r3, r7, r4
 8002050:	1c02      	adds	r2, r0, #0
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	2508      	movs	r5, #8
 8002056:	197b      	adds	r3, r7, r5
 8002058:	1c0a      	adds	r2, r1, #0
 800205a:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 800205c:	193b      	adds	r3, r7, r4
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	4252      	negs	r2, r2
 8002064:	4313      	orrs	r3, r2
 8002066:	b2da      	uxtb	r2, r3
 8002068:	193b      	adds	r3, r7, r4
 800206a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_RESET) ;
 800206c:	23a0      	movs	r3, #160	; 0xa0
 800206e:	05db      	lsls	r3, r3, #23
 8002070:	2200      	movs	r2, #0
 8002072:	2110      	movs	r1, #16
 8002074:	0018      	movs	r0, r3
 8002076:	f000 ff1a 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 800207a:	2014      	movs	r0, #20
 800207c:	f000 fbc8 	bl	8002810 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8002080:	23fa      	movs	r3, #250	; 0xfa
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	1939      	adds	r1, r7, r4
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	f001 ff91 	bl	8003fb0 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 800208e:	23fa      	movs	r3, #250	; 0xfa
 8002090:	009c      	lsls	r4, r3, #2
 8002092:	197b      	adds	r3, r7, r5
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	0023      	movs	r3, r4
 800209c:	f002 f8e8 	bl	8004270 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_CS_GPIO_Port , ACC_CS_Pin , GPIO_PIN_SET) ;
 80020a0:	23a0      	movs	r3, #160	; 0xa0
 80020a2:	05db      	lsls	r3, r3, #23
 80020a4:	2201      	movs	r2, #1
 80020a6:	2110      	movs	r1, #16
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 ff00 	bl	8002eae <HAL_GPIO_WritePin>

	return 0;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b004      	add	sp, #16
 80020b6:	bdb0      	pop	{r4, r5, r7, pc}

080020b8 <gnss_sw_off>:
void gnss_init ( void )
{
	HAL_GPIO_WritePin ( GNSS_RST_GPIO_Port , GNSS_RST_Pin, GPIO_PIN_SET ) ;
}
void gnss_sw_off ( void )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <gnss_sw_off+0x28>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	0019      	movs	r1, r3
 80020c6:	f000 fef2 	bl	8002eae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_RST_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	4804      	ldr	r0, [pc, #16]	; (80020e0 <gnss_sw_off+0x28>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	0019      	movs	r1, r3
 80020d4:	f000 feeb 	bl	8002eae <HAL_GPIO_WritePin>
		//HAL_UART_DeInit ( &HUART_GNSS ) ;
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	50000400 	.word	0x50000400

080020e4 <send_debug_logs>:
// ASTRO
void send_debug_logs ( char* p_tx_buffer )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7fe f808 	bl	8000104 <strlen>
 80020f4:	0003      	movs	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]

    if ( length > 250 )
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2bfa      	cmp	r3, #250	; 0xfa
 80020fc:	d908      	bls.n	8002110 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &huart2 , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80020fe:	23fa      	movs	r3, #250	; 0xfa
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	490d      	ldr	r1, [pc, #52]	; (8002138 <send_debug_logs+0x54>)
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <send_debug_logs+0x58>)
 8002106:	222a      	movs	r2, #42	; 0x2a
 8002108:	f002 fe50 	bl	8004dac <HAL_UART_Transmit>
        length = 250 ;
 800210c:	23fa      	movs	r3, #250	; 0xfa
 800210e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &huart2 , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	b29a      	uxth	r2, r3
 8002114:	23fa      	movs	r3, #250	; 0xfa
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <send_debug_logs+0x58>)
 800211c:	f002 fe46 	bl	8004dac <HAL_UART_Transmit>
    HAL_UART_Transmit ( &huart2 , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002120:	23fa      	movs	r3, #250	; 0xfa
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4906      	ldr	r1, [pc, #24]	; (8002140 <send_debug_logs+0x5c>)
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <send_debug_logs+0x58>)
 8002128:	2201      	movs	r2, #1
 800212a:	f002 fe3f 	bl	8004dac <HAL_UART_Transmit>
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	08007ea4 	.word	0x08007ea4
 800213c:	200000e0 	.word	0x200000e0
 8002140:	08007ed0 	.word	0x08007ed0

08002144 <my_astronode_reset>:
void my_astronode_reset ( void )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <my_astronode_reset+0x30>)
 800214a:	2201      	movs	r2, #1
 800214c:	2102      	movs	r1, #2
 800214e:	0018      	movs	r0, r3
 8002150:	f000 fead 	bl	8002eae <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002154:	2001      	movs	r0, #1
 8002156:	f000 fb5b 	bl	8002810 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <my_astronode_reset+0x30>)
 800215c:	2200      	movs	r2, #0
 800215e:	2102      	movs	r1, #2
 8002160:	0018      	movs	r0, r3
 8002162:	f000 fea4 	bl	8002eae <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002166:	20fa      	movs	r0, #250	; 0xfa
 8002168:	f000 fb52 	bl	8002810 <HAL_Delay>
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	50000400 	.word	0x50000400

08002178 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <send_astronode_request+0x34>)
 8002184:	0018      	movs	r0, r3
 8002186:	f7ff ffad 	bl	80020e4 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff ffa9 	bl	80020e4 <send_debug_logs>
    HAL_UART_Transmit ( &huart3 , p_tx_buffer , length , 1000 ) ;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b29a      	uxth	r2, r3
 8002196:	23fa      	movs	r3, #250	; 0xfa
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4804      	ldr	r0, [pc, #16]	; (80021b0 <send_astronode_request+0x38>)
 800219e:	f002 fe05 	bl	8004dac <HAL_UART_Transmit>
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b002      	add	sp, #8
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	08007ed4 	.word	0x08007ed4
 80021b0:	20000174 	.word	0x20000174

080021b4 <get_systick>:
uint32_t get_systick ( void )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 80021b8:	f000 fb20 	bl	80027fc <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	000a      	movs	r2, r1
 80021ce:	1cbb      	adds	r3, r7, #2
 80021d0:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80021d2:	f7ff ffef 	bl	80021b4 <get_systick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	1cba      	adds	r2, r7, #2
 80021de:	8812      	ldrh	r2, [r2, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	419b      	sbcs	r3, r3
 80021e4:	425b      	negs	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &huart3 , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4806      	ldr	r0, [pc, #24]	; (8002214 <is_astronode_character_received+0x24>)
 80021fc:	2364      	movs	r3, #100	; 0x64
 80021fe:	2201      	movs	r2, #1
 8002200:	f002 fe78 	bl	8004ef4 <HAL_UART_Receive>
 8002204:	0003      	movs	r3, r0
 8002206:	425a      	negs	r2, r3
 8002208:	4153      	adcs	r3, r2
 800220a:	b2db      	uxtb	r3, r3
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000174 	.word	0x20000174

08002218 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <my_astro_evt_pin+0x20>)
 800221e:	2104      	movs	r1, #4
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fe27 	bl	8002e74 <HAL_GPIO_ReadPin>
 8002226:	0003      	movs	r3, r0
 8002228:	3b01      	subs	r3, #1
 800222a:	425a      	negs	r2, r3
 800222c:	4153      	adcs	r3, r2
 800222e:	b2db      	uxtb	r3, r3
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	50000400 	.word	0x50000400

0800223c <my_astro_init>:
void my_astro_init ( void )
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b087      	sub	sp, #28
 8002240:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 8002248:	e012      	b.n	8002270 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800224a:	f7ff ff7b 	bl	8002144 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800224e:	1dfc      	adds	r4, r7, #7
 8002250:	2300      	movs	r3, #0
 8002252:	9303      	str	r3, [sp, #12]
 8002254:	2301      	movs	r3, #1
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2301      	movs	r3, #1
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2300      	movs	r3, #0
 8002262:	2201      	movs	r2, #1
 8002264:	2101      	movs	r1, #1
 8002266:	2001      	movs	r0, #1
 8002268:	f7fe fa22 	bl	80006b0 <astronode_send_cfg_wr>
 800226c:	0003      	movs	r3, r0
 800226e:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2201      	movs	r2, #1
 8002276:	4053      	eors	r3, r2
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1e5      	bne.n	800224a <my_astro_init+0xe>
	}

	if ( cfg_wr )
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d019      	beq.n	80022ba <my_astro_init+0x7e>
	{
		astronode_send_rtc_rr () ;
 8002286:	f7fe fd0f 	bl	8000ca8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800228a:	f7fe f9d9 	bl	8000640 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800228e:	f7fe fe05 	bl	8000e9c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8002292:	f7fe fb63 	bl	800095c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8002296:	f7fe fab7 	bl	8000808 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ; // The module's entire payload queue can be cleared with the Payload Free Request PLD_FR.
 800229a:	f7fe fc89 	bl	8000bb0 <astronode_send_pld_fr>
	}
	while ( my_astro_evt_pin () )
 800229e:	e00c      	b.n	80022ba <my_astro_init+0x7e>
  {
	  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80022a0:	23ef      	movs	r3, #239	; 0xef
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <my_astro_init+0x90>)
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <my_astro_init+0x94>)
 80022a8:	480a      	ldr	r0, [pc, #40]	; (80022d4 <my_astro_init+0x98>)
 80022aa:	f003 fde1 	bl	8005e70 <siprintf>
	  send_debug_logs ( dbg_payload ) ;
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <my_astro_init+0x98>)
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff ff17 	bl	80020e4 <send_debug_logs>
	  my_astro_handle_evt () ;
 80022b6:	f000 f81f 	bl	80022f8 <my_astro_handle_evt>
	while ( my_astro_evt_pin () )
 80022ba:	f7ff ffad 	bl	8002218 <my_astro_evt_pin>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d1ee      	bne.n	80022a0 <my_astro_init+0x64>
  }
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b003      	add	sp, #12
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	08007ef8 	.word	0x08007ef8
 80022d0:	08007f0c 	.word	0x08007f0c
 80022d4:	20000208 	.word	0x20000208

080022d8 <sys_init>:

void sys_init ( void )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	acc_init () ;
 80022dc:	f7ff fe54 	bl	8001f88 <acc_init>
	gnss_sw_off () ;
 80022e0:	f7ff feea 	bl	80020b8 <gnss_sw_off>
	my_astro_init () ;
 80022e4:	f7ff ffaa 	bl	800223c <my_astro_init>
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f2:	b672      	cpsid	i
}
 80022f4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <Error_Handler+0x8>

080022f8 <my_astro_handle_evt>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_handle_evt ( void )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <my_astro_handle_evt+0x58>)
 80022fe:	0018      	movs	r0, r3
 8002300:	f7ff fef0 	bl	80020e4 <send_debug_logs>
	astronode_send_evt_rr () ;
 8002304:	f7fe fbd4 	bl	8000ab0 <astronode_send_evt_rr>
	if (is_sak_available () )
 8002308:	f7fe feb2 	bl	8001070 <is_sak_available>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d007      	beq.n	8002320 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8002310:	f7fe fd2e 	bl	8000d70 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8002314:	f7fe fd82 	bl	8000e1c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <my_astro_handle_evt+0x5c>)
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff fee2 	bl	80020e4 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8002320:	f7fe feb0 	bl	8001084 <is_astronode_reset>
 8002324:	1e03      	subs	r3, r0, #0
 8002326:	d005      	beq.n	8002334 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <my_astro_handle_evt+0x60>)
 800232a:	0018      	movs	r0, r3
 800232c:	f7ff feda 	bl	80020e4 <send_debug_logs>
	  astronode_send_res_cr () ;
 8002330:	f7fe fc7a 	bl	8000c28 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8002334:	f7fe feb0 	bl	8001098 <is_command_available>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d005      	beq.n	8002348 <my_astro_handle_evt+0x50>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <my_astro_handle_evt+0x64>)
 800233e:	0018      	movs	r0, r3
 8002340:	f7ff fed0 	bl	80020e4 <send_debug_logs>
	  astronode_send_cmd_cr () ;
 8002344:	f7fe fe54 	bl	8000ff0 <astronode_send_cmd_cr>
	}
	return true ;
 8002348:	2301      	movs	r3, #1
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	08007f24 	.word	0x08007f24
 8002354:	08007f58 	.word	0x08007f58
 8002358:	08007f9c 	.word	0x08007f9c
 800235c:	08007fd8 	.word	0x08007fd8

08002360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_MspInit+0x4c>)
 8002368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_MspInit+0x4c>)
 800236c:	2101      	movs	r1, #1
 800236e:	430a      	orrs	r2, r1
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_MspInit+0x4c>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_MspInit+0x4c>)
 8002380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_MspInit+0x4c>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0549      	lsls	r1, r1, #21
 8002388:	430a      	orrs	r2, r1
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_MspInit+0x4c>)
 800238e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	055b      	lsls	r3, r3, #21
 8002394:	4013      	ands	r3, r2
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800239a:	23c0      	movs	r3, #192	; 0xc0
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fa5a 	bl	8002858 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000

080023b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b08b      	sub	sp, #44	; 0x2c
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	2414      	movs	r4, #20
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	0018      	movs	r0, r3
 80023be:	2314      	movs	r3, #20
 80023c0:	001a      	movs	r2, r3
 80023c2:	2100      	movs	r1, #0
 80023c4:	f003 fd74 	bl	8005eb0 <memset>
  if(hspi->Instance==SPI1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_SPI_MspInit+0x8c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d130      	bne.n	8002434 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_SPI_MspInit+0x90>)
 80023d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_SPI_MspInit+0x90>)
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0149      	lsls	r1, r1, #5
 80023dc:	430a      	orrs	r2, r1
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_SPI_MspInit+0x90>)
 80023e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	015b      	lsls	r3, r3, #5
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_SPI_MspInit+0x90>)
 80023f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_SPI_MspInit+0x90>)
 80023f4:	2101      	movs	r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_SPI_MspInit+0x90>)
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	2201      	movs	r2, #1
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SCK_Pin|ACC_MISO_Pin|ACC_MOSI_Pin;
 8002406:	0021      	movs	r1, r4
 8002408:	187b      	adds	r3, r7, r1
 800240a:	22e0      	movs	r2, #224	; 0xe0
 800240c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	187b      	adds	r3, r7, r1
 8002410:	2202      	movs	r2, #2
 8002412:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	187b      	adds	r3, r7, r1
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002420:	187b      	adds	r3, r7, r1
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	187a      	adds	r2, r7, r1
 8002428:	23a0      	movs	r3, #160	; 0xa0
 800242a:	05db      	lsls	r3, r3, #23
 800242c:	0011      	movs	r1, r2
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fadc 	bl	80029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b00b      	add	sp, #44	; 0x2c
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	40013000 	.word	0x40013000
 8002440:	40021000 	.word	0x40021000

08002444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b09f      	sub	sp, #124	; 0x7c
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	0018      	movs	r0, r3
 8002452:	2314      	movs	r3, #20
 8002454:	001a      	movs	r2, r3
 8002456:	2100      	movs	r1, #0
 8002458:	f003 fd2a 	bl	8005eb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800245c:	2418      	movs	r4, #24
 800245e:	193b      	adds	r3, r7, r4
 8002460:	0018      	movs	r0, r3
 8002462:	234c      	movs	r3, #76	; 0x4c
 8002464:	001a      	movs	r2, r3
 8002466:	2100      	movs	r1, #0
 8002468:	f003 fd22 	bl	8005eb0 <memset>
  if(huart->Instance==USART2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a45      	ldr	r2, [pc, #276]	; (8002588 <HAL_UART_MspInit+0x144>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d13f      	bne.n	80024f6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002476:	193b      	adds	r3, r7, r4
 8002478:	2202      	movs	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800247c:	193b      	adds	r3, r7, r4
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002482:	193b      	adds	r3, r7, r4
 8002484:	0018      	movs	r0, r3
 8002486:	f001 fa9f 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d001      	beq.n	8002492 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800248e:	f7ff ff2e 	bl	80022ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002492:	4b3e      	ldr	r3, [pc, #248]	; (800258c <HAL_UART_MspInit+0x148>)
 8002494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002496:	4b3d      	ldr	r3, [pc, #244]	; (800258c <HAL_UART_MspInit+0x148>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0289      	lsls	r1, r1, #10
 800249c:	430a      	orrs	r2, r1
 800249e:	63da      	str	r2, [r3, #60]	; 0x3c
 80024a0:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_UART_MspInit+0x148>)
 80024a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	4013      	ands	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	4b37      	ldr	r3, [pc, #220]	; (800258c <HAL_UART_MspInit+0x148>)
 80024b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_UART_MspInit+0x148>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	430a      	orrs	r2, r1
 80024b8:	635a      	str	r2, [r3, #52]	; 0x34
 80024ba:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_UART_MspInit+0x148>)
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	2201      	movs	r2, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024c6:	2164      	movs	r1, #100	; 0x64
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2202      	movs	r2, #2
 80024d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	2201      	movs	r2, #1
 80024e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	187a      	adds	r2, r7, r1
 80024e8:	23a0      	movs	r3, #160	; 0xa0
 80024ea:	05db      	lsls	r3, r3, #23
 80024ec:	0011      	movs	r1, r2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 fa7c 	bl	80029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024f4:	e044      	b.n	8002580 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_UART_MspInit+0x14c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d13f      	bne.n	8002580 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002500:	2118      	movs	r1, #24
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2204      	movs	r2, #4
 8002506:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250e:	187b      	adds	r3, r7, r1
 8002510:	0018      	movs	r0, r3
 8002512:	f001 fa59 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	1e03      	subs	r3, r0, #0
 8002518:	d001      	beq.n	800251e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800251a:	f7ff fee8 	bl	80022ee <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_UART_MspInit+0x148>)
 8002520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_UART_MspInit+0x148>)
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	02c9      	lsls	r1, r1, #11
 8002528:	430a      	orrs	r2, r1
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_UART_MspInit+0x148>)
 800252e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	02db      	lsls	r3, r3, #11
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_UART_MspInit+0x148>)
 800253c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_UART_MspInit+0x148>)
 8002540:	2102      	movs	r1, #2
 8002542:	430a      	orrs	r2, r1
 8002544:	635a      	str	r2, [r3, #52]	; 0x34
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_UART_MspInit+0x148>)
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002552:	2164      	movs	r1, #100	; 0x64
 8002554:	187b      	adds	r3, r7, r1
 8002556:	22c0      	movs	r2, #192	; 0xc0
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2202      	movs	r2, #2
 8002560:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800256e:	187b      	adds	r3, r7, r1
 8002570:	2204      	movs	r2, #4
 8002572:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	187b      	adds	r3, r7, r1
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002578:	0019      	movs	r1, r3
 800257a:	0010      	movs	r0, r2
 800257c:	f000 fa36 	bl	80029ec <HAL_GPIO_Init>
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b01f      	add	sp, #124	; 0x7c
 8002586:	bd90      	pop	{r4, r7, pc}
 8002588:	40004400 	.word	0x40004400
 800258c:	40021000 	.word	0x40021000
 8002590:	40004800 	.word	0x40004800
 8002594:	50000400 	.word	0x50000400

08002598 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <HAL_UART_MspDeInit+0x58>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10c      	bne.n	80025c4 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_UART_MspDeInit+0x5c>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_UART_MspDeInit+0x5c>)
 80025b0:	4911      	ldr	r1, [pc, #68]	; (80025f8 <HAL_UART_MspDeInit+0x60>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80025b6:	23a0      	movs	r3, #160	; 0xa0
 80025b8:	05db      	lsls	r3, r3, #23
 80025ba:	210c      	movs	r1, #12
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fb81 	bl	8002cc4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80025c2:	e011      	b.n	80025e8 <HAL_UART_MspDeInit+0x50>
  else if(huart->Instance==USART3)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_UART_MspDeInit+0x64>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10c      	bne.n	80025e8 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART3_CLK_DISABLE();
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_UART_MspDeInit+0x5c>)
 80025d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_UART_MspDeInit+0x5c>)
 80025d4:	490a      	ldr	r1, [pc, #40]	; (8002600 <HAL_UART_MspDeInit+0x68>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_UART_MspDeInit+0x6c>)
 80025e0:	0019      	movs	r1, r3
 80025e2:	0010      	movs	r0, r2
 80025e4:	f000 fb6e 	bl	8002cc4 <HAL_GPIO_DeInit>
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b002      	add	sp, #8
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40004400 	.word	0x40004400
 80025f4:	40021000 	.word	0x40021000
 80025f8:	fffdffff 	.word	0xfffdffff
 80025fc:	40004800 	.word	0x40004800
 8002600:	fffbffff 	.word	0xfffbffff
 8002604:	50000400 	.word	0x50000400

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800260c:	e7fe      	b.n	800260c <NMI_Handler+0x4>

0800260e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <HardFault_Handler+0x4>

08002614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262c:	f000 f8d4 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002640:	4a14      	ldr	r2, [pc, #80]	; (8002694 <_sbrk+0x5c>)
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <_sbrk+0x60>)
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <_sbrk+0x64>)
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <_sbrk+0x68>)
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	18d3      	adds	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	d207      	bcs.n	8002678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002668:	f003 fc2a 	bl	8005ec0 <__errno>
 800266c:	0003      	movs	r3, r0
 800266e:	220c      	movs	r2, #12
 8002670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002672:	2301      	movs	r3, #1
 8002674:	425b      	negs	r3, r3
 8002676:	e009      	b.n	800268c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	18d2      	adds	r2, r2, r3
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <_sbrk+0x64>)
 8002688:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b006      	add	sp, #24
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20024000 	.word	0x20024000
 8002698:	00000400 	.word	0x00000400
 800269c:	20000314 	.word	0x20000314
 80026a0:	20000468 	.word	0x20000468

080026a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026b0:	480d      	ldr	r0, [pc, #52]	; (80026e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026b4:	f7ff fff6 	bl	80026a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <LoopForever+0x6>)
  ldr r1, =_edata
 80026ba:	490d      	ldr	r1, [pc, #52]	; (80026f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <LoopForever+0xe>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d0:	4c0a      	ldr	r4, [pc, #40]	; (80026fc <LoopForever+0x16>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026de:	f003 fbf5 	bl	8005ecc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026e2:	f7ff fa75 	bl	8001bd0 <main>

080026e6 <LoopForever>:

LoopForever:
  b LoopForever
 80026e6:	e7fe      	b.n	80026e6 <LoopForever>
  ldr   r0, =_estack
 80026e8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80026f4:	080080f4 	.word	0x080080f4
  ldr r2, =_sbss
 80026f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80026fc:	20000464 	.word	0x20000464

08002700 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC1_COMP_IRQHandler>
	...

08002704 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_Init+0x3c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_Init+0x3c>)
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	0049      	lsls	r1, r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800271e:	2003      	movs	r0, #3
 8002720:	f000 f810 	bl	8002744 <HAL_InitTick>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d003      	beq.n	8002730 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e001      	b.n	8002734 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002730:	f7ff fe16 	bl	8002360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	781b      	ldrb	r3, [r3, #0]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40022000 	.word	0x40022000

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800274c:	230f      	movs	r3, #15
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_InitTick+0x88>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02b      	beq.n	80027b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_InitTick+0x8c>)
 800275e:	681c      	ldr	r4, [r3, #0]
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_InitTick+0x88>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	0019      	movs	r1, r3
 8002766:	23fa      	movs	r3, #250	; 0xfa
 8002768:	0098      	lsls	r0, r3, #2
 800276a:	f7fd fcdd 	bl	8000128 <__udivsi3>
 800276e:	0003      	movs	r3, r0
 8002770:	0019      	movs	r1, r3
 8002772:	0020      	movs	r0, r4
 8002774:	f7fd fcd8 	bl	8000128 <__udivsi3>
 8002778:	0003      	movs	r3, r0
 800277a:	0018      	movs	r0, r3
 800277c:	f000 f929 	bl	80029d2 <HAL_SYSTICK_Config>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d112      	bne.n	80027aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d80a      	bhi.n	80027a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	2301      	movs	r3, #1
 800278e:	425b      	negs	r3, r3
 8002790:	2200      	movs	r2, #0
 8002792:	0018      	movs	r0, r3
 8002794:	f000 f908 	bl	80029a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_InitTick+0x90>)
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e00d      	b.n	80027bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e008      	b.n	80027bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027aa:	230f      	movs	r3, #15
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e003      	b.n	80027bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027b4:	230f      	movs	r3, #15
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027bc:	230f      	movs	r3, #15
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b005      	add	sp, #20
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	20000008 	.word	0x20000008
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000004 	.word	0x20000004

080027d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_IncTick+0x1c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	001a      	movs	r2, r3
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_IncTick+0x20>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	18d2      	adds	r2, r2, r3
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_IncTick+0x20>)
 80027ea:	601a      	str	r2, [r3, #0]
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	20000008 	.word	0x20000008
 80027f8:	20000318 	.word	0x20000318

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <HAL_GetTick+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	20000318 	.word	0x20000318

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff fff0 	bl	80027fc <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	d005      	beq.n	8002836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Delay+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	001a      	movs	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	189b      	adds	r3, r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	f7ff ffe0 	bl	80027fc <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8f7      	bhi.n	8002838 <HAL_Delay+0x28>
  {
  }
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	20000008 	.word	0x20000008

08002858 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b002      	add	sp, #8
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	40010000 	.word	0x40010000
 8002880:	fffff9ff 	.word	0xfffff9ff

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	0002      	movs	r2, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b7f      	cmp	r3, #127	; 0x7f
 8002898:	d828      	bhi.n	80028ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800289a:	4a2f      	ldr	r2, [pc, #188]	; (8002958 <__NVIC_SetPriority+0xd4>)
 800289c:	1dfb      	adds	r3, r7, #7
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	33c0      	adds	r3, #192	; 0xc0
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	589b      	ldr	r3, [r3, r2]
 80028aa:	1dfa      	adds	r2, r7, #7
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	0011      	movs	r1, r2
 80028b0:	2203      	movs	r2, #3
 80028b2:	400a      	ands	r2, r1
 80028b4:	00d2      	lsls	r2, r2, #3
 80028b6:	21ff      	movs	r1, #255	; 0xff
 80028b8:	4091      	lsls	r1, r2
 80028ba:	000a      	movs	r2, r1
 80028bc:	43d2      	mvns	r2, r2
 80028be:	401a      	ands	r2, r3
 80028c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	22ff      	movs	r2, #255	; 0xff
 80028c8:	401a      	ands	r2, r3
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	0018      	movs	r0, r3
 80028d0:	2303      	movs	r3, #3
 80028d2:	4003      	ands	r3, r0
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d8:	481f      	ldr	r0, [pc, #124]	; (8002958 <__NVIC_SetPriority+0xd4>)
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	430a      	orrs	r2, r1
 80028e4:	33c0      	adds	r3, #192	; 0xc0
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028ea:	e031      	b.n	8002950 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <__NVIC_SetPriority+0xd8>)
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	0019      	movs	r1, r3
 80028f4:	230f      	movs	r3, #15
 80028f6:	400b      	ands	r3, r1
 80028f8:	3b08      	subs	r3, #8
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3306      	adds	r3, #6
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	3304      	adds	r3, #4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1dfa      	adds	r2, r7, #7
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	0011      	movs	r1, r2
 800290c:	2203      	movs	r2, #3
 800290e:	400a      	ands	r2, r1
 8002910:	00d2      	lsls	r2, r2, #3
 8002912:	21ff      	movs	r1, #255	; 0xff
 8002914:	4091      	lsls	r1, r2
 8002916:	000a      	movs	r2, r1
 8002918:	43d2      	mvns	r2, r2
 800291a:	401a      	ands	r2, r3
 800291c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	22ff      	movs	r2, #255	; 0xff
 8002924:	401a      	ands	r2, r3
 8002926:	1dfb      	adds	r3, r7, #7
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	2303      	movs	r3, #3
 800292e:	4003      	ands	r3, r0
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002934:	4809      	ldr	r0, [pc, #36]	; (800295c <__NVIC_SetPriority+0xd8>)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	001c      	movs	r4, r3
 800293c:	230f      	movs	r3, #15
 800293e:	4023      	ands	r3, r4
 8002940:	3b08      	subs	r3, #8
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	430a      	orrs	r2, r1
 8002946:	3306      	adds	r3, #6
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	18c3      	adds	r3, r0, r3
 800294c:	3304      	adds	r3, #4
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b003      	add	sp, #12
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	045b      	lsls	r3, r3, #17
 8002970:	429a      	cmp	r2, r3
 8002972:	d301      	bcc.n	8002978 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002974:	2301      	movs	r3, #1
 8002976:	e010      	b.n	800299a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <SysTick_Config+0x44>)
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	3a01      	subs	r2, #1
 800297e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002980:	2301      	movs	r3, #1
 8002982:	425b      	negs	r3, r3
 8002984:	2103      	movs	r1, #3
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff ff7c 	bl	8002884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <SysTick_Config+0x44>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <SysTick_Config+0x44>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	210f      	movs	r1, #15
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	1c02      	adds	r2, r0, #0
 80029b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7ff ff5d 	bl	8002884 <__NVIC_SetPriority>
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff ffbf 	bl	8002960 <SysTick_Config>
 80029e2:	0003      	movs	r3, r0
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fa:	e14d      	b.n	8002c98 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4091      	lsls	r1, r2
 8002a06:	000a      	movs	r2, r1
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d100      	bne.n	8002a14 <HAL_GPIO_Init+0x28>
 8002a12:	e13e      	b.n	8002c92 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d005      	beq.n	8002a2c <HAL_GPIO_Init+0x40>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2203      	movs	r2, #3
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d130      	bne.n	8002a8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	0013      	movs	r3, r2
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a62:	2201      	movs	r2, #1
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
 8002a68:	0013      	movs	r3, r2
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	2201      	movs	r2, #1
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	0013      	movs	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2203      	movs	r2, #3
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d017      	beq.n	8002aca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d123      	bne.n	8002b1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	58d3      	ldr	r3, [r2, r3]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	4013      	ands	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	43da      	mvns	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2107      	movs	r1, #7
 8002b02:	400b      	ands	r3, r1
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	08da      	lsrs	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3208      	adds	r2, #8
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	6939      	ldr	r1, [r7, #16]
 8002b1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	23c0      	movs	r3, #192	; 0xc0
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d100      	bne.n	8002b60 <HAL_GPIO_Init+0x174>
 8002b5e:	e098      	b.n	8002c92 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b60:	4a53      	ldr	r2, [pc, #332]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	3318      	adds	r3, #24
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	589b      	ldr	r3, [r3, r2]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2203      	movs	r2, #3
 8002b72:	4013      	ands	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	220f      	movs	r2, #15
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	0013      	movs	r3, r2
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	23a0      	movs	r3, #160	; 0xa0
 8002b88:	05db      	lsls	r3, r3, #23
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d019      	beq.n	8002bc2 <HAL_GPIO_Init+0x1d6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a48      	ldr	r2, [pc, #288]	; (8002cb4 <HAL_GPIO_Init+0x2c8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0x1d2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a47      	ldr	r2, [pc, #284]	; (8002cb8 <HAL_GPIO_Init+0x2cc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00d      	beq.n	8002bba <HAL_GPIO_Init+0x1ce>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a46      	ldr	r2, [pc, #280]	; (8002cbc <HAL_GPIO_Init+0x2d0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x1ca>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a45      	ldr	r2, [pc, #276]	; (8002cc0 <HAL_GPIO_Init+0x2d4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_GPIO_Init+0x1c6>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	e008      	b.n	8002bc4 <HAL_GPIO_Init+0x1d8>
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x1d8>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e004      	b.n	8002bc4 <HAL_GPIO_Init+0x1d8>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e002      	b.n	8002bc4 <HAL_GPIO_Init+0x1d8>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x1d8>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	400a      	ands	r2, r1
 8002bca:	00d2      	lsls	r2, r2, #3
 8002bcc:	4093      	lsls	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002bd4:	4936      	ldr	r1, [pc, #216]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3318      	adds	r3, #24
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	43da      	mvns	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	035b      	lsls	r3, r3, #13
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c0c:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	039b      	lsls	r3, r3, #14
 8002c24:	4013      	ands	r3, r2
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c36:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002c38:	2384      	movs	r3, #132	; 0x84
 8002c3a:	58d3      	ldr	r3, [r2, r3]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	4013      	ands	r3, r2
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c5c:	4914      	ldr	r1, [pc, #80]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002c5e:	2284      	movs	r2, #132	; 0x84
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002c64:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	58d3      	ldr	r3, [r2, r3]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	025b      	lsls	r3, r3, #9
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c8a:	4909      	ldr	r1, [pc, #36]	; (8002cb0 <HAL_GPIO_Init+0x2c4>)
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	40da      	lsrs	r2, r3
 8002ca0:	1e13      	subs	r3, r2, #0
 8002ca2:	d000      	beq.n	8002ca6 <HAL_GPIO_Init+0x2ba>
 8002ca4:	e6aa      	b.n	80029fc <HAL_GPIO_Init+0x10>
  }
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b006      	add	sp, #24
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021800 	.word	0x40021800
 8002cb4:	50000400 	.word	0x50000400
 8002cb8:	50000800 	.word	0x50000800
 8002cbc:	50000c00 	.word	0x50000c00
 8002cc0:	50001000 	.word	0x50001000

08002cc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002cd2:	e0ba      	b.n	8002e4a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d100      	bne.n	8002ce8 <HAL_GPIO_DeInit+0x24>
 8002ce6:	e0ad      	b.n	8002e44 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002ce8:	4a5d      	ldr	r2, [pc, #372]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3318      	adds	r3, #24
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	589b      	ldr	r3, [r3, r2]
 8002cf4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	220f      	movs	r2, #15
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	23a0      	movs	r3, #160	; 0xa0
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_DeInit+0x82>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a53      	ldr	r2, [pc, #332]	; (8002e64 <HAL_GPIO_DeInit+0x1a0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_DeInit+0x7e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <HAL_GPIO_DeInit+0x1a4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_DeInit+0x7a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a51      	ldr	r2, [pc, #324]	; (8002e6c <HAL_GPIO_DeInit+0x1a8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_DeInit+0x76>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a50      	ldr	r2, [pc, #320]	; (8002e70 <HAL_GPIO_DeInit+0x1ac>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_DeInit+0x72>
 8002d32:	2304      	movs	r3, #4
 8002d34:	e008      	b.n	8002d48 <HAL_GPIO_DeInit+0x84>
 8002d36:	2305      	movs	r3, #5
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_DeInit+0x84>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_DeInit+0x84>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_DeInit+0x84>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_DeInit+0x84>
 8002d46:	2300      	movs	r3, #0
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	00d2      	lsls	r2, r2, #3
 8002d50:	4093      	lsls	r3, r2
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d136      	bne.n	8002dc6 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d58:	4a41      	ldr	r2, [pc, #260]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	58d3      	ldr	r3, [r2, r3]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	43d2      	mvns	r2, r2
 8002d62:	493f      	ldr	r1, [pc, #252]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002d6c:	2384      	movs	r3, #132	; 0x84
 8002d6e:	58d3      	ldr	r3, [r2, r3]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	43d2      	mvns	r2, r2
 8002d74:	493a      	ldr	r1, [pc, #232]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	2284      	movs	r2, #132	; 0x84
 8002d7a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d7c:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002d86:	400a      	ands	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43d9      	mvns	r1, r3
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002d94:	400a      	ands	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	220f      	movs	r2, #15
 8002da2:	409a      	lsls	r2, r3
 8002da4:	0013      	movs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8002da8:	4a2d      	ldr	r2, [pc, #180]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3318      	adds	r3, #24
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	589a      	ldr	r2, [r3, r2]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	4829      	ldr	r0, [pc, #164]	; (8002e60 <HAL_GPIO_DeInit+0x19c>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2103      	movs	r1, #3
 8002dd0:	4099      	lsls	r1, r3
 8002dd2:	000b      	movs	r3, r1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	58d3      	ldr	r3, [r2, r3]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	2107      	movs	r1, #7
 8002dea:	400a      	ands	r2, r1
 8002dec:	0092      	lsls	r2, r2, #2
 8002dee:	210f      	movs	r1, #15
 8002df0:	4091      	lsls	r1, r2
 8002df2:	000a      	movs	r2, r1
 8002df4:	43d1      	mvns	r1, r2
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	08d2      	lsrs	r2, r2, #3
 8002dfa:	4019      	ands	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	0092      	lsls	r2, r2, #2
 8002e02:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	0052      	lsls	r2, r2, #1
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	4091      	lsls	r1, r2
 8002e10:	000a      	movs	r2, r1
 8002e12:	43d2      	mvns	r2, r2
 8002e14:	401a      	ands	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2101      	movs	r1, #1
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4091      	lsls	r1, r2
 8002e24:	000a      	movs	r2, r1
 8002e26:	43d2      	mvns	r2, r2
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	0052      	lsls	r2, r2, #1
 8002e36:	2103      	movs	r1, #3
 8002e38:	4091      	lsls	r1, r2
 8002e3a:	000a      	movs	r2, r1
 8002e3c:	43d2      	mvns	r2, r2
 8002e3e:	401a      	ands	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3301      	adds	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	40da      	lsrs	r2, r3
 8002e50:	1e13      	subs	r3, r2, #0
 8002e52:	d000      	beq.n	8002e56 <HAL_GPIO_DeInit+0x192>
 8002e54:	e73e      	b.n	8002cd4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b006      	add	sp, #24
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021800 	.word	0x40021800
 8002e64:	50000400 	.word	0x50000400
 8002e68:	50000800 	.word	0x50000800
 8002e6c:	50000c00 	.word	0x50000c00
 8002e70:	50001000 	.word	0x50001000

08002e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	000a      	movs	r2, r1
 8002e7e:	1cbb      	adds	r3, r7, #2
 8002e80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	1cba      	adds	r2, r7, #2
 8002e88:	8812      	ldrh	r2, [r2, #0]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d004      	beq.n	8002e98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002e8e:	230f      	movs	r3, #15
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e003      	b.n	8002ea0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ea0:	230f      	movs	r3, #15
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	781b      	ldrb	r3, [r3, #0]
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	0008      	movs	r0, r1
 8002eb8:	0011      	movs	r1, r2
 8002eba:	1cbb      	adds	r3, r7, #2
 8002ebc:	1c02      	adds	r2, r0, #0
 8002ebe:	801a      	strh	r2, [r3, #0]
 8002ec0:	1c7b      	adds	r3, r7, #1
 8002ec2:	1c0a      	adds	r2, r1, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec6:	1c7b      	adds	r3, r7, #1
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ece:	1cbb      	adds	r3, r7, #2
 8002ed0:	881a      	ldrh	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ed6:	e003      	b.n	8002ee0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ed8:	1cbb      	adds	r3, r7, #2
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d11f      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	0013      	movs	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	189b      	adds	r3, r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4912      	ldr	r1, [pc, #72]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fd f904 	bl	8000128 <__udivsi3>
 8002f20:	0003      	movs	r3, r0
 8002f22:	3301      	adds	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f26:	e008      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e001      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e009      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	401a      	ands	r2, r3
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d0ed      	beq.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	fffff9ff 	.word	0xfffff9ff
 8002f60:	20000000 	.word	0x20000000
 8002f64:	000f4240 	.word	0x000f4240

08002f68 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2207      	movs	r2, #7
 8002f72:	4393      	bics	r3, r2
 8002f74:	001a      	movs	r2, r3
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002f78:	2104      	movs	r1, #4
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8002f84:	2104      	movs	r1, #4
 8002f86:	430a      	orrs	r2, r1
 8002f88:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8002f8a:	bf30      	wfi
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	40007000 	.word	0x40007000
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	23e0      	movs	r3, #224	; 0xe0
 8002fa6:	01db      	lsls	r3, r3, #7
 8002fa8:	4013      	ands	r3, r2
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f000 fb50 	bl	8003668 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d100      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x20>
 8002fd2:	e07c      	b.n	80030ce <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd4:	4bc3      	ldr	r3, [pc, #780]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2238      	movs	r2, #56	; 0x38
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fde:	4bc1      	ldr	r3, [pc, #772]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d102      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x40>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d002      	beq.n	8002ffa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d10b      	bne.n	8003012 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffa:	4bba      	ldr	r3, [pc, #744]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	029b      	lsls	r3, r3, #10
 8003002:	4013      	ands	r3, r2
 8003004:	d062      	beq.n	80030cc <HAL_RCC_OscConfig+0x118>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d15e      	bne.n	80030cc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e32a      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	025b      	lsls	r3, r3, #9
 800301a:	429a      	cmp	r2, r3
 800301c:	d107      	bne.n	800302e <HAL_RCC_OscConfig+0x7a>
 800301e:	4bb1      	ldr	r3, [pc, #708]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4bb0      	ldr	r3, [pc, #704]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	0249      	lsls	r1, r1, #9
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e020      	b.n	8003070 <HAL_RCC_OscConfig+0xbc>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	23a0      	movs	r3, #160	; 0xa0
 8003034:	02db      	lsls	r3, r3, #11
 8003036:	429a      	cmp	r2, r3
 8003038:	d10e      	bne.n	8003058 <HAL_RCC_OscConfig+0xa4>
 800303a:	4baa      	ldr	r3, [pc, #680]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4ba9      	ldr	r3, [pc, #676]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	02c9      	lsls	r1, r1, #11
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	4ba6      	ldr	r3, [pc, #664]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4ba5      	ldr	r3, [pc, #660]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	0249      	lsls	r1, r1, #9
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xbc>
 8003058:	4ba2      	ldr	r3, [pc, #648]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4ba1      	ldr	r3, [pc, #644]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800305e:	49a2      	ldr	r1, [pc, #648]	; (80032e8 <HAL_RCC_OscConfig+0x334>)
 8003060:	400a      	ands	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	4b9f      	ldr	r3, [pc, #636]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b9e      	ldr	r3, [pc, #632]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800306a:	49a0      	ldr	r1, [pc, #640]	; (80032ec <HAL_RCC_OscConfig+0x338>)
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d014      	beq.n	80030a2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7ff fbc0 	bl	80027fc <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003082:	f7ff fbbb 	bl	80027fc <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	; 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e2e9      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003094:	4b93      	ldr	r3, [pc, #588]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	4013      	ands	r3, r2
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0xce>
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7ff fbab 	bl	80027fc <HAL_GetTick>
 80030a6:	0003      	movs	r3, r0
 80030a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7ff fba6 	bl	80027fc <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e2d4      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030be:	4b89      	ldr	r3, [pc, #548]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	029b      	lsls	r3, r3, #10
 80030c6:	4013      	ands	r3, r2
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0xf8>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d100      	bne.n	80030da <HAL_RCC_OscConfig+0x126>
 80030d8:	e099      	b.n	800320e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030da:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2238      	movs	r2, #56	; 0x38
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e4:	4b7f      	ldr	r3, [pc, #508]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2203      	movs	r2, #3
 80030ea:	4013      	ands	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d102      	bne.n	80030fa <HAL_RCC_OscConfig+0x146>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d002      	beq.n	8003100 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d135      	bne.n	800316c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003100:	4b78      	ldr	r3, [pc, #480]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4013      	ands	r3, r2
 800310a:	d005      	beq.n	8003118 <HAL_RCC_OscConfig+0x164>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e2a7      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b72      	ldr	r3, [pc, #456]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a74      	ldr	r2, [pc, #464]	; (80032f0 <HAL_RCC_OscConfig+0x33c>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	4b6e      	ldr	r3, [pc, #440]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d112      	bne.n	800315a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003134:	4b6b      	ldr	r3, [pc, #428]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a6e      	ldr	r2, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0x340>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	4b68      	ldr	r3, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003148:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0adb      	lsrs	r3, r3, #11
 800314e:	2207      	movs	r2, #7
 8003150:	4013      	ands	r3, r2
 8003152:	4a69      	ldr	r2, [pc, #420]	; (80032f8 <HAL_RCC_OscConfig+0x344>)
 8003154:	40da      	lsrs	r2, r3
 8003156:	4b69      	ldr	r3, [pc, #420]	; (80032fc <HAL_RCC_OscConfig+0x348>)
 8003158:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800315a:	4b69      	ldr	r3, [pc, #420]	; (8003300 <HAL_RCC_OscConfig+0x34c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0018      	movs	r0, r3
 8003160:	f7ff faf0 	bl	8002744 <HAL_InitTick>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d051      	beq.n	800320c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e27d      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d030      	beq.n	80031d6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003174:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <HAL_RCC_OscConfig+0x340>)
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	4b58      	ldr	r3, [pc, #352]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b55      	ldr	r3, [pc, #340]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	0049      	lsls	r1, r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7ff fb31 	bl	80027fc <HAL_GetTick>
 800319a:	0003      	movs	r3, r0
 800319c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a0:	f7ff fb2c 	bl	80027fc <HAL_GetTick>
 80031a4:	0002      	movs	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e25a      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b2:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4013      	ands	r3, r2
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <HAL_RCC_OscConfig+0x33c>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	021a      	lsls	r2, r3, #8
 80031ce:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	e01b      	b.n	800320e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80031dc:	4949      	ldr	r1, [pc, #292]	; (8003304 <HAL_RCC_OscConfig+0x350>)
 80031de:	400a      	ands	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7ff fb0b 	bl	80027fc <HAL_GetTick>
 80031e6:	0003      	movs	r3, r0
 80031e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ec:	f7ff fb06 	bl	80027fc <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e234      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031fe:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4013      	ands	r3, r2
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x238>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2208      	movs	r2, #8
 8003214:	4013      	ands	r3, r2
 8003216:	d047      	beq.n	80032a8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2238      	movs	r2, #56	; 0x38
 800321e:	4013      	ands	r3, r2
 8003220:	2b18      	cmp	r3, #24
 8003222:	d10a      	bne.n	800323a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003224:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003228:	2202      	movs	r2, #2
 800322a:	4013      	ands	r3, r2
 800322c:	d03c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x2f4>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d138      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e216      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003248:	2101      	movs	r1, #1
 800324a:	430a      	orrs	r2, r1
 800324c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7ff fad5 	bl	80027fc <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7ff fad0 	bl	80027fc <HAL_GetTick>
 800325c:	0002      	movs	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e1fe      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	2202      	movs	r2, #2
 8003270:	4013      	ands	r3, r2
 8003272:	d0f1      	beq.n	8003258 <HAL_RCC_OscConfig+0x2a4>
 8003274:	e018      	b.n	80032a8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 8003278:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 800327c:	2101      	movs	r1, #1
 800327e:	438a      	bics	r2, r1
 8003280:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7ff fabb 	bl	80027fc <HAL_GetTick>
 8003286:	0003      	movs	r3, r0
 8003288:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328c:	f7ff fab6 	bl	80027fc <HAL_GetTick>
 8003290:	0002      	movs	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1e4      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80032a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d1f1      	bne.n	800328c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2204      	movs	r2, #4
 80032ae:	4013      	ands	r3, r2
 80032b0:	d100      	bne.n	80032b4 <HAL_RCC_OscConfig+0x300>
 80032b2:	e0c7      	b.n	8003444 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b4:	231f      	movs	r3, #31
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2238      	movs	r2, #56	; 0x38
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d11f      	bne.n	8003308 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCC_OscConfig+0x330>)
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d100      	bne.n	80032d4 <HAL_RCC_OscConfig+0x320>
 80032d2:	e0b7      	b.n	8003444 <HAL_RCC_OscConfig+0x490>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d000      	beq.n	80032de <HAL_RCC_OscConfig+0x32a>
 80032dc:	e0b2      	b.n	8003444 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1c2      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40021000 	.word	0x40021000
 80032e8:	fffeffff 	.word	0xfffeffff
 80032ec:	fffbffff 	.word	0xfffbffff
 80032f0:	ffff80ff 	.word	0xffff80ff
 80032f4:	ffffc7ff 	.word	0xffffc7ff
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004
 8003304:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003308:	4bb5      	ldr	r3, [pc, #724]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800330a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	055b      	lsls	r3, r3, #21
 8003310:	4013      	ands	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_RCC_OscConfig+0x364>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x366>
 8003318:	2300      	movs	r3, #0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d011      	beq.n	8003342 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4bb0      	ldr	r3, [pc, #704]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003322:	4baf      	ldr	r3, [pc, #700]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	0549      	lsls	r1, r1, #21
 8003328:	430a      	orrs	r2, r1
 800332a:	63da      	str	r2, [r3, #60]	; 0x3c
 800332c:	4bac      	ldr	r3, [pc, #688]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800332e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	055b      	lsls	r3, r3, #21
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800333a:	231f      	movs	r3, #31
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003342:	4ba8      	ldr	r3, [pc, #672]	; (80035e4 <HAL_RCC_OscConfig+0x630>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4013      	ands	r3, r2
 800334c:	d11a      	bne.n	8003384 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334e:	4ba5      	ldr	r3, [pc, #660]	; (80035e4 <HAL_RCC_OscConfig+0x630>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4ba4      	ldr	r3, [pc, #656]	; (80035e4 <HAL_RCC_OscConfig+0x630>)
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	0049      	lsls	r1, r1, #1
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800335c:	f7ff fa4e 	bl	80027fc <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7ff fa49 	bl	80027fc <HAL_GetTick>
 800336a:	0002      	movs	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e177      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003378:	4b9a      	ldr	r3, [pc, #616]	; (80035e4 <HAL_RCC_OscConfig+0x630>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4013      	ands	r3, r2
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x3e6>
 800338c:	4b94      	ldr	r3, [pc, #592]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800338e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003390:	4b93      	ldr	r3, [pc, #588]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003392:	2101      	movs	r1, #1
 8003394:	430a      	orrs	r2, r1
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c
 8003398:	e01c      	b.n	80033d4 <HAL_RCC_OscConfig+0x420>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x408>
 80033a2:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033a6:	4b8e      	ldr	r3, [pc, #568]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033a8:	2104      	movs	r1, #4
 80033aa:	430a      	orrs	r2, r1
 80033ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ae:	4b8c      	ldr	r3, [pc, #560]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033b2:	4b8b      	ldr	r3, [pc, #556]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033b4:	2101      	movs	r1, #1
 80033b6:	430a      	orrs	r2, r1
 80033b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0x420>
 80033bc:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033c0:	4b87      	ldr	r3, [pc, #540]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	438a      	bics	r2, r1
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80033c8:	4b85      	ldr	r3, [pc, #532]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033cc:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033ce:	2104      	movs	r1, #4
 80033d0:	438a      	bics	r2, r1
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d014      	beq.n	8003406 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7ff fa0e 	bl	80027fc <HAL_GetTick>
 80033e0:	0003      	movs	r3, r0
 80033e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e4:	e009      	b.n	80033fa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7ff fa09 	bl	80027fc <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	4a7d      	ldr	r2, [pc, #500]	; (80035e8 <HAL_RCC_OscConfig+0x634>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e136      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fa:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2202      	movs	r2, #2
 8003400:	4013      	ands	r3, r2
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x432>
 8003404:	e013      	b.n	800342e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7ff f9f9 	bl	80027fc <HAL_GetTick>
 800340a:	0003      	movs	r3, r0
 800340c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800340e:	e009      	b.n	8003424 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7ff f9f4 	bl	80027fc <HAL_GetTick>
 8003414:	0002      	movs	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	4a73      	ldr	r2, [pc, #460]	; (80035e8 <HAL_RCC_OscConfig+0x634>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e121      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003424:	4b6e      	ldr	r3, [pc, #440]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2202      	movs	r2, #2
 800342a:	4013      	ands	r3, r2
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800342e:	231f      	movs	r3, #31
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b69      	ldr	r3, [pc, #420]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800343a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343c:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800343e:	496b      	ldr	r1, [pc, #428]	; (80035ec <HAL_RCC_OscConfig+0x638>)
 8003440:	400a      	ands	r2, r1
 8003442:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2220      	movs	r2, #32
 800344a:	4013      	ands	r3, r2
 800344c:	d039      	beq.n	80034c2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01b      	beq.n	800348e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003456:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4b61      	ldr	r3, [pc, #388]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	03c9      	lsls	r1, r1, #15
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7ff f9ca 	bl	80027fc <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800346e:	f7ff f9c5 	bl	80027fc <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0f3      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003480:	4b57      	ldr	r3, [pc, #348]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	4013      	ands	r3, r2
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x4ba>
 800348c:	e019      	b.n	80034c2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800348e:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003494:	4956      	ldr	r1, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x63c>)
 8003496:	400a      	ands	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7ff f9af 	bl	80027fc <HAL_GetTick>
 800349e:	0003      	movs	r3, r0
 80034a0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a4:	f7ff f9aa 	bl	80027fc <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0d8      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034b6:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	4013      	ands	r3, r2
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d100      	bne.n	80034cc <HAL_RCC_OscConfig+0x518>
 80034ca:	e0cc      	b.n	8003666 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034cc:	4b44      	ldr	r3, [pc, #272]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2238      	movs	r2, #56	; 0x38
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d100      	bne.n	80034da <HAL_RCC_OscConfig+0x526>
 80034d8:	e07b      	b.n	80035d2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d156      	bne.n	8003590 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80034e8:	4942      	ldr	r1, [pc, #264]	; (80035f4 <HAL_RCC_OscConfig+0x640>)
 80034ea:	400a      	ands	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7ff f985 	bl	80027fc <HAL_GetTick>
 80034f2:	0003      	movs	r3, r0
 80034f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7ff f980 	bl	80027fc <HAL_GetTick>
 80034fc:	0002      	movs	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0ae      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350a:	4b35      	ldr	r3, [pc, #212]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	049b      	lsls	r3, r3, #18
 8003512:	4013      	ands	r3, r2
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003516:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4a37      	ldr	r2, [pc, #220]	; (80035f8 <HAL_RCC_OscConfig+0x644>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	431a      	orrs	r2, r3
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003546:	430a      	orrs	r2, r1
 8003548:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0449      	lsls	r1, r1, #17
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	0549      	lsls	r1, r1, #21
 8003562:	430a      	orrs	r2, r1
 8003564:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7ff f949 	bl	80027fc <HAL_GetTick>
 800356a:	0003      	movs	r3, r0
 800356c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7ff f944 	bl	80027fc <HAL_GetTick>
 8003574:	0002      	movs	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e072      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	049b      	lsls	r3, r3, #18
 800358a:	4013      	ands	r3, r2
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x5bc>
 800358e:	e06a      	b.n	8003666 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 8003596:	4917      	ldr	r1, [pc, #92]	; (80035f4 <HAL_RCC_OscConfig+0x640>)
 8003598:	400a      	ands	r2, r1
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7ff f92e 	bl	80027fc <HAL_GetTick>
 80035a0:	0003      	movs	r3, r0
 80035a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a6:	f7ff f929 	bl	80027fc <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e057      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	049b      	lsls	r3, r3, #18
 80035c0:	4013      	ands	r3, r2
 80035c2:	d1f0      	bne.n	80035a6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_OscConfig+0x62c>)
 80035ca:	490c      	ldr	r1, [pc, #48]	; (80035fc <HAL_RCC_OscConfig+0x648>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]
 80035d0:	e049      	b.n	8003666 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d112      	bne.n	8003600 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e044      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40007000 	.word	0x40007000
 80035e8:	00001388 	.word	0x00001388
 80035ec:	efffffff 	.word	0xefffffff
 80035f0:	ffbfffff 	.word	0xffbfffff
 80035f4:	feffffff 	.word	0xfeffffff
 80035f8:	11c1808c 	.word	0x11c1808c
 80035fc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_RCC_OscConfig+0x6bc>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2203      	movs	r2, #3
 800360a:	401a      	ands	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	429a      	cmp	r2, r3
 8003612:	d126      	bne.n	8003662 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2270      	movs	r2, #112	; 0x70
 8003618:	401a      	ands	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d11f      	bne.n	8003662 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	23fe      	movs	r3, #254	; 0xfe
 8003626:	01db      	lsls	r3, r3, #7
 8003628:	401a      	ands	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d116      	bne.n	8003662 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	23f8      	movs	r3, #248	; 0xf8
 8003638:	039b      	lsls	r3, r3, #14
 800363a:	401a      	ands	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d10e      	bne.n	8003662 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	23e0      	movs	r3, #224	; 0xe0
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	401a      	ands	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	0f5b      	lsrs	r3, r3, #29
 8003658:	075a      	lsls	r2, r3, #29
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b008      	add	sp, #32
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000

08003674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0e9      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b76      	ldr	r3, [pc, #472]	; (8003864 <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2207      	movs	r2, #7
 800368e:	4013      	ands	r3, r2
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d91e      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b73      	ldr	r3, [pc, #460]	; (8003864 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2207      	movs	r2, #7
 800369c:	4393      	bics	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	4b70      	ldr	r3, [pc, #448]	; (8003864 <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036a8:	f7ff f8a8 	bl	80027fc <HAL_GetTick>
 80036ac:	0003      	movs	r3, r0
 80036ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036b0:	e009      	b.n	80036c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b2:	f7ff f8a3 	bl	80027fc <HAL_GetTick>
 80036b6:	0002      	movs	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	4a6a      	ldr	r2, [pc, #424]	; (8003868 <HAL_RCC_ClockConfig+0x1f4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0ca      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036c6:	4b67      	ldr	r3, [pc, #412]	; (8003864 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2207      	movs	r2, #7
 80036cc:	4013      	ands	r3, r2
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2202      	movs	r2, #2
 80036da:	4013      	ands	r3, r2
 80036dc:	d015      	beq.n	800370a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2204      	movs	r2, #4
 80036e4:	4013      	ands	r3, r2
 80036e6:	d006      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80036e8:	4b60      	ldr	r3, [pc, #384]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	4b5f      	ldr	r3, [pc, #380]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 80036ee:	21e0      	movs	r1, #224	; 0xe0
 80036f0:	01c9      	lsls	r1, r1, #7
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4a5d      	ldr	r2, [pc, #372]	; (8003870 <HAL_RCC_ClockConfig+0x1fc>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	0019      	movs	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2201      	movs	r2, #1
 8003710:	4013      	ands	r3, r2
 8003712:	d057      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800371c:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	029b      	lsls	r3, r3, #10
 8003724:	4013      	ands	r3, r2
 8003726:	d12b      	bne.n	8003780 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e097      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d107      	bne.n	8003744 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003734:	4b4d      	ldr	r3, [pc, #308]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	049b      	lsls	r3, r3, #18
 800373c:	4013      	ands	r3, r2
 800373e:	d11f      	bne.n	8003780 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e08b      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374c:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4013      	ands	r3, r2
 8003756:	d113      	bne.n	8003780 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e07f      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d106      	bne.n	8003772 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003764:	4b41      	ldr	r3, [pc, #260]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 8003766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003768:	2202      	movs	r2, #2
 800376a:	4013      	ands	r3, r2
 800376c:	d108      	bne.n	8003780 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e074      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003772:	4b3e      	ldr	r3, [pc, #248]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	2202      	movs	r2, #2
 8003778:	4013      	ands	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e06d      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003780:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2207      	movs	r2, #7
 8003786:	4393      	bics	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003794:	f7ff f832 	bl	80027fc <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379c:	e009      	b.n	80037b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379e:	f7ff f82d 	bl	80027fc <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <HAL_RCC_ClockConfig+0x1f4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e054      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2238      	movs	r2, #56	; 0x38
 80037b8:	401a      	ands	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1ec      	bne.n	800379e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_ClockConfig+0x1f0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2207      	movs	r2, #7
 80037ca:	4013      	ands	r3, r2
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d21e      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCC_ClockConfig+0x1f0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2207      	movs	r2, #7
 80037d8:	4393      	bics	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037e4:	f7ff f80a 	bl	80027fc <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037ec:	e009      	b.n	8003802 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ee:	f7ff f805 	bl	80027fc <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_RCC_ClockConfig+0x1f4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e02c      	b.n	800385c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003802:	4b18      	ldr	r3, [pc, #96]	; (8003864 <HAL_RCC_ClockConfig+0x1f0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2207      	movs	r2, #7
 8003808:	4013      	ands	r3, r2
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d1ee      	bne.n	80037ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2204      	movs	r2, #4
 8003816:	4013      	ands	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <HAL_RCC_ClockConfig+0x200>)
 8003820:	4013      	ands	r3, r2
 8003822:	0019      	movs	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800382e:	f000 f829 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8003832:	0001      	movs	r1, r0
 8003834:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_ClockConfig+0x1f8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	220f      	movs	r2, #15
 800383c:	401a      	ands	r2, r3
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_RCC_ClockConfig+0x204>)
 8003840:	0092      	lsls	r2, r2, #2
 8003842:	58d3      	ldr	r3, [r2, r3]
 8003844:	221f      	movs	r2, #31
 8003846:	4013      	ands	r3, r2
 8003848:	000a      	movs	r2, r1
 800384a:	40da      	lsrs	r2, r3
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_ClockConfig+0x208>)
 800384e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_ClockConfig+0x20c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0018      	movs	r0, r3
 8003856:	f7fe ff75 	bl	8002744 <HAL_InitTick>
 800385a:	0003      	movs	r3, r0
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b004      	add	sp, #16
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40022000 	.word	0x40022000
 8003868:	00001388 	.word	0x00001388
 800386c:	40021000 	.word	0x40021000
 8003870:	fffff0ff 	.word	0xfffff0ff
 8003874:	ffff8fff 	.word	0xffff8fff
 8003878:	08008028 	.word	0x08008028
 800387c:	20000000 	.word	0x20000000
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800388a:	4b3c      	ldr	r3, [pc, #240]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2238      	movs	r2, #56	; 0x38
 8003890:	4013      	ands	r3, r2
 8003892:	d10f      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003894:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0adb      	lsrs	r3, r3, #11
 800389a:	2207      	movs	r2, #7
 800389c:	4013      	ands	r3, r2
 800389e:	2201      	movs	r2, #1
 80038a0:	409a      	lsls	r2, r3
 80038a2:	0013      	movs	r3, r2
 80038a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	4835      	ldr	r0, [pc, #212]	; (8003980 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038aa:	f7fc fc3d 	bl	8000128 <__udivsi3>
 80038ae:	0003      	movs	r3, r0
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e05d      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2238      	movs	r2, #56	; 0x38
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d102      	bne.n	80038c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c0:	4b30      	ldr	r3, [pc, #192]	; (8003984 <HAL_RCC_GetSysClockFreq+0x100>)
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	e054      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c6:	4b2d      	ldr	r3, [pc, #180]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2238      	movs	r2, #56	; 0x38
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d138      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038d2:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2203      	movs	r2, #3
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	2207      	movs	r2, #7
 80038e4:	4013      	ands	r3, r2
 80038e6:	3301      	adds	r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d10d      	bne.n	800390c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4824      	ldr	r0, [pc, #144]	; (8003984 <HAL_RCC_GetSysClockFreq+0x100>)
 80038f4:	f7fc fc18 	bl	8000128 <__udivsi3>
 80038f8:	0003      	movs	r3, r0
 80038fa:	0019      	movs	r1, r3
 80038fc:	4b1f      	ldr	r3, [pc, #124]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	227f      	movs	r2, #127	; 0x7f
 8003904:	4013      	ands	r3, r2
 8003906:	434b      	muls	r3, r1
 8003908:	617b      	str	r3, [r7, #20]
        break;
 800390a:	e00d      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	481c      	ldr	r0, [pc, #112]	; (8003980 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003910:	f7fc fc0a 	bl	8000128 <__udivsi3>
 8003914:	0003      	movs	r3, r0
 8003916:	0019      	movs	r1, r3
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	227f      	movs	r2, #127	; 0x7f
 8003920:	4013      	ands	r3, r2
 8003922:	434b      	muls	r3, r1
 8003924:	617b      	str	r3, [r7, #20]
        break;
 8003926:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	0f5b      	lsrs	r3, r3, #29
 800392e:	2207      	movs	r2, #7
 8003930:	4013      	ands	r3, r2
 8003932:	3301      	adds	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f7fc fbf5 	bl	8000128 <__udivsi3>
 800393e:	0003      	movs	r3, r0
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	e015      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2238      	movs	r2, #56	; 0x38
 800394a:	4013      	ands	r3, r2
 800394c:	2b20      	cmp	r3, #32
 800394e:	d103      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_RCC_GetSysClockFreq+0xf8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2238      	movs	r2, #56	; 0x38
 800395e:	4013      	ands	r3, r2
 8003960:	2b18      	cmp	r3, #24
 8003962:	d103      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003964:	23fa      	movs	r3, #250	; 0xfa
 8003966:	01db      	lsls	r3, r3, #7
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	e001      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003970:	693b      	ldr	r3, [r7, #16]
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b006      	add	sp, #24
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	40021000 	.word	0x40021000
 8003980:	00f42400 	.word	0x00f42400
 8003984:	007a1200 	.word	0x007a1200

08003988 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b02      	ldr	r3, [pc, #8]	; (8003998 <HAL_RCC_GetHCLKFreq+0x10>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	20000000 	.word	0x20000000

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039a0:	f7ff fff2 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a4:	0004      	movs	r4, r0
 80039a6:	f7ff faf9 	bl	8002f9c <LL_RCC_GetAPB1Prescaler>
 80039aa:	0003      	movs	r3, r0
 80039ac:	0b1a      	lsrs	r2, r3, #12
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039b0:	0092      	lsls	r2, r2, #2
 80039b2:	58d3      	ldr	r3, [r2, r3]
 80039b4:	221f      	movs	r2, #31
 80039b6:	4013      	ands	r3, r2
 80039b8:	40dc      	lsrs	r4, r3
 80039ba:	0023      	movs	r3, r4
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	bdb0      	pop	{r4, r5, r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	08008068 	.word	0x08008068

080039c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039d0:	2313      	movs	r3, #19
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039d8:	2312      	movs	r3, #18
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	029b      	lsls	r3, r3, #10
 80039e8:	4013      	ands	r3, r2
 80039ea:	d100      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80039ec:	e0ad      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	2011      	movs	r0, #17
 80039f0:	183b      	adds	r3, r7, r0
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	055b      	lsls	r3, r3, #21
 80039fe:	4013      	ands	r3, r2
 8003a00:	d110      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b44      	ldr	r3, [pc, #272]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	0549      	lsls	r1, r1, #21
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a10:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	055b      	lsls	r3, r3, #21
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a24:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	0049      	lsls	r1, r1, #1
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a32:	f7fe fee3 	bl	80027fc <HAL_GetTick>
 8003a36:	0003      	movs	r3, r0
 8003a38:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fe fede 	bl	80027fc <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d904      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a4a:	2313      	movs	r3, #19
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	2203      	movs	r2, #3
 8003a50:	701a      	strb	r2, [r3, #0]
        break;
 8003a52:	e005      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a54:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d0ed      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a60:	2313      	movs	r3, #19
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d15e      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a6a:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a6e:	23c0      	movs	r3, #192	; 0xc0
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4013      	ands	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d019      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d014      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a86:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a90:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a94:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a96:	2180      	movs	r1, #128	; 0x80
 8003a98:	0249      	lsls	r1, r1, #9
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aa4:	491e      	ldr	r1, [pc, #120]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d016      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fea0 	bl	80027fc <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac0:	e00c      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fe fe9b 	bl	80027fc <HAL_GetTick>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d904      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003ad2:	2313      	movs	r3, #19
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	701a      	strb	r2, [r3, #0]
            break;
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d0ed      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003ae6:	2313      	movs	r3, #19
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b00:	430a      	orrs	r2, r1
 8003b02:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b04:	e016      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b06:	2312      	movs	r3, #18
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2213      	movs	r2, #19
 8003b0c:	18ba      	adds	r2, r7, r2
 8003b0e:	7812      	ldrb	r2, [r2, #0]
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e00f      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	fffffcff 	.word	0xfffffcff
 8003b20:	fffeffff 	.word	0xfffeffff
 8003b24:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	2312      	movs	r3, #18
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	2213      	movs	r2, #19
 8003b2e:	18ba      	adds	r2, r7, r2
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b34:	2311      	movs	r3, #17
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4bb6      	ldr	r3, [pc, #728]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b42:	4bb5      	ldr	r3, [pc, #724]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b44:	49b5      	ldr	r1, [pc, #724]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	d009      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b54:	4bb0      	ldr	r3, [pc, #704]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	4bad      	ldr	r3, [pc, #692]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b72:	4ba9      	ldr	r3, [pc, #676]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	220c      	movs	r2, #12
 8003b78:	4393      	bics	r3, r2
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	4ba5      	ldr	r3, [pc, #660]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b82:	430a      	orrs	r2, r1
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b90:	4ba1      	ldr	r3, [pc, #644]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	2230      	movs	r2, #48	; 0x30
 8003b96:	4393      	bics	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b9e      	ldr	r3, [pc, #632]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	4013      	ands	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bae:	4b9a      	ldr	r3, [pc, #616]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	4a9b      	ldr	r2, [pc, #620]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	4b96      	ldr	r3, [pc, #600]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	015b      	lsls	r3, r3, #5
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003bce:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	4a94      	ldr	r2, [pc, #592]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	4b8e      	ldr	r3, [pc, #568]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4013      	ands	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bee:	4b8a      	ldr	r3, [pc, #552]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	4a8d      	ldr	r2, [pc, #564]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bfc:	4b86      	ldr	r3, [pc, #536]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c0e:	4b82      	ldr	r3, [pc, #520]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	4a86      	ldr	r2, [pc, #536]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4b7e      	ldr	r3, [pc, #504]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2220      	movs	r2, #32
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2c:	4b7a      	ldr	r3, [pc, #488]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	4a7f      	ldr	r2, [pc, #508]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	4b77      	ldr	r3, [pc, #476]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2240      	movs	r2, #64	; 0x40
 8003c46:	4013      	ands	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4a:	4b73      	ldr	r3, [pc, #460]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	4a79      	ldr	r2, [pc, #484]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	01db      	lsls	r3, r3, #7
 8003c66:	4013      	ands	r3, r2
 8003c68:	d015      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c6a:	4b6b      	ldr	r3, [pc, #428]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	0899      	lsrs	r1, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c76:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	05db      	lsls	r3, r3, #23
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d106      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c88:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	4b62      	ldr	r3, [pc, #392]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	0249      	lsls	r1, r1, #9
 8003c92:	430a      	orrs	r2, r1
 8003c94:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	031b      	lsls	r3, r3, #12
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ca2:	4b5d      	ldr	r3, [pc, #372]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	4393      	bics	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb0:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	039b      	lsls	r3, r3, #14
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d016      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cc2:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	4a5c      	ldr	r2, [pc, #368]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	0019      	movs	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd0:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	03db      	lsls	r3, r3, #15
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ce2:	4b4d      	ldr	r3, [pc, #308]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	4b4c      	ldr	r3, [pc, #304]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	0449      	lsls	r1, r1, #17
 8003cec:	430a      	orrs	r2, r1
 8003cee:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	03db      	lsls	r3, r3, #15
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d016      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cfc:	4b46      	ldr	r3, [pc, #280]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	0019      	movs	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0a:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	045b      	lsls	r3, r3, #17
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	0449      	lsls	r1, r1, #17
 8003d26:	430a      	orrs	r2, r1
 8003d28:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	4013      	ands	r3, r2
 8003d34:	d014      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1a      	ldr	r2, [r3, #32]
 8003d44:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d46:	430a      	orrs	r2, r1
 8003d48:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d106      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d52:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0249      	lsls	r1, r1, #9
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	019b      	lsls	r3, r3, #6
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d014      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d6c:	4b2a      	ldr	r3, [pc, #168]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	220c      	movs	r2, #12
 8003d72:	4393      	bics	r3, r2
 8003d74:	0019      	movs	r1, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d7a:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d106      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d88:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	0249      	lsls	r1, r1, #9
 8003d92:	430a      	orrs	r2, r1
 8003d94:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	045b      	lsls	r3, r3, #17
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	019b      	lsls	r3, r3, #6
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d106      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0449      	lsls	r1, r1, #17
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	049b      	lsls	r3, r3, #18
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d016      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	4a10      	ldr	r2, [pc, #64]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dec:	430a      	orrs	r2, r1
 8003dee:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	0449      	lsls	r1, r1, #17
 8003e06:	430a      	orrs	r2, r1
 8003e08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e0a:	2312      	movs	r3, #18
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	781b      	ldrb	r3, [r3, #0]
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b006      	add	sp, #24
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	efffffff 	.word	0xefffffff
 8003e20:	fffff3ff 	.word	0xfffff3ff
 8003e24:	fffffcff 	.word	0xfffffcff
 8003e28:	fff3ffff 	.word	0xfff3ffff
 8003e2c:	ffcfffff 	.word	0xffcfffff
 8003e30:	ffffcfff 	.word	0xffffcfff
 8003e34:	ffff3fff 	.word	0xffff3fff
 8003e38:	ffbfffff 	.word	0xffbfffff
 8003e3c:	feffffff 	.word	0xfeffffff

08003e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0a8      	b.n	8003fa4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	2382      	movs	r3, #130	; 0x82
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d009      	beq.n	8003e7a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	61da      	str	r2, [r3, #28]
 8003e6c:	e005      	b.n	8003e7a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	225d      	movs	r2, #93	; 0x5d
 8003e84:	5c9b      	ldrb	r3, [r3, r2]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	225c      	movs	r2, #92	; 0x5c
 8003e90:	2100      	movs	r1, #0
 8003e92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	0018      	movs	r0, r3
 8003e98:	f7fe fa8a 	bl	80023b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	225d      	movs	r2, #93	; 0x5d
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2140      	movs	r1, #64	; 0x40
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	23e0      	movs	r3, #224	; 0xe0
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d902      	bls.n	8003ec6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e002      	b.n	8003ecc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	015b      	lsls	r3, r3, #5
 8003eca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	23f0      	movs	r3, #240	; 0xf0
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d008      	beq.n	8003eea <HAL_SPI_Init+0xaa>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	23e0      	movs	r3, #224	; 0xe0
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	2382      	movs	r3, #130	; 0x82
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6899      	ldr	r1, [r3, #8]
 8003ef8:	2384      	movs	r3, #132	; 0x84
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	400b      	ands	r3, r1
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2102      	movs	r1, #2
 8003f06:	400b      	ands	r3, r1
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	400b      	ands	r3, r1
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6999      	ldr	r1, [r3, #24]
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	400b      	ands	r3, r1
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	2138      	movs	r1, #56	; 0x38
 8003f26:	400b      	ands	r3, r1
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	2180      	movs	r1, #128	; 0x80
 8003f30:	400b      	ands	r3, r1
 8003f32:	431a      	orrs	r2, r3
 8003f34:	0011      	movs	r1, r2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	019b      	lsls	r3, r3, #6
 8003f3e:	401a      	ands	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	2204      	movs	r2, #4
 8003f50:	401a      	ands	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	2110      	movs	r1, #16
 8003f58:	400b      	ands	r3, r1
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	2108      	movs	r1, #8
 8003f62:	400b      	ands	r3, r1
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68d9      	ldr	r1, [r3, #12]
 8003f6a:	23f0      	movs	r3, #240	; 0xf0
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	400b      	ands	r3, r1
 8003f70:	431a      	orrs	r2, r3
 8003f72:	0011      	movs	r1, r2
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	015b      	lsls	r3, r3, #5
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4907      	ldr	r1, [pc, #28]	; (8003fac <HAL_SPI_Init+0x16c>)
 8003f90:	400a      	ands	r2, r1
 8003f92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	225d      	movs	r2, #93	; 0x5d
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b004      	add	sp, #16
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	fffff7ff 	.word	0xfffff7ff

08003fb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	1dbb      	adds	r3, r7, #6
 8003fbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fc0:	231f      	movs	r3, #31
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	225c      	movs	r2, #92	; 0x5c
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_SPI_Transmit+0x26>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e147      	b.n	8004266 <HAL_SPI_Transmit+0x2b6>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	225c      	movs	r2, #92	; 0x5c
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fde:	f7fe fc0d 	bl	80027fc <HAL_GetTick>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003fe6:	2316      	movs	r3, #22
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	1dba      	adds	r2, r7, #6
 8003fec:	8812      	ldrh	r2, [r2, #0]
 8003fee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	225d      	movs	r2, #93	; 0x5d
 8003ff4:	5c9b      	ldrb	r3, [r3, r2]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d004      	beq.n	8004006 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003ffc:	231f      	movs	r3, #31
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]
    goto error;
 8004004:	e128      	b.n	8004258 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_SPI_Transmit+0x64>
 800400c:	1dbb      	adds	r3, r7, #6
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004014:	231f      	movs	r3, #31
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
    goto error;
 800401c:	e11c      	b.n	8004258 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	225d      	movs	r2, #93	; 0x5d
 8004022:	2103      	movs	r1, #3
 8004024:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1dba      	adds	r2, r7, #6
 8004036:	8812      	ldrh	r2, [r2, #0]
 8004038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1dba      	adds	r2, r7, #6
 800403e:	8812      	ldrh	r2, [r2, #0]
 8004040:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2244      	movs	r2, #68	; 0x44
 800404c:	2100      	movs	r1, #0
 800404e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2246      	movs	r2, #70	; 0x46
 8004054:	2100      	movs	r1, #0
 8004056:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	429a      	cmp	r2, r3
 800406e:	d110      	bne.n	8004092 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2140      	movs	r1, #64	; 0x40
 800407c:	438a      	bics	r2, r1
 800407e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	01c9      	lsls	r1, r1, #7
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2240      	movs	r2, #64	; 0x40
 800409a:	4013      	ands	r3, r2
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d007      	beq.n	80040b0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2140      	movs	r1, #64	; 0x40
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	23e0      	movs	r3, #224	; 0xe0
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d952      	bls.n	8004162 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_SPI_Transmit+0x11e>
 80040c4:	2316      	movs	r3, #22
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d143      	bne.n	8004156 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	881a      	ldrh	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	1c9a      	adds	r2, r3, #2
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040f2:	e030      	b.n	8004156 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2202      	movs	r2, #2
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d112      	bne.n	8004128 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	881a      	ldrh	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	1c9a      	adds	r2, r3, #2
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004126:	e016      	b.n	8004156 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004128:	f7fe fb68 	bl	80027fc <HAL_GetTick>
 800412c:	0002      	movs	r2, r0
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d802      	bhi.n	800413e <HAL_SPI_Transmit+0x18e>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	d102      	bne.n	8004144 <HAL_SPI_Transmit+0x194>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d108      	bne.n	8004156 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004144:	231f      	movs	r3, #31
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2203      	movs	r2, #3
 800414a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	225d      	movs	r2, #93	; 0x5d
 8004150:	2101      	movs	r1, #1
 8004152:	5499      	strb	r1, [r3, r2]
          goto error;
 8004154:	e080      	b.n	8004258 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1c9      	bne.n	80040f4 <HAL_SPI_Transmit+0x144>
 8004160:	e053      	b.n	800420a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_SPI_Transmit+0x1c4>
 800416a:	2316      	movs	r3, #22
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d145      	bne.n	8004200 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	7812      	ldrb	r2, [r2, #0]
 8004180:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800419a:	e031      	b.n	8004200 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2202      	movs	r2, #2
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d113      	bne.n	80041d2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041d0:	e016      	b.n	8004200 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d2:	f7fe fb13 	bl	80027fc <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d802      	bhi.n	80041e8 <HAL_SPI_Transmit+0x238>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	d102      	bne.n	80041ee <HAL_SPI_Transmit+0x23e>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d108      	bne.n	8004200 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80041ee:	231f      	movs	r3, #31
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	2203      	movs	r2, #3
 80041f4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	225d      	movs	r2, #93	; 0x5d
 80041fa:	2101      	movs	r1, #1
 80041fc:	5499      	strb	r1, [r3, r2]
          goto error;
 80041fe:	e02b      	b.n	8004258 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1c8      	bne.n	800419c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	0018      	movs	r0, r3
 8004212:	f000 fcef 	bl	8004bf4 <SPI_EndRxTxTransaction>
 8004216:	1e03      	subs	r3, r0, #0
 8004218:	d002      	beq.n	8004220 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004246:	231f      	movs	r3, #31
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e003      	b.n	8004258 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	225d      	movs	r2, #93	; 0x5d
 8004254:	2101      	movs	r1, #1
 8004256:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	225c      	movs	r2, #92	; 0x5c
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004260:	231f      	movs	r3, #31
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	781b      	ldrb	r3, [r3, #0]
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b008      	add	sp, #32
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	1dbb      	adds	r3, r7, #6
 800427e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004280:	2117      	movs	r1, #23
 8004282:	187b      	adds	r3, r7, r1
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	225d      	movs	r2, #93	; 0x5d
 800428c:	5c9b      	ldrb	r3, [r3, r2]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d003      	beq.n	800429c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8004294:	187b      	adds	r3, r7, r1
 8004296:	2202      	movs	r2, #2
 8004298:	701a      	strb	r2, [r3, #0]
    goto error;
 800429a:	e12b      	b.n	80044f4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2382      	movs	r3, #130	; 0x82
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d113      	bne.n	80042d0 <HAL_SPI_Receive+0x60>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10f      	bne.n	80042d0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	225d      	movs	r2, #93	; 0x5d
 80042b4:	2104      	movs	r1, #4
 80042b6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042b8:	1dbb      	adds	r3, r7, #6
 80042ba:	881c      	ldrh	r4, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	0023      	movs	r3, r4
 80042c8:	f000 f924 	bl	8004514 <HAL_SPI_TransmitReceive>
 80042cc:	0003      	movs	r3, r0
 80042ce:	e118      	b.n	8004502 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	225c      	movs	r2, #92	; 0x5c
 80042d4:	5c9b      	ldrb	r3, [r3, r2]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_SPI_Receive+0x6e>
 80042da:	2302      	movs	r3, #2
 80042dc:	e111      	b.n	8004502 <HAL_SPI_Receive+0x292>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	225c      	movs	r2, #92	; 0x5c
 80042e2:	2101      	movs	r1, #1
 80042e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e6:	f7fe fa89 	bl	80027fc <HAL_GetTick>
 80042ea:	0003      	movs	r3, r0
 80042ec:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_SPI_Receive+0x8c>
 80042f4:	1dbb      	adds	r3, r7, #6
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80042fc:	2317      	movs	r3, #23
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
    goto error;
 8004304:	e0f6      	b.n	80044f4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	225d      	movs	r2, #93	; 0x5d
 800430a:	2104      	movs	r1, #4
 800430c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1dba      	adds	r2, r7, #6
 800431e:	2144      	movs	r1, #68	; 0x44
 8004320:	8812      	ldrh	r2, [r2, #0]
 8004322:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1dba      	adds	r2, r7, #6
 8004328:	2146      	movs	r1, #70	; 0x46
 800432a:	8812      	ldrh	r2, [r2, #0]
 800432c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	23e0      	movs	r3, #224	; 0xe0
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	429a      	cmp	r2, r3
 8004356:	d908      	bls.n	800436a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	496a      	ldr	r1, [pc, #424]	; (800450c <HAL_SPI_Receive+0x29c>)
 8004364:	400a      	ands	r2, r1
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	e008      	b.n	800437c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	0149      	lsls	r1, r1, #5
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	429a      	cmp	r2, r3
 8004386:	d10f      	bne.n	80043a8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2140      	movs	r1, #64	; 0x40
 8004394:	438a      	bics	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	495b      	ldr	r1, [pc, #364]	; (8004510 <HAL_SPI_Receive+0x2a0>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2240      	movs	r2, #64	; 0x40
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d007      	beq.n	80043c6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2140      	movs	r1, #64	; 0x40
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	23e0      	movs	r3, #224	; 0xe0
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d900      	bls.n	80043d4 <HAL_SPI_Receive+0x164>
 80043d2:	e071      	b.n	80044b8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043d4:	e035      	b.n	8004442 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2201      	movs	r2, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d117      	bne.n	8004414 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	001a      	movs	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2246      	movs	r2, #70	; 0x46
 8004404:	5a9b      	ldrh	r3, [r3, r2]
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b299      	uxth	r1, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2246      	movs	r2, #70	; 0x46
 8004410:	5299      	strh	r1, [r3, r2]
 8004412:	e016      	b.n	8004442 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004414:	f7fe f9f2 	bl	80027fc <HAL_GetTick>
 8004418:	0002      	movs	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d802      	bhi.n	800442a <HAL_SPI_Receive+0x1ba>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	d102      	bne.n	8004430 <HAL_SPI_Receive+0x1c0>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d108      	bne.n	8004442 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8004430:	2317      	movs	r3, #23
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	2203      	movs	r2, #3
 8004436:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	225d      	movs	r2, #93	; 0x5d
 800443c:	2101      	movs	r1, #1
 800443e:	5499      	strb	r1, [r3, r2]
          goto error;
 8004440:	e058      	b.n	80044f4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2246      	movs	r2, #70	; 0x46
 8004446:	5a9b      	ldrh	r3, [r3, r2]
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1c3      	bne.n	80043d6 <HAL_SPI_Receive+0x166>
 800444e:	e039      	b.n	80044c4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2201      	movs	r2, #1
 8004458:	4013      	ands	r3, r2
 800445a:	2b01      	cmp	r3, #1
 800445c:	d115      	bne.n	800448a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	b292      	uxth	r2, r2
 800446a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	1c9a      	adds	r2, r3, #2
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2246      	movs	r2, #70	; 0x46
 800447a:	5a9b      	ldrh	r3, [r3, r2]
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b299      	uxth	r1, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2246      	movs	r2, #70	; 0x46
 8004486:	5299      	strh	r1, [r3, r2]
 8004488:	e016      	b.n	80044b8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448a:	f7fe f9b7 	bl	80027fc <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d802      	bhi.n	80044a0 <HAL_SPI_Receive+0x230>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_Receive+0x236>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80044a6:	2317      	movs	r3, #23
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2203      	movs	r2, #3
 80044ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	225d      	movs	r2, #93	; 0x5d
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80044b6:	e01d      	b.n	80044f4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2246      	movs	r2, #70	; 0x46
 80044bc:	5a9b      	ldrh	r3, [r3, r2]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1c5      	bne.n	8004450 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	6839      	ldr	r1, [r7, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fb34 	bl	8004b38 <SPI_EndRxTransaction>
 80044d0:	1e03      	subs	r3, r0, #0
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80044e2:	2317      	movs	r3, #23
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e003      	b.n	80044f4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	225d      	movs	r2, #93	; 0x5d
 80044f0:	2101      	movs	r1, #1
 80044f2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	225c      	movs	r2, #92	; 0x5c
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80044fc:	2317      	movs	r3, #23
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	781b      	ldrb	r3, [r3, #0]
}
 8004502:	0018      	movs	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	b007      	add	sp, #28
 8004508:	bd90      	pop	{r4, r7, pc}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	ffffefff 	.word	0xffffefff
 8004510:	ffffbfff 	.word	0xffffbfff

08004514 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	001a      	movs	r2, r3
 8004522:	1cbb      	adds	r3, r7, #2
 8004524:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004526:	2301      	movs	r3, #1
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800452a:	2323      	movs	r3, #35	; 0x23
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	225c      	movs	r2, #92	; 0x5c
 8004536:	5c9b      	ldrb	r3, [r3, r2]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x2c>
 800453c:	2302      	movs	r3, #2
 800453e:	e1c4      	b.n	80048ca <HAL_SPI_TransmitReceive+0x3b6>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	225c      	movs	r2, #92	; 0x5c
 8004544:	2101      	movs	r1, #1
 8004546:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004548:	f7fe f958 	bl	80027fc <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004550:	201b      	movs	r0, #27
 8004552:	183b      	adds	r3, r7, r0
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	215d      	movs	r1, #93	; 0x5d
 8004558:	5c52      	ldrb	r2, [r2, r1]
 800455a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004562:	2312      	movs	r3, #18
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	1cba      	adds	r2, r7, #2
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800456c:	183b      	adds	r3, r7, r0
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d011      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x84>
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	2382      	movs	r3, #130	; 0x82
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	429a      	cmp	r2, r3
 800457c:	d107      	bne.n	800458e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <HAL_SPI_TransmitReceive+0x7a>
 8004586:	183b      	adds	r3, r7, r0
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b04      	cmp	r3, #4
 800458c:	d004      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800458e:	2323      	movs	r3, #35	; 0x23
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2202      	movs	r2, #2
 8004594:	701a      	strb	r2, [r3, #0]
    goto error;
 8004596:	e191      	b.n	80048bc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x98>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x98>
 80045a4:	1cbb      	adds	r3, r7, #2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80045ac:	2323      	movs	r3, #35	; 0x23
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80045b4:	e182      	b.n	80048bc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	225d      	movs	r2, #93	; 0x5d
 80045ba:	5c9b      	ldrb	r3, [r3, r2]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d003      	beq.n	80045ca <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	225d      	movs	r2, #93	; 0x5d
 80045c6:	2105      	movs	r1, #5
 80045c8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1cba      	adds	r2, r7, #2
 80045da:	2146      	movs	r1, #70	; 0x46
 80045dc:	8812      	ldrh	r2, [r2, #0]
 80045de:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1cba      	adds	r2, r7, #2
 80045e4:	2144      	movs	r1, #68	; 0x44
 80045e6:	8812      	ldrh	r2, [r2, #0]
 80045e8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1cba      	adds	r2, r7, #2
 80045f4:	8812      	ldrh	r2, [r2, #0]
 80045f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1cba      	adds	r2, r7, #2
 80045fc:	8812      	ldrh	r2, [r2, #0]
 80045fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	23e0      	movs	r3, #224	; 0xe0
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	429a      	cmp	r2, r3
 8004616:	d908      	bls.n	800462a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	49ac      	ldr	r1, [pc, #688]	; (80048d4 <HAL_SPI_TransmitReceive+0x3c0>)
 8004624:	400a      	ands	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	e008      	b.n	800463c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	0149      	lsls	r1, r1, #5
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	4013      	ands	r3, r2
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d007      	beq.n	800465a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2140      	movs	r1, #64	; 0x40
 8004656:	430a      	orrs	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	23e0      	movs	r3, #224	; 0xe0
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	429a      	cmp	r2, r3
 8004664:	d800      	bhi.n	8004668 <HAL_SPI_TransmitReceive+0x154>
 8004666:	e083      	b.n	8004770 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_SPI_TransmitReceive+0x168>
 8004670:	2312      	movs	r3, #18
 8004672:	18fb      	adds	r3, r7, r3
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d000      	beq.n	800467c <HAL_SPI_TransmitReceive+0x168>
 800467a:	e06d      	b.n	8004758 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	881a      	ldrh	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	1c9a      	adds	r2, r3, #2
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a0:	e05a      	b.n	8004758 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2202      	movs	r2, #2
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d11b      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x1d4>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x1d4>
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d113      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	1c9a      	adds	r2, r3, #2
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2201      	movs	r2, #1
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d11c      	bne.n	8004730 <HAL_SPI_TransmitReceive+0x21c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2246      	movs	r2, #70	; 0x46
 80046fa:	5a9b      	ldrh	r3, [r3, r2]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d016      	beq.n	8004730 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	b292      	uxth	r2, r2
 800470e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2246      	movs	r2, #70	; 0x46
 800471e:	5a9b      	ldrh	r3, [r3, r2]
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b299      	uxth	r1, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2246      	movs	r2, #70	; 0x46
 800472a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800472c:	2301      	movs	r3, #1
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004730:	f7fe f864 	bl	80027fc <HAL_GetTick>
 8004734:	0002      	movs	r2, r0
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473c:	429a      	cmp	r2, r3
 800473e:	d80b      	bhi.n	8004758 <HAL_SPI_TransmitReceive+0x244>
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	3301      	adds	r3, #1
 8004744:	d008      	beq.n	8004758 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8004746:	2323      	movs	r3, #35	; 0x23
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2203      	movs	r2, #3
 800474c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	225d      	movs	r2, #93	; 0x5d
 8004752:	2101      	movs	r1, #1
 8004754:	5499      	strb	r1, [r3, r2]
        goto error;
 8004756:	e0b1      	b.n	80048bc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d19f      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x18e>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2246      	movs	r2, #70	; 0x46
 8004766:	5a9b      	ldrh	r3, [r3, r2]
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d199      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x18e>
 800476e:	e089      	b.n	8004884 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x270>
 8004778:	2312      	movs	r3, #18
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d000      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x270>
 8004782:	e074      	b.n	800486e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047aa:	e060      	b.n	800486e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2202      	movs	r2, #2
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d11c      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x2e0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d017      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0x2e0>
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d114      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	7812      	ldrb	r2, [r2, #0]
 80047d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2201      	movs	r2, #1
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d11e      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x32c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2246      	movs	r2, #70	; 0x46
 8004806:	5a9b      	ldrh	r3, [r3, r2]
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d018      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	330c      	adds	r3, #12
 8004814:	001a      	movs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	7812      	ldrb	r2, [r2, #0]
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2246      	movs	r2, #70	; 0x46
 800482e:	5a9b      	ldrh	r3, [r3, r2]
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b299      	uxth	r1, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2246      	movs	r2, #70	; 0x46
 800483a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800483c:	2301      	movs	r3, #1
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004840:	f7fd ffdc 	bl	80027fc <HAL_GetTick>
 8004844:	0002      	movs	r2, r0
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484c:	429a      	cmp	r2, r3
 800484e:	d802      	bhi.n	8004856 <HAL_SPI_TransmitReceive+0x342>
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	3301      	adds	r3, #1
 8004854:	d102      	bne.n	800485c <HAL_SPI_TransmitReceive+0x348>
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d108      	bne.n	800486e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800485c:	2323      	movs	r3, #35	; 0x23
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	2203      	movs	r2, #3
 8004862:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	225d      	movs	r2, #93	; 0x5d
 8004868:	2101      	movs	r1, #1
 800486a:	5499      	strb	r1, [r3, r2]
        goto error;
 800486c:	e026      	b.n	80048bc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d199      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x298>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2246      	movs	r2, #70	; 0x46
 800487c:	5a9b      	ldrh	r3, [r3, r2]
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d193      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	0018      	movs	r0, r3
 800488c:	f000 f9b2 	bl	8004bf4 <SPI_EndRxTxTransaction>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d006      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8004894:	2323      	movs	r3, #35	; 0x23
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2201      	movs	r2, #1
 800489a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80048aa:	2323      	movs	r3, #35	; 0x23
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	2201      	movs	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e003      	b.n	80048bc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	225d      	movs	r2, #93	; 0x5d
 80048b8:	2101      	movs	r1, #1
 80048ba:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	225c      	movs	r2, #92	; 0x5c
 80048c0:	2100      	movs	r1, #0
 80048c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80048c4:	2323      	movs	r3, #35	; 0x23
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	781b      	ldrb	r3, [r3, #0]
}
 80048ca:	0018      	movs	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b00a      	add	sp, #40	; 0x28
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	ffffefff 	.word	0xffffefff

080048d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	1dfb      	adds	r3, r7, #7
 80048e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048e8:	f7fd ff88 	bl	80027fc <HAL_GetTick>
 80048ec:	0002      	movs	r2, r0
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	18d3      	adds	r3, r2, r3
 80048f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048f8:	f7fd ff80 	bl	80027fc <HAL_GetTick>
 80048fc:	0003      	movs	r3, r0
 80048fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004900:	4b3a      	ldr	r3, [pc, #232]	; (80049ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	015b      	lsls	r3, r3, #5
 8004906:	0d1b      	lsrs	r3, r3, #20
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	4353      	muls	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490e:	e058      	b.n	80049c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	d055      	beq.n	80049c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004916:	f7fd ff71 	bl	80027fc <HAL_GetTick>
 800491a:	0002      	movs	r2, r0
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	429a      	cmp	r2, r3
 8004924:	d902      	bls.n	800492c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d142      	bne.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	21e0      	movs	r1, #224	; 0xe0
 8004938:	438a      	bics	r2, r1
 800493a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	2382      	movs	r3, #130	; 0x82
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	429a      	cmp	r2, r3
 8004946:	d113      	bne.n	8004970 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	429a      	cmp	r2, r3
 8004952:	d005      	beq.n	8004960 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	429a      	cmp	r2, r3
 800495e:	d107      	bne.n	8004970 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2140      	movs	r1, #64	; 0x40
 800496c:	438a      	bics	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	019b      	lsls	r3, r3, #6
 8004978:	429a      	cmp	r2, r3
 800497a:	d110      	bne.n	800499e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	491a      	ldr	r1, [pc, #104]	; (80049f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004988:	400a      	ands	r2, r1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2180      	movs	r1, #128	; 0x80
 8004998:	0189      	lsls	r1, r1, #6
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	225d      	movs	r2, #93	; 0x5d
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	225c      	movs	r2, #92	; 0x5c
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e017      	b.n	80049e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3b01      	subs	r3, #1
 80049c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4013      	ands	r3, r2
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	425a      	negs	r2, r3
 80049d2:	4153      	adcs	r3, r2
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	001a      	movs	r2, r3
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d197      	bne.n	8004910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b008      	add	sp, #32
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	20000000 	.word	0x20000000
 80049f0:	ffffdfff 	.word	0xffffdfff

080049f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a02:	2317      	movs	r3, #23
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a0a:	f7fd fef7 	bl	80027fc <HAL_GetTick>
 8004a0e:	0002      	movs	r2, r0
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	18d3      	adds	r3, r2, r3
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a1a:	f7fd feef 	bl	80027fc <HAL_GetTick>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a2a:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	0013      	movs	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	00da      	lsls	r2, r3, #3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	0d1b      	lsrs	r3, r3, #20
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	4353      	muls	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a40:	e068      	b.n	8004b14 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	23c0      	movs	r3, #192	; 0xc0
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d10a      	bne.n	8004a62 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d107      	bne.n	8004a62 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	2117      	movs	r1, #23
 8004a5a:	187b      	adds	r3, r7, r1
 8004a5c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a5e:	187b      	adds	r3, r7, r1
 8004a60:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	d055      	beq.n	8004b14 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a68:	f7fd fec8 	bl	80027fc <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d902      	bls.n	8004a7e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d142      	bne.n	8004b04 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	21e0      	movs	r1, #224	; 0xe0
 8004a8a:	438a      	bics	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	2382      	movs	r3, #130	; 0x82
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d113      	bne.n	8004ac2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d005      	beq.n	8004ab2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d107      	bne.n	8004ac2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2140      	movs	r1, #64	; 0x40
 8004abe:	438a      	bics	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d110      	bne.n	8004af0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4916      	ldr	r1, [pc, #88]	; (8004b34 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	0189      	lsls	r1, r1, #6
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	225d      	movs	r2, #93	; 0x5d
 8004af4:	2101      	movs	r1, #1
 8004af6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	225c      	movs	r2, #92	; 0x5c
 8004afc:	2100      	movs	r1, #0
 8004afe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e010      	b.n	8004b26 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d18e      	bne.n	8004a42 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b00a      	add	sp, #40	; 0x28
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	20000000 	.word	0x20000000
 8004b34:	ffffdfff 	.word	0xffffdfff

08004b38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	2382      	movs	r3, #130	; 0x82
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d113      	bne.n	8004b78 <SPI_EndRxTransaction+0x40>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d005      	beq.n	8004b68 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d107      	bne.n	8004b78 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2140      	movs	r1, #64	; 0x40
 8004b74:	438a      	bics	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	0013      	movs	r3, r2
 8004b82:	2200      	movs	r2, #0
 8004b84:	2180      	movs	r1, #128	; 0x80
 8004b86:	f7ff fea7 	bl	80048d8 <SPI_WaitFlagStateUntilTimeout>
 8004b8a:	1e03      	subs	r3, r0, #0
 8004b8c:	d007      	beq.n	8004b9e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b92:	2220      	movs	r2, #32
 8004b94:	431a      	orrs	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e026      	b.n	8004bec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	2382      	movs	r3, #130	; 0x82
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d11f      	bne.n	8004bea <SPI_EndRxTransaction+0xb2>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d005      	beq.n	8004bc2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d113      	bne.n	8004bea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	23c0      	movs	r3, #192	; 0xc0
 8004bc6:	00d9      	lsls	r1, r3, #3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	0013      	movs	r3, r2
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f7ff ff0f 	bl	80049f4 <SPI_WaitFifoStateUntilTimeout>
 8004bd6:	1e03      	subs	r3, r0, #0
 8004bd8:	d007      	beq.n	8004bea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bde:	2220      	movs	r2, #32
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e000      	b.n	8004bec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b004      	add	sp, #16
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	23c0      	movs	r3, #192	; 0xc0
 8004c04:	0159      	lsls	r1, r3, #5
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	0013      	movs	r3, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f7ff fef0 	bl	80049f4 <SPI_WaitFifoStateUntilTimeout>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d007      	beq.n	8004c28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e027      	b.n	8004c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	0013      	movs	r3, r2
 8004c32:	2200      	movs	r2, #0
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	f7ff fe4f 	bl	80048d8 <SPI_WaitFlagStateUntilTimeout>
 8004c3a:	1e03      	subs	r3, r0, #0
 8004c3c:	d007      	beq.n	8004c4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c42:	2220      	movs	r2, #32
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e014      	b.n	8004c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	23c0      	movs	r3, #192	; 0xc0
 8004c52:	00d9      	lsls	r1, r3, #3
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	0013      	movs	r3, r2
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f7ff fec9 	bl	80049f4 <SPI_WaitFifoStateUntilTimeout>
 8004c62:	1e03      	subs	r3, r0, #0
 8004c64:	d007      	beq.n	8004c76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e000      	b.n	8004c78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	0018      	movs	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b004      	add	sp, #16
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e046      	b.n	8004d20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2288      	movs	r2, #136	; 0x88
 8004c96:	589b      	ldr	r3, [r3, r2]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d107      	bne.n	8004cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2284      	movs	r2, #132	; 0x84
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7fd fbcc 	bl	8002444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2288      	movs	r2, #136	; 0x88
 8004cb0:	2124      	movs	r1, #36	; 0x24
 8004cb2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 fd4c 	bl	800576c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 f9f2 	bl	80050c0 <UART_SetConfig>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e01c      	b.n	8004d20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	490d      	ldr	r1, [pc, #52]	; (8004d28 <HAL_UART_Init+0xa8>)
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	212a      	movs	r1, #42	; 0x2a
 8004d02:	438a      	bics	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2101      	movs	r1, #1
 8004d12:	430a      	orrs	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 fddb 	bl	80058d4 <UART_CheckIdleState>
 8004d1e:	0003      	movs	r3, r0
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	ffffb7ff 	.word	0xffffb7ff

08004d2c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e032      	b.n	8004da4 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2288      	movs	r2, #136	; 0x88
 8004d42:	2124      	movs	r1, #36	; 0x24
 8004d44:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2101      	movs	r1, #1
 8004d52:	438a      	bics	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fd fc11 	bl	8002598 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2290      	movs	r2, #144	; 0x90
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2288      	movs	r2, #136	; 0x88
 8004d82:	2100      	movs	r1, #0
 8004d84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	228c      	movs	r2, #140	; 0x8c
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2284      	movs	r2, #132	; 0x84
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	0018      	movs	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	1dbb      	adds	r3, r7, #6
 8004dba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2288      	movs	r2, #136	; 0x88
 8004dc0:	589b      	ldr	r3, [r3, r2]
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d000      	beq.n	8004dc8 <HAL_UART_Transmit+0x1c>
 8004dc6:	e090      	b.n	8004eea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_UART_Transmit+0x2a>
 8004dce:	1dbb      	adds	r3, r7, #6
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e088      	b.n	8004eec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	015b      	lsls	r3, r3, #5
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d109      	bne.n	8004dfa <HAL_UART_Transmit+0x4e>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4013      	ands	r3, r2
 8004df4:	d001      	beq.n	8004dfa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e078      	b.n	8004eec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2290      	movs	r2, #144	; 0x90
 8004dfe:	2100      	movs	r1, #0
 8004e00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2288      	movs	r2, #136	; 0x88
 8004e06:	2121      	movs	r1, #33	; 0x21
 8004e08:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e0a:	f7fd fcf7 	bl	80027fc <HAL_GetTick>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1dba      	adds	r2, r7, #6
 8004e16:	2154      	movs	r1, #84	; 0x54
 8004e18:	8812      	ldrh	r2, [r2, #0]
 8004e1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1dba      	adds	r2, r7, #6
 8004e20:	2156      	movs	r1, #86	; 0x56
 8004e22:	8812      	ldrh	r2, [r2, #0]
 8004e24:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	015b      	lsls	r3, r3, #5
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d108      	bne.n	8004e44 <HAL_UART_Transmit+0x98>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	e003      	b.n	8004e4c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e4c:	e030      	b.n	8004eb0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	0013      	movs	r3, r2
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2180      	movs	r1, #128	; 0x80
 8004e5c:	f000 fde4 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8004e60:	1e03      	subs	r3, r0, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2288      	movs	r2, #136	; 0x88
 8004e68:	2120      	movs	r1, #32
 8004e6a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e03d      	b.n	8004eec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	05d2      	lsls	r2, r2, #23
 8004e82:	0dd2      	lsrs	r2, r2, #23
 8004e84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	3302      	adds	r3, #2
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e007      	b.n	8004e9e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2256      	movs	r2, #86	; 0x56
 8004ea2:	5a9b      	ldrh	r3, [r3, r2]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b299      	uxth	r1, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2256      	movs	r2, #86	; 0x56
 8004eae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2256      	movs	r2, #86	; 0x56
 8004eb4:	5a9b      	ldrh	r3, [r3, r2]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1c8      	bne.n	8004e4e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	0013      	movs	r3, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	f000 fdad 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8004ece:	1e03      	subs	r3, r0, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2288      	movs	r2, #136	; 0x88
 8004ed6:	2120      	movs	r1, #32
 8004ed8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e006      	b.n	8004eec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2288      	movs	r2, #136	; 0x88
 8004ee2:	2120      	movs	r1, #32
 8004ee4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	0018      	movs	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b008      	add	sp, #32
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	1dbb      	adds	r3, r7, #6
 8004f02:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	228c      	movs	r2, #140	; 0x8c
 8004f08:	589b      	ldr	r3, [r3, r2]
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d000      	beq.n	8004f10 <HAL_UART_Receive+0x1c>
 8004f0e:	e0d0      	b.n	80050b2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_UART_Receive+0x2a>
 8004f16:	1dbb      	adds	r3, r7, #6
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0c8      	b.n	80050b4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	015b      	lsls	r3, r3, #5
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d109      	bne.n	8004f42 <HAL_UART_Receive+0x4e>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d105      	bne.n	8004f42 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d001      	beq.n	8004f42 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0b8      	b.n	80050b4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2290      	movs	r2, #144	; 0x90
 8004f46:	2100      	movs	r1, #0
 8004f48:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	228c      	movs	r2, #140	; 0x8c
 8004f4e:	2122      	movs	r1, #34	; 0x22
 8004f50:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f58:	f7fd fc50 	bl	80027fc <HAL_GetTick>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1dba      	adds	r2, r7, #6
 8004f64:	215c      	movs	r1, #92	; 0x5c
 8004f66:	8812      	ldrh	r2, [r2, #0]
 8004f68:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1dba      	adds	r2, r7, #6
 8004f6e:	215e      	movs	r1, #94	; 0x5e
 8004f70:	8812      	ldrh	r2, [r2, #0]
 8004f72:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	015b      	lsls	r3, r3, #5
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d10d      	bne.n	8004f9c <HAL_UART_Receive+0xa8>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <HAL_UART_Receive+0x9e>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2260      	movs	r2, #96	; 0x60
 8004f8c:	494b      	ldr	r1, [pc, #300]	; (80050bc <HAL_UART_Receive+0x1c8>)
 8004f8e:	5299      	strh	r1, [r3, r2]
 8004f90:	e02e      	b.n	8004ff0 <HAL_UART_Receive+0xfc>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2260      	movs	r2, #96	; 0x60
 8004f96:	21ff      	movs	r1, #255	; 0xff
 8004f98:	5299      	strh	r1, [r3, r2]
 8004f9a:	e029      	b.n	8004ff0 <HAL_UART_Receive+0xfc>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10d      	bne.n	8004fc0 <HAL_UART_Receive+0xcc>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_UART_Receive+0xc2>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2260      	movs	r2, #96	; 0x60
 8004fb0:	21ff      	movs	r1, #255	; 0xff
 8004fb2:	5299      	strh	r1, [r3, r2]
 8004fb4:	e01c      	b.n	8004ff0 <HAL_UART_Receive+0xfc>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2260      	movs	r2, #96	; 0x60
 8004fba:	217f      	movs	r1, #127	; 0x7f
 8004fbc:	5299      	strh	r1, [r3, r2]
 8004fbe:	e017      	b.n	8004ff0 <HAL_UART_Receive+0xfc>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	055b      	lsls	r3, r3, #21
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d10d      	bne.n	8004fe8 <HAL_UART_Receive+0xf4>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <HAL_UART_Receive+0xea>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2260      	movs	r2, #96	; 0x60
 8004fd8:	217f      	movs	r1, #127	; 0x7f
 8004fda:	5299      	strh	r1, [r3, r2]
 8004fdc:	e008      	b.n	8004ff0 <HAL_UART_Receive+0xfc>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2260      	movs	r2, #96	; 0x60
 8004fe2:	213f      	movs	r1, #63	; 0x3f
 8004fe4:	5299      	strh	r1, [r3, r2]
 8004fe6:	e003      	b.n	8004ff0 <HAL_UART_Receive+0xfc>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2260      	movs	r2, #96	; 0x60
 8004fec:	2100      	movs	r1, #0
 8004fee:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004ff0:	2312      	movs	r3, #18
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	2160      	movs	r1, #96	; 0x60
 8004ff8:	5a52      	ldrh	r2, [r2, r1]
 8004ffa:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	015b      	lsls	r3, r3, #5
 8005004:	429a      	cmp	r2, r3
 8005006:	d108      	bne.n	800501a <HAL_UART_Receive+0x126>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005010:	2300      	movs	r3, #0
 8005012:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e003      	b.n	8005022 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005022:	e03a      	b.n	800509a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	0013      	movs	r3, r2
 800502e:	2200      	movs	r2, #0
 8005030:	2120      	movs	r1, #32
 8005032:	f000 fcf9 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8005036:	1e03      	subs	r3, r0, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	228c      	movs	r2, #140	; 0x8c
 800503e:	2120      	movs	r1, #32
 8005040:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e036      	b.n	80050b4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10e      	bne.n	800506a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	b29b      	uxth	r3, r3
 8005054:	2212      	movs	r2, #18
 8005056:	18ba      	adds	r2, r7, r2
 8005058:	8812      	ldrh	r2, [r2, #0]
 800505a:	4013      	ands	r3, r2
 800505c:	b29a      	uxth	r2, r3
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3302      	adds	r3, #2
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e00e      	b.n	8005088 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2212      	movs	r2, #18
 8005074:	18ba      	adds	r2, r7, r2
 8005076:	8812      	ldrh	r2, [r2, #0]
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	4013      	ands	r3, r2
 800507c:	b2da      	uxtb	r2, r3
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	225e      	movs	r2, #94	; 0x5e
 800508c:	5a9b      	ldrh	r3, [r3, r2]
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b299      	uxth	r1, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	225e      	movs	r2, #94	; 0x5e
 8005098:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	225e      	movs	r2, #94	; 0x5e
 800509e:	5a9b      	ldrh	r3, [r3, r2]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1be      	bne.n	8005024 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	228c      	movs	r2, #140	; 0x8c
 80050aa:	2120      	movs	r1, #32
 80050ac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e000      	b.n	80050b4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80050b2:	2302      	movs	r3, #2
  }
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b008      	add	sp, #32
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	000001ff 	.word	0x000001ff

080050c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b5b0      	push	{r4, r5, r7, lr}
 80050c2:	b090      	sub	sp, #64	; 0x40
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050c8:	231a      	movs	r3, #26
 80050ca:	2220      	movs	r2, #32
 80050cc:	189b      	adds	r3, r3, r2
 80050ce:	19db      	adds	r3, r3, r7
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	431a      	orrs	r2, r3
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4ac1      	ldr	r2, [pc, #772]	; (80053f8 <UART_SetConfig+0x338>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fe:	430b      	orrs	r3, r1
 8005100:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4abc      	ldr	r2, [pc, #752]	; (80053fc <UART_SetConfig+0x33c>)
 800510a:	4013      	ands	r3, r2
 800510c:	0018      	movs	r0, r3
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	0003      	movs	r3, r0
 8005118:	430b      	orrs	r3, r1
 800511a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4ab6      	ldr	r2, [pc, #728]	; (8005400 <UART_SetConfig+0x340>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d009      	beq.n	8005140 <UART_SetConfig+0x80>
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4ab4      	ldr	r2, [pc, #720]	; (8005404 <UART_SetConfig+0x344>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800513c:	4313      	orrs	r3, r2
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4ab0      	ldr	r2, [pc, #704]	; (8005408 <UART_SetConfig+0x348>)
 8005148:	4013      	ands	r3, r2
 800514a:	0019      	movs	r1, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	430b      	orrs	r3, r1
 8005154:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	220f      	movs	r2, #15
 800515e:	4393      	bics	r3, r2
 8005160:	0018      	movs	r0, r3
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	0003      	movs	r3, r0
 800516c:	430b      	orrs	r3, r1
 800516e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4aa5      	ldr	r2, [pc, #660]	; (800540c <UART_SetConfig+0x34c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d131      	bne.n	80051de <UART_SetConfig+0x11e>
 800517a:	4ba5      	ldr	r3, [pc, #660]	; (8005410 <UART_SetConfig+0x350>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	2203      	movs	r2, #3
 8005180:	4013      	ands	r3, r2
 8005182:	2b03      	cmp	r3, #3
 8005184:	d01d      	beq.n	80051c2 <UART_SetConfig+0x102>
 8005186:	d823      	bhi.n	80051d0 <UART_SetConfig+0x110>
 8005188:	2b02      	cmp	r3, #2
 800518a:	d00c      	beq.n	80051a6 <UART_SetConfig+0xe6>
 800518c:	d820      	bhi.n	80051d0 <UART_SetConfig+0x110>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <UART_SetConfig+0xd8>
 8005192:	2b01      	cmp	r3, #1
 8005194:	d00e      	beq.n	80051b4 <UART_SetConfig+0xf4>
 8005196:	e01b      	b.n	80051d0 <UART_SetConfig+0x110>
 8005198:	231b      	movs	r3, #27
 800519a:	2220      	movs	r2, #32
 800519c:	189b      	adds	r3, r3, r2
 800519e:	19db      	adds	r3, r3, r7
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e154      	b.n	8005450 <UART_SetConfig+0x390>
 80051a6:	231b      	movs	r3, #27
 80051a8:	2220      	movs	r2, #32
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	19db      	adds	r3, r3, r7
 80051ae:	2202      	movs	r2, #2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e14d      	b.n	8005450 <UART_SetConfig+0x390>
 80051b4:	231b      	movs	r3, #27
 80051b6:	2220      	movs	r2, #32
 80051b8:	189b      	adds	r3, r3, r2
 80051ba:	19db      	adds	r3, r3, r7
 80051bc:	2204      	movs	r2, #4
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e146      	b.n	8005450 <UART_SetConfig+0x390>
 80051c2:	231b      	movs	r3, #27
 80051c4:	2220      	movs	r2, #32
 80051c6:	189b      	adds	r3, r3, r2
 80051c8:	19db      	adds	r3, r3, r7
 80051ca:	2208      	movs	r2, #8
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e13f      	b.n	8005450 <UART_SetConfig+0x390>
 80051d0:	231b      	movs	r3, #27
 80051d2:	2220      	movs	r2, #32
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	19db      	adds	r3, r3, r7
 80051d8:	2210      	movs	r2, #16
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e138      	b.n	8005450 <UART_SetConfig+0x390>
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a8c      	ldr	r2, [pc, #560]	; (8005414 <UART_SetConfig+0x354>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d131      	bne.n	800524c <UART_SetConfig+0x18c>
 80051e8:	4b89      	ldr	r3, [pc, #548]	; (8005410 <UART_SetConfig+0x350>)
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	220c      	movs	r2, #12
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	d01d      	beq.n	8005230 <UART_SetConfig+0x170>
 80051f4:	d823      	bhi.n	800523e <UART_SetConfig+0x17e>
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d00c      	beq.n	8005214 <UART_SetConfig+0x154>
 80051fa:	d820      	bhi.n	800523e <UART_SetConfig+0x17e>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <UART_SetConfig+0x146>
 8005200:	2b04      	cmp	r3, #4
 8005202:	d00e      	beq.n	8005222 <UART_SetConfig+0x162>
 8005204:	e01b      	b.n	800523e <UART_SetConfig+0x17e>
 8005206:	231b      	movs	r3, #27
 8005208:	2220      	movs	r2, #32
 800520a:	189b      	adds	r3, r3, r2
 800520c:	19db      	adds	r3, r3, r7
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e11d      	b.n	8005450 <UART_SetConfig+0x390>
 8005214:	231b      	movs	r3, #27
 8005216:	2220      	movs	r2, #32
 8005218:	189b      	adds	r3, r3, r2
 800521a:	19db      	adds	r3, r3, r7
 800521c:	2202      	movs	r2, #2
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e116      	b.n	8005450 <UART_SetConfig+0x390>
 8005222:	231b      	movs	r3, #27
 8005224:	2220      	movs	r2, #32
 8005226:	189b      	adds	r3, r3, r2
 8005228:	19db      	adds	r3, r3, r7
 800522a:	2204      	movs	r2, #4
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e10f      	b.n	8005450 <UART_SetConfig+0x390>
 8005230:	231b      	movs	r3, #27
 8005232:	2220      	movs	r2, #32
 8005234:	189b      	adds	r3, r3, r2
 8005236:	19db      	adds	r3, r3, r7
 8005238:	2208      	movs	r2, #8
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	e108      	b.n	8005450 <UART_SetConfig+0x390>
 800523e:	231b      	movs	r3, #27
 8005240:	2220      	movs	r2, #32
 8005242:	189b      	adds	r3, r3, r2
 8005244:	19db      	adds	r3, r3, r7
 8005246:	2210      	movs	r2, #16
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e101      	b.n	8005450 <UART_SetConfig+0x390>
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a71      	ldr	r2, [pc, #452]	; (8005418 <UART_SetConfig+0x358>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d131      	bne.n	80052ba <UART_SetConfig+0x1fa>
 8005256:	4b6e      	ldr	r3, [pc, #440]	; (8005410 <UART_SetConfig+0x350>)
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	2230      	movs	r2, #48	; 0x30
 800525c:	4013      	ands	r3, r2
 800525e:	2b30      	cmp	r3, #48	; 0x30
 8005260:	d01d      	beq.n	800529e <UART_SetConfig+0x1de>
 8005262:	d823      	bhi.n	80052ac <UART_SetConfig+0x1ec>
 8005264:	2b20      	cmp	r3, #32
 8005266:	d00c      	beq.n	8005282 <UART_SetConfig+0x1c2>
 8005268:	d820      	bhi.n	80052ac <UART_SetConfig+0x1ec>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <UART_SetConfig+0x1b4>
 800526e:	2b10      	cmp	r3, #16
 8005270:	d00e      	beq.n	8005290 <UART_SetConfig+0x1d0>
 8005272:	e01b      	b.n	80052ac <UART_SetConfig+0x1ec>
 8005274:	231b      	movs	r3, #27
 8005276:	2220      	movs	r2, #32
 8005278:	189b      	adds	r3, r3, r2
 800527a:	19db      	adds	r3, r3, r7
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	e0e6      	b.n	8005450 <UART_SetConfig+0x390>
 8005282:	231b      	movs	r3, #27
 8005284:	2220      	movs	r2, #32
 8005286:	189b      	adds	r3, r3, r2
 8005288:	19db      	adds	r3, r3, r7
 800528a:	2202      	movs	r2, #2
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e0df      	b.n	8005450 <UART_SetConfig+0x390>
 8005290:	231b      	movs	r3, #27
 8005292:	2220      	movs	r2, #32
 8005294:	189b      	adds	r3, r3, r2
 8005296:	19db      	adds	r3, r3, r7
 8005298:	2204      	movs	r2, #4
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e0d8      	b.n	8005450 <UART_SetConfig+0x390>
 800529e:	231b      	movs	r3, #27
 80052a0:	2220      	movs	r2, #32
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	19db      	adds	r3, r3, r7
 80052a6:	2208      	movs	r2, #8
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e0d1      	b.n	8005450 <UART_SetConfig+0x390>
 80052ac:	231b      	movs	r3, #27
 80052ae:	2220      	movs	r2, #32
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	2210      	movs	r2, #16
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e0ca      	b.n	8005450 <UART_SetConfig+0x390>
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a57      	ldr	r2, [pc, #348]	; (800541c <UART_SetConfig+0x35c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d106      	bne.n	80052d2 <UART_SetConfig+0x212>
 80052c4:	231b      	movs	r3, #27
 80052c6:	2220      	movs	r2, #32
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	19db      	adds	r3, r3, r7
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e0be      	b.n	8005450 <UART_SetConfig+0x390>
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a52      	ldr	r2, [pc, #328]	; (8005420 <UART_SetConfig+0x360>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d106      	bne.n	80052ea <UART_SetConfig+0x22a>
 80052dc:	231b      	movs	r3, #27
 80052de:	2220      	movs	r2, #32
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	19db      	adds	r3, r3, r7
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e0b2      	b.n	8005450 <UART_SetConfig+0x390>
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a4d      	ldr	r2, [pc, #308]	; (8005424 <UART_SetConfig+0x364>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d106      	bne.n	8005302 <UART_SetConfig+0x242>
 80052f4:	231b      	movs	r3, #27
 80052f6:	2220      	movs	r2, #32
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	19db      	adds	r3, r3, r7
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e0a6      	b.n	8005450 <UART_SetConfig+0x390>
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3e      	ldr	r2, [pc, #248]	; (8005400 <UART_SetConfig+0x340>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d13e      	bne.n	800538a <UART_SetConfig+0x2ca>
 800530c:	4b40      	ldr	r3, [pc, #256]	; (8005410 <UART_SetConfig+0x350>)
 800530e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005310:	23c0      	movs	r3, #192	; 0xc0
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	4013      	ands	r3, r2
 8005316:	22c0      	movs	r2, #192	; 0xc0
 8005318:	0112      	lsls	r2, r2, #4
 800531a:	4293      	cmp	r3, r2
 800531c:	d027      	beq.n	800536e <UART_SetConfig+0x2ae>
 800531e:	22c0      	movs	r2, #192	; 0xc0
 8005320:	0112      	lsls	r2, r2, #4
 8005322:	4293      	cmp	r3, r2
 8005324:	d82a      	bhi.n	800537c <UART_SetConfig+0x2bc>
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	0112      	lsls	r2, r2, #4
 800532a:	4293      	cmp	r3, r2
 800532c:	d011      	beq.n	8005352 <UART_SetConfig+0x292>
 800532e:	2280      	movs	r2, #128	; 0x80
 8005330:	0112      	lsls	r2, r2, #4
 8005332:	4293      	cmp	r3, r2
 8005334:	d822      	bhi.n	800537c <UART_SetConfig+0x2bc>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <UART_SetConfig+0x284>
 800533a:	2280      	movs	r2, #128	; 0x80
 800533c:	00d2      	lsls	r2, r2, #3
 800533e:	4293      	cmp	r3, r2
 8005340:	d00e      	beq.n	8005360 <UART_SetConfig+0x2a0>
 8005342:	e01b      	b.n	800537c <UART_SetConfig+0x2bc>
 8005344:	231b      	movs	r3, #27
 8005346:	2220      	movs	r2, #32
 8005348:	189b      	adds	r3, r3, r2
 800534a:	19db      	adds	r3, r3, r7
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
 8005350:	e07e      	b.n	8005450 <UART_SetConfig+0x390>
 8005352:	231b      	movs	r3, #27
 8005354:	2220      	movs	r2, #32
 8005356:	189b      	adds	r3, r3, r2
 8005358:	19db      	adds	r3, r3, r7
 800535a:	2202      	movs	r2, #2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e077      	b.n	8005450 <UART_SetConfig+0x390>
 8005360:	231b      	movs	r3, #27
 8005362:	2220      	movs	r2, #32
 8005364:	189b      	adds	r3, r3, r2
 8005366:	19db      	adds	r3, r3, r7
 8005368:	2204      	movs	r2, #4
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e070      	b.n	8005450 <UART_SetConfig+0x390>
 800536e:	231b      	movs	r3, #27
 8005370:	2220      	movs	r2, #32
 8005372:	189b      	adds	r3, r3, r2
 8005374:	19db      	adds	r3, r3, r7
 8005376:	2208      	movs	r2, #8
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e069      	b.n	8005450 <UART_SetConfig+0x390>
 800537c:	231b      	movs	r3, #27
 800537e:	2220      	movs	r2, #32
 8005380:	189b      	adds	r3, r3, r2
 8005382:	19db      	adds	r3, r3, r7
 8005384:	2210      	movs	r2, #16
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	e062      	b.n	8005450 <UART_SetConfig+0x390>
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <UART_SetConfig+0x344>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d157      	bne.n	8005444 <UART_SetConfig+0x384>
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <UART_SetConfig+0x350>)
 8005396:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005398:	23c0      	movs	r3, #192	; 0xc0
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4013      	ands	r3, r2
 800539e:	22c0      	movs	r2, #192	; 0xc0
 80053a0:	0092      	lsls	r2, r2, #2
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d040      	beq.n	8005428 <UART_SetConfig+0x368>
 80053a6:	22c0      	movs	r2, #192	; 0xc0
 80053a8:	0092      	lsls	r2, r2, #2
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d843      	bhi.n	8005436 <UART_SetConfig+0x376>
 80053ae:	2280      	movs	r2, #128	; 0x80
 80053b0:	0092      	lsls	r2, r2, #2
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d011      	beq.n	80053da <UART_SetConfig+0x31a>
 80053b6:	2280      	movs	r2, #128	; 0x80
 80053b8:	0092      	lsls	r2, r2, #2
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d83b      	bhi.n	8005436 <UART_SetConfig+0x376>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d004      	beq.n	80053cc <UART_SetConfig+0x30c>
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	0052      	lsls	r2, r2, #1
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <UART_SetConfig+0x328>
 80053ca:	e034      	b.n	8005436 <UART_SetConfig+0x376>
 80053cc:	231b      	movs	r3, #27
 80053ce:	2220      	movs	r2, #32
 80053d0:	189b      	adds	r3, r3, r2
 80053d2:	19db      	adds	r3, r3, r7
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e03a      	b.n	8005450 <UART_SetConfig+0x390>
 80053da:	231b      	movs	r3, #27
 80053dc:	2220      	movs	r2, #32
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	19db      	adds	r3, r3, r7
 80053e2:	2202      	movs	r2, #2
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e033      	b.n	8005450 <UART_SetConfig+0x390>
 80053e8:	231b      	movs	r3, #27
 80053ea:	2220      	movs	r2, #32
 80053ec:	189b      	adds	r3, r3, r2
 80053ee:	19db      	adds	r3, r3, r7
 80053f0:	2204      	movs	r2, #4
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e02c      	b.n	8005450 <UART_SetConfig+0x390>
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	cfff69f3 	.word	0xcfff69f3
 80053fc:	ffffcfff 	.word	0xffffcfff
 8005400:	40008000 	.word	0x40008000
 8005404:	40008400 	.word	0x40008400
 8005408:	11fff4ff 	.word	0x11fff4ff
 800540c:	40013800 	.word	0x40013800
 8005410:	40021000 	.word	0x40021000
 8005414:	40004400 	.word	0x40004400
 8005418:	40004800 	.word	0x40004800
 800541c:	40004c00 	.word	0x40004c00
 8005420:	40005000 	.word	0x40005000
 8005424:	40013c00 	.word	0x40013c00
 8005428:	231b      	movs	r3, #27
 800542a:	2220      	movs	r2, #32
 800542c:	189b      	adds	r3, r3, r2
 800542e:	19db      	adds	r3, r3, r7
 8005430:	2208      	movs	r2, #8
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	e00c      	b.n	8005450 <UART_SetConfig+0x390>
 8005436:	231b      	movs	r3, #27
 8005438:	2220      	movs	r2, #32
 800543a:	189b      	adds	r3, r3, r2
 800543c:	19db      	adds	r3, r3, r7
 800543e:	2210      	movs	r2, #16
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	e005      	b.n	8005450 <UART_SetConfig+0x390>
 8005444:	231b      	movs	r3, #27
 8005446:	2220      	movs	r2, #32
 8005448:	189b      	adds	r3, r3, r2
 800544a:	19db      	adds	r3, r3, r7
 800544c:	2210      	movs	r2, #16
 800544e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4ac1      	ldr	r2, [pc, #772]	; (800575c <UART_SetConfig+0x69c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d005      	beq.n	8005466 <UART_SetConfig+0x3a6>
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4ac0      	ldr	r2, [pc, #768]	; (8005760 <UART_SetConfig+0x6a0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d000      	beq.n	8005466 <UART_SetConfig+0x3a6>
 8005464:	e093      	b.n	800558e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005466:	231b      	movs	r3, #27
 8005468:	2220      	movs	r2, #32
 800546a:	189b      	adds	r3, r3, r2
 800546c:	19db      	adds	r3, r3, r7
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d015      	beq.n	80054a0 <UART_SetConfig+0x3e0>
 8005474:	dc18      	bgt.n	80054a8 <UART_SetConfig+0x3e8>
 8005476:	2b04      	cmp	r3, #4
 8005478:	d00d      	beq.n	8005496 <UART_SetConfig+0x3d6>
 800547a:	dc15      	bgt.n	80054a8 <UART_SetConfig+0x3e8>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <UART_SetConfig+0x3c6>
 8005480:	2b02      	cmp	r3, #2
 8005482:	d005      	beq.n	8005490 <UART_SetConfig+0x3d0>
 8005484:	e010      	b.n	80054a8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005486:	f7fe fa89 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 800548a:	0003      	movs	r3, r0
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800548e:	e014      	b.n	80054ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005490:	4bb4      	ldr	r3, [pc, #720]	; (8005764 <UART_SetConfig+0x6a4>)
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005494:	e011      	b.n	80054ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005496:	f7fe f9f5 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 800549a:	0003      	movs	r3, r0
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800549e:	e00c      	b.n	80054ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054a6:	e008      	b.n	80054ba <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054ac:	231a      	movs	r3, #26
 80054ae:	2220      	movs	r2, #32
 80054b0:	189b      	adds	r3, r3, r2
 80054b2:	19db      	adds	r3, r3, r7
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
        break;
 80054b8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d100      	bne.n	80054c2 <UART_SetConfig+0x402>
 80054c0:	e135      	b.n	800572e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054c6:	4ba8      	ldr	r3, [pc, #672]	; (8005768 <UART_SetConfig+0x6a8>)
 80054c8:	0052      	lsls	r2, r2, #1
 80054ca:	5ad3      	ldrh	r3, [r2, r3]
 80054cc:	0019      	movs	r1, r3
 80054ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054d0:	f7fa fe2a 	bl	8000128 <__udivsi3>
 80054d4:	0003      	movs	r3, r0
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	0013      	movs	r3, r2
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	189b      	adds	r3, r3, r2
 80054e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d305      	bcc.n	80054f4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d906      	bls.n	8005502 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80054f4:	231a      	movs	r3, #26
 80054f6:	2220      	movs	r2, #32
 80054f8:	189b      	adds	r3, r3, r2
 80054fa:	19db      	adds	r3, r3, r7
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e044      	b.n	800558c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800550e:	4b96      	ldr	r3, [pc, #600]	; (8005768 <UART_SetConfig+0x6a8>)
 8005510:	0052      	lsls	r2, r2, #1
 8005512:	5ad3      	ldrh	r3, [r2, r3]
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	69b8      	ldr	r0, [r7, #24]
 8005520:	69f9      	ldr	r1, [r7, #28]
 8005522:	f7fa ff77 	bl	8000414 <__aeabi_uldivmod>
 8005526:	0002      	movs	r2, r0
 8005528:	000b      	movs	r3, r1
 800552a:	0e11      	lsrs	r1, r2, #24
 800552c:	021d      	lsls	r5, r3, #8
 800552e:	430d      	orrs	r5, r1
 8005530:	0214      	lsls	r4, r2, #8
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68b8      	ldr	r0, [r7, #8]
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	1900      	adds	r0, r0, r4
 8005544:	4169      	adcs	r1, r5
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	2300      	movs	r3, #0
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f7fa ff5e 	bl	8000414 <__aeabi_uldivmod>
 8005558:	0002      	movs	r2, r0
 800555a:	000b      	movs	r3, r1
 800555c:	0013      	movs	r3, r2
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005562:	23c0      	movs	r3, #192	; 0xc0
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	429a      	cmp	r2, r3
 8005568:	d309      	bcc.n	800557e <UART_SetConfig+0x4be>
 800556a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	035b      	lsls	r3, r3, #13
 8005570:	429a      	cmp	r2, r3
 8005572:	d204      	bcs.n	800557e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557a:	60da      	str	r2, [r3, #12]
 800557c:	e006      	b.n	800558c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800557e:	231a      	movs	r3, #26
 8005580:	2220      	movs	r2, #32
 8005582:	189b      	adds	r3, r3, r2
 8005584:	19db      	adds	r3, r3, r7
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800558a:	e0d0      	b.n	800572e <UART_SetConfig+0x66e>
 800558c:	e0cf      	b.n	800572e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	69da      	ldr	r2, [r3, #28]
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	429a      	cmp	r2, r3
 8005598:	d000      	beq.n	800559c <UART_SetConfig+0x4dc>
 800559a:	e070      	b.n	800567e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800559c:	231b      	movs	r3, #27
 800559e:	2220      	movs	r2, #32
 80055a0:	189b      	adds	r3, r3, r2
 80055a2:	19db      	adds	r3, r3, r7
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d015      	beq.n	80055d6 <UART_SetConfig+0x516>
 80055aa:	dc18      	bgt.n	80055de <UART_SetConfig+0x51e>
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d00d      	beq.n	80055cc <UART_SetConfig+0x50c>
 80055b0:	dc15      	bgt.n	80055de <UART_SetConfig+0x51e>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <UART_SetConfig+0x4fc>
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d005      	beq.n	80055c6 <UART_SetConfig+0x506>
 80055ba:	e010      	b.n	80055de <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055bc:	f7fe f9ee 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 80055c0:	0003      	movs	r3, r0
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055c4:	e014      	b.n	80055f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c6:	4b67      	ldr	r3, [pc, #412]	; (8005764 <UART_SetConfig+0x6a4>)
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055ca:	e011      	b.n	80055f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055cc:	f7fe f95a 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 80055d0:	0003      	movs	r3, r0
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055d4:	e00c      	b.n	80055f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055dc:	e008      	b.n	80055f0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80055e2:	231a      	movs	r3, #26
 80055e4:	2220      	movs	r2, #32
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	19db      	adds	r3, r3, r7
 80055ea:	2201      	movs	r2, #1
 80055ec:	701a      	strb	r2, [r3, #0]
        break;
 80055ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d100      	bne.n	80055f8 <UART_SetConfig+0x538>
 80055f6:	e09a      	b.n	800572e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055fc:	4b5a      	ldr	r3, [pc, #360]	; (8005768 <UART_SetConfig+0x6a8>)
 80055fe:	0052      	lsls	r2, r2, #1
 8005600:	5ad3      	ldrh	r3, [r2, r3]
 8005602:	0019      	movs	r1, r3
 8005604:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005606:	f7fa fd8f 	bl	8000128 <__udivsi3>
 800560a:	0003      	movs	r3, r0
 800560c:	005a      	lsls	r2, r3, #1
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	18d2      	adds	r2, r2, r3
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	0019      	movs	r1, r3
 800561c:	0010      	movs	r0, r2
 800561e:	f7fa fd83 	bl	8000128 <__udivsi3>
 8005622:	0003      	movs	r3, r0
 8005624:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2b0f      	cmp	r3, #15
 800562a:	d921      	bls.n	8005670 <UART_SetConfig+0x5b0>
 800562c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	025b      	lsls	r3, r3, #9
 8005632:	429a      	cmp	r2, r3
 8005634:	d21c      	bcs.n	8005670 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	b29a      	uxth	r2, r3
 800563a:	200e      	movs	r0, #14
 800563c:	2420      	movs	r4, #32
 800563e:	1903      	adds	r3, r0, r4
 8005640:	19db      	adds	r3, r3, r7
 8005642:	210f      	movs	r1, #15
 8005644:	438a      	bics	r2, r1
 8005646:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	b29b      	uxth	r3, r3
 800564e:	2207      	movs	r2, #7
 8005650:	4013      	ands	r3, r2
 8005652:	b299      	uxth	r1, r3
 8005654:	1903      	adds	r3, r0, r4
 8005656:	19db      	adds	r3, r3, r7
 8005658:	1902      	adds	r2, r0, r4
 800565a:	19d2      	adds	r2, r2, r7
 800565c:	8812      	ldrh	r2, [r2, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	1902      	adds	r2, r0, r4
 8005668:	19d2      	adds	r2, r2, r7
 800566a:	8812      	ldrh	r2, [r2, #0]
 800566c:	60da      	str	r2, [r3, #12]
 800566e:	e05e      	b.n	800572e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005670:	231a      	movs	r3, #26
 8005672:	2220      	movs	r2, #32
 8005674:	189b      	adds	r3, r3, r2
 8005676:	19db      	adds	r3, r3, r7
 8005678:	2201      	movs	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e057      	b.n	800572e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800567e:	231b      	movs	r3, #27
 8005680:	2220      	movs	r2, #32
 8005682:	189b      	adds	r3, r3, r2
 8005684:	19db      	adds	r3, r3, r7
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d015      	beq.n	80056b8 <UART_SetConfig+0x5f8>
 800568c:	dc18      	bgt.n	80056c0 <UART_SetConfig+0x600>
 800568e:	2b04      	cmp	r3, #4
 8005690:	d00d      	beq.n	80056ae <UART_SetConfig+0x5ee>
 8005692:	dc15      	bgt.n	80056c0 <UART_SetConfig+0x600>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <UART_SetConfig+0x5de>
 8005698:	2b02      	cmp	r3, #2
 800569a:	d005      	beq.n	80056a8 <UART_SetConfig+0x5e8>
 800569c:	e010      	b.n	80056c0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800569e:	f7fe f97d 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 80056a2:	0003      	movs	r3, r0
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056a6:	e014      	b.n	80056d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b2e      	ldr	r3, [pc, #184]	; (8005764 <UART_SetConfig+0x6a4>)
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ac:	e011      	b.n	80056d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7fe f8e9 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 80056b2:	0003      	movs	r3, r0
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056b6:	e00c      	b.n	80056d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b8:	2380      	movs	r3, #128	; 0x80
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056be:	e008      	b.n	80056d2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80056c4:	231a      	movs	r3, #26
 80056c6:	2220      	movs	r2, #32
 80056c8:	189b      	adds	r3, r3, r2
 80056ca:	19db      	adds	r3, r3, r7
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
        break;
 80056d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02a      	beq.n	800572e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056dc:	4b22      	ldr	r3, [pc, #136]	; (8005768 <UART_SetConfig+0x6a8>)
 80056de:	0052      	lsls	r2, r2, #1
 80056e0:	5ad3      	ldrh	r3, [r2, r3]
 80056e2:	0019      	movs	r1, r3
 80056e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056e6:	f7fa fd1f 	bl	8000128 <__udivsi3>
 80056ea:	0003      	movs	r3, r0
 80056ec:	001a      	movs	r2, r3
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	18d2      	adds	r2, r2, r3
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	0019      	movs	r1, r3
 80056fc:	0010      	movs	r0, r2
 80056fe:	f7fa fd13 	bl	8000128 <__udivsi3>
 8005702:	0003      	movs	r3, r0
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	2b0f      	cmp	r3, #15
 800570a:	d90a      	bls.n	8005722 <UART_SetConfig+0x662>
 800570c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	025b      	lsls	r3, r3, #9
 8005712:	429a      	cmp	r2, r3
 8005714:	d205      	bcs.n	8005722 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	b29a      	uxth	r2, r3
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	e005      	b.n	800572e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005722:	231a      	movs	r3, #26
 8005724:	2220      	movs	r2, #32
 8005726:	189b      	adds	r3, r3, r2
 8005728:	19db      	adds	r3, r3, r7
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	226a      	movs	r2, #106	; 0x6a
 8005732:	2101      	movs	r1, #1
 8005734:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2268      	movs	r2, #104	; 0x68
 800573a:	2101      	movs	r1, #1
 800573c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	2200      	movs	r2, #0
 8005742:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	2200      	movs	r2, #0
 8005748:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800574a:	231a      	movs	r3, #26
 800574c:	2220      	movs	r2, #32
 800574e:	189b      	adds	r3, r3, r2
 8005750:	19db      	adds	r3, r3, r7
 8005752:	781b      	ldrb	r3, [r3, #0]
}
 8005754:	0018      	movs	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	b010      	add	sp, #64	; 0x40
 800575a:	bdb0      	pop	{r4, r5, r7, pc}
 800575c:	40008000 	.word	0x40008000
 8005760:	40008400 	.word	0x40008400
 8005764:	00f42400 	.word	0x00f42400
 8005768:	08008088 	.word	0x08008088

0800576c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	2208      	movs	r2, #8
 800577a:	4013      	ands	r3, r2
 800577c:	d00b      	beq.n	8005796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4a4a      	ldr	r2, [pc, #296]	; (80058b0 <UART_AdvFeatureConfig+0x144>)
 8005786:	4013      	ands	r3, r2
 8005788:	0019      	movs	r1, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	2201      	movs	r2, #1
 800579c:	4013      	ands	r3, r2
 800579e:	d00b      	beq.n	80057b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4a43      	ldr	r2, [pc, #268]	; (80058b4 <UART_AdvFeatureConfig+0x148>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	0019      	movs	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	2202      	movs	r2, #2
 80057be:	4013      	ands	r3, r2
 80057c0:	d00b      	beq.n	80057da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4a3b      	ldr	r2, [pc, #236]	; (80058b8 <UART_AdvFeatureConfig+0x14c>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	0019      	movs	r1, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	2204      	movs	r2, #4
 80057e0:	4013      	ands	r3, r2
 80057e2:	d00b      	beq.n	80057fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4a34      	ldr	r2, [pc, #208]	; (80058bc <UART_AdvFeatureConfig+0x150>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	0019      	movs	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	2210      	movs	r2, #16
 8005802:	4013      	ands	r3, r2
 8005804:	d00b      	beq.n	800581e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <UART_AdvFeatureConfig+0x154>)
 800580e:	4013      	ands	r3, r2
 8005810:	0019      	movs	r1, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	2220      	movs	r2, #32
 8005824:	4013      	ands	r3, r2
 8005826:	d00b      	beq.n	8005840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	4a25      	ldr	r2, [pc, #148]	; (80058c4 <UART_AdvFeatureConfig+0x158>)
 8005830:	4013      	ands	r3, r2
 8005832:	0019      	movs	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	2240      	movs	r2, #64	; 0x40
 8005846:	4013      	ands	r3, r2
 8005848:	d01d      	beq.n	8005886 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <UART_AdvFeatureConfig+0x15c>)
 8005852:	4013      	ands	r3, r2
 8005854:	0019      	movs	r1, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	035b      	lsls	r3, r3, #13
 800586a:	429a      	cmp	r2, r3
 800586c:	d10b      	bne.n	8005886 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a15      	ldr	r2, [pc, #84]	; (80058cc <UART_AdvFeatureConfig+0x160>)
 8005876:	4013      	ands	r3, r2
 8005878:	0019      	movs	r1, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	2280      	movs	r2, #128	; 0x80
 800588c:	4013      	ands	r3, r2
 800588e:	d00b      	beq.n	80058a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4a0e      	ldr	r2, [pc, #56]	; (80058d0 <UART_AdvFeatureConfig+0x164>)
 8005898:	4013      	ands	r3, r2
 800589a:	0019      	movs	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]
  }
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b002      	add	sp, #8
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	ffff7fff 	.word	0xffff7fff
 80058b4:	fffdffff 	.word	0xfffdffff
 80058b8:	fffeffff 	.word	0xfffeffff
 80058bc:	fffbffff 	.word	0xfffbffff
 80058c0:	ffffefff 	.word	0xffffefff
 80058c4:	ffffdfff 	.word	0xffffdfff
 80058c8:	ffefffff 	.word	0xffefffff
 80058cc:	ff9fffff 	.word	0xff9fffff
 80058d0:	fff7ffff 	.word	0xfff7ffff

080058d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b092      	sub	sp, #72	; 0x48
 80058d8:	af02      	add	r7, sp, #8
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2290      	movs	r2, #144	; 0x90
 80058e0:	2100      	movs	r1, #0
 80058e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058e4:	f7fc ff8a 	bl	80027fc <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2208      	movs	r2, #8
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d12d      	bne.n	8005956 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	2280      	movs	r2, #128	; 0x80
 80058fe:	0391      	lsls	r1, r2, #14
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4a47      	ldr	r2, [pc, #284]	; (8005a20 <UART_CheckIdleState+0x14c>)
 8005904:	9200      	str	r2, [sp, #0]
 8005906:	2200      	movs	r2, #0
 8005908:	f000 f88e 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 800590c:	1e03      	subs	r3, r0, #0
 800590e:	d022      	beq.n	8005956 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005910:	f3ef 8310 	mrs	r3, PRIMASK
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005918:	63bb      	str	r3, [r7, #56]	; 0x38
 800591a:	2301      	movs	r3, #1
 800591c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	f383 8810 	msr	PRIMASK, r3
}
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	438a      	bics	r2, r1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	f383 8810 	msr	PRIMASK, r3
}
 8005940:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2288      	movs	r2, #136	; 0x88
 8005946:	2120      	movs	r1, #32
 8005948:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2284      	movs	r2, #132	; 0x84
 800594e:	2100      	movs	r1, #0
 8005950:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e060      	b.n	8005a18 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2204      	movs	r2, #4
 800595e:	4013      	ands	r3, r2
 8005960:	2b04      	cmp	r3, #4
 8005962:	d146      	bne.n	80059f2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005966:	2280      	movs	r2, #128	; 0x80
 8005968:	03d1      	lsls	r1, r2, #15
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <UART_CheckIdleState+0x14c>)
 800596e:	9200      	str	r2, [sp, #0]
 8005970:	2200      	movs	r2, #0
 8005972:	f000 f859 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8005976:	1e03      	subs	r3, r0, #0
 8005978:	d03b      	beq.n	80059f2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597a:	f3ef 8310 	mrs	r3, PRIMASK
 800597e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005980:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
 8005984:	2301      	movs	r3, #1
 8005986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f383 8810 	msr	PRIMASK, r3
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4922      	ldr	r1, [pc, #136]	; (8005a24 <UART_CheckIdleState+0x150>)
 800599c:	400a      	ands	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f383 8810 	msr	PRIMASK, r3
}
 80059aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ac:	f3ef 8310 	mrs	r3, PRIMASK
 80059b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80059b2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
 80059b6:	2301      	movs	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f383 8810 	msr	PRIMASK, r3
}
 80059c0:	46c0      	nop			; (mov r8, r8)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2101      	movs	r1, #1
 80059ce:	438a      	bics	r2, r1
 80059d0:	609a      	str	r2, [r3, #8]
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	f383 8810 	msr	PRIMASK, r3
}
 80059dc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	228c      	movs	r2, #140	; 0x8c
 80059e2:	2120      	movs	r1, #32
 80059e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2284      	movs	r2, #132	; 0x84
 80059ea:	2100      	movs	r1, #0
 80059ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e012      	b.n	8005a18 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2288      	movs	r2, #136	; 0x88
 80059f6:	2120      	movs	r1, #32
 80059f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	228c      	movs	r2, #140	; 0x8c
 80059fe:	2120      	movs	r1, #32
 8005a00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2284      	movs	r2, #132	; 0x84
 8005a12:	2100      	movs	r1, #0
 8005a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b010      	add	sp, #64	; 0x40
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	01ffffff 	.word	0x01ffffff
 8005a24:	fffffedf 	.word	0xfffffedf

08005a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	1dfb      	adds	r3, r7, #7
 8005a36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a38:	e051      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	d04e      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a40:	f7fc fedc 	bl	80027fc <HAL_GetTick>
 8005a44:	0002      	movs	r2, r0
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e051      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2204      	movs	r2, #4
 8005a62:	4013      	ands	r3, r2
 8005a64:	d03b      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb6>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d038      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb6>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d035      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	2208      	movs	r2, #8
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d111      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2208      	movs	r2, #8
 8005a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 f83c 	bl	8005b08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2290      	movs	r2, #144	; 0x90
 8005a94:	2108      	movs	r1, #8
 8005a96:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2284      	movs	r2, #132	; 0x84
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e02c      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69da      	ldr	r2, [r3, #28]
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	401a      	ands	r2, r3
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d112      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2280      	movs	r2, #128	; 0x80
 8005abe:	0112      	lsls	r2, r2, #4
 8005ac0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 f81f 	bl	8005b08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2290      	movs	r2, #144	; 0x90
 8005ace:	2120      	movs	r1, #32
 8005ad0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2284      	movs	r2, #132	; 0x84
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e00f      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	425a      	negs	r2, r3
 8005aee:	4153      	adcs	r3, r2
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	001a      	movs	r2, r3
 8005af4:	1dfb      	adds	r3, r7, #7
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d09e      	beq.n	8005a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b10:	f3ef 8310 	mrs	r3, PRIMASK
 8005b14:	617b      	str	r3, [r7, #20]
  return(result);
 8005b16:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f383 8810 	msr	PRIMASK, r3
}
 8005b24:	46c0      	nop			; (mov r8, r8)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4926      	ldr	r1, [pc, #152]	; (8005bcc <UART_EndRxTransfer+0xc4>)
 8005b32:	400a      	ands	r2, r1
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f383 8810 	msr	PRIMASK, r3
}
 8005b40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b42:	f3ef 8310 	mrs	r3, PRIMASK
 8005b46:	623b      	str	r3, [r7, #32]
  return(result);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	f383 8810 	msr	PRIMASK, r3
}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	491b      	ldr	r1, [pc, #108]	; (8005bd0 <UART_EndRxTransfer+0xc8>)
 8005b64:	400a      	ands	r2, r1
 8005b66:	609a      	str	r2, [r3, #8]
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	f383 8810 	msr	PRIMASK, r3
}
 8005b72:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d118      	bne.n	8005bae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b80:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b82:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b86:	2301      	movs	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f383 8810 	msr	PRIMASK, r3
}
 8005b90:	46c0      	nop			; (mov r8, r8)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2110      	movs	r1, #16
 8005b9e:	438a      	bics	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f383 8810 	msr	PRIMASK, r3
}
 8005bac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	228c      	movs	r2, #140	; 0x8c
 8005bb2:	2120      	movs	r1, #32
 8005bb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b00e      	add	sp, #56	; 0x38
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	fffffedf 	.word	0xfffffedf
 8005bd0:	effffffe 	.word	0xeffffffe

08005bd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2284      	movs	r2, #132	; 0x84
 8005be0:	5c9b      	ldrb	r3, [r3, r2]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_UARTEx_DisableFifoMode+0x16>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e027      	b.n	8005c3a <HAL_UARTEx_DisableFifoMode+0x66>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2284      	movs	r2, #132	; 0x84
 8005bee:	2101      	movs	r1, #1
 8005bf0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2288      	movs	r2, #136	; 0x88
 8005bf6:	2124      	movs	r1, #36	; 0x24
 8005bf8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	438a      	bics	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2288      	movs	r2, #136	; 0x88
 8005c2c:	2120      	movs	r1, #32
 8005c2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2284      	movs	r2, #132	; 0x84
 8005c34:	2100      	movs	r1, #0
 8005c36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b004      	add	sp, #16
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	dfffffff 	.word	0xdfffffff

08005c48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2284      	movs	r2, #132	; 0x84
 8005c56:	5c9b      	ldrb	r3, [r3, r2]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e02e      	b.n	8005cbe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2284      	movs	r2, #132	; 0x84
 8005c64:	2101      	movs	r1, #1
 8005c66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2288      	movs	r2, #136	; 0x88
 8005c6c:	2124      	movs	r1, #36	; 0x24
 8005c6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2101      	movs	r1, #1
 8005c84:	438a      	bics	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	08d9      	lsrs	r1, r3, #3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 f854 	bl	8005d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2288      	movs	r2, #136	; 0x88
 8005cb0:	2120      	movs	r1, #32
 8005cb2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2284      	movs	r2, #132	; 0x84
 8005cb8:	2100      	movs	r1, #0
 8005cba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b004      	add	sp, #16
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2284      	movs	r2, #132	; 0x84
 8005cd6:	5c9b      	ldrb	r3, [r3, r2]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e02f      	b.n	8005d40 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2284      	movs	r2, #132	; 0x84
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2288      	movs	r2, #136	; 0x88
 8005cec:	2124      	movs	r1, #36	; 0x24
 8005cee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2101      	movs	r1, #1
 8005d04:	438a      	bics	r2, r1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 f813 	bl	8005d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2288      	movs	r2, #136	; 0x88
 8005d32:	2120      	movs	r1, #32
 8005d34:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2284      	movs	r2, #132	; 0x84
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	0018      	movs	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b004      	add	sp, #16
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	f1ffffff 	.word	0xf1ffffff

08005d4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d108      	bne.n	8005d6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	226a      	movs	r2, #106	; 0x6a
 8005d60:	2101      	movs	r1, #1
 8005d62:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2268      	movs	r2, #104	; 0x68
 8005d68:	2101      	movs	r1, #1
 8005d6a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d6c:	e043      	b.n	8005df6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d6e:	260f      	movs	r6, #15
 8005d70:	19bb      	adds	r3, r7, r6
 8005d72:	2208      	movs	r2, #8
 8005d74:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d76:	200e      	movs	r0, #14
 8005d78:	183b      	adds	r3, r7, r0
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	0e5b      	lsrs	r3, r3, #25
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	240d      	movs	r4, #13
 8005d8a:	193b      	adds	r3, r7, r4
 8005d8c:	2107      	movs	r1, #7
 8005d8e:	400a      	ands	r2, r1
 8005d90:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	0f5b      	lsrs	r3, r3, #29
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	250c      	movs	r5, #12
 8005d9e:	197b      	adds	r3, r7, r5
 8005da0:	2107      	movs	r1, #7
 8005da2:	400a      	ands	r2, r1
 8005da4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005da6:	183b      	adds	r3, r7, r0
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	197a      	adds	r2, r7, r5
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	4914      	ldr	r1, [pc, #80]	; (8005e00 <UARTEx_SetNbDataToProcess+0xb4>)
 8005db0:	5c8a      	ldrb	r2, [r1, r2]
 8005db2:	435a      	muls	r2, r3
 8005db4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005db6:	197b      	adds	r3, r7, r5
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <UARTEx_SetNbDataToProcess+0xb8>)
 8005dbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	f7fa fa3c 	bl	800023c <__divsi3>
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	b299      	uxth	r1, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	226a      	movs	r2, #106	; 0x6a
 8005dcc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dce:	19bb      	adds	r3, r7, r6
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	193a      	adds	r2, r7, r4
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	490a      	ldr	r1, [pc, #40]	; (8005e00 <UARTEx_SetNbDataToProcess+0xb4>)
 8005dd8:	5c8a      	ldrb	r2, [r1, r2]
 8005dda:	435a      	muls	r2, r3
 8005ddc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dde:	193b      	adds	r3, r7, r4
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	4a08      	ldr	r2, [pc, #32]	; (8005e04 <UARTEx_SetNbDataToProcess+0xb8>)
 8005de4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005de6:	0019      	movs	r1, r3
 8005de8:	f7fa fa28 	bl	800023c <__divsi3>
 8005dec:	0003      	movs	r3, r0
 8005dee:	b299      	uxth	r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2268      	movs	r2, #104	; 0x68
 8005df4:	5299      	strh	r1, [r3, r2]
}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b005      	add	sp, #20
 8005dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	080080a0 	.word	0x080080a0
 8005e04:	080080a8 	.word	0x080080a8

08005e08 <sniprintf>:
 8005e08:	b40c      	push	{r2, r3}
 8005e0a:	b530      	push	{r4, r5, lr}
 8005e0c:	4b17      	ldr	r3, [pc, #92]	; (8005e6c <sniprintf+0x64>)
 8005e0e:	000c      	movs	r4, r1
 8005e10:	681d      	ldr	r5, [r3, #0]
 8005e12:	b09d      	sub	sp, #116	; 0x74
 8005e14:	2900      	cmp	r1, #0
 8005e16:	da08      	bge.n	8005e2a <sniprintf+0x22>
 8005e18:	238b      	movs	r3, #139	; 0x8b
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	4240      	negs	r0, r0
 8005e20:	b01d      	add	sp, #116	; 0x74
 8005e22:	bc30      	pop	{r4, r5}
 8005e24:	bc08      	pop	{r3}
 8005e26:	b002      	add	sp, #8
 8005e28:	4718      	bx	r3
 8005e2a:	2382      	movs	r3, #130	; 0x82
 8005e2c:	466a      	mov	r2, sp
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	8293      	strh	r3, [r2, #20]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9002      	str	r0, [sp, #8]
 8005e36:	9006      	str	r0, [sp, #24]
 8005e38:	4299      	cmp	r1, r3
 8005e3a:	d000      	beq.n	8005e3e <sniprintf+0x36>
 8005e3c:	1e4b      	subs	r3, r1, #1
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	9307      	str	r3, [sp, #28]
 8005e42:	2301      	movs	r3, #1
 8005e44:	466a      	mov	r2, sp
 8005e46:	425b      	negs	r3, r3
 8005e48:	82d3      	strh	r3, [r2, #22]
 8005e4a:	0028      	movs	r0, r5
 8005e4c:	ab21      	add	r3, sp, #132	; 0x84
 8005e4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e50:	a902      	add	r1, sp, #8
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	f000 f9ca 	bl	80061ec <_svfiprintf_r>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	da01      	bge.n	8005e60 <sniprintf+0x58>
 8005e5c:	238b      	movs	r3, #139	; 0x8b
 8005e5e:	602b      	str	r3, [r5, #0]
 8005e60:	2c00      	cmp	r4, #0
 8005e62:	d0dd      	beq.n	8005e20 <sniprintf+0x18>
 8005e64:	2200      	movs	r2, #0
 8005e66:	9b02      	ldr	r3, [sp, #8]
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	e7d9      	b.n	8005e20 <sniprintf+0x18>
 8005e6c:	20000058 	.word	0x20000058

08005e70 <siprintf>:
 8005e70:	b40e      	push	{r1, r2, r3}
 8005e72:	b500      	push	{lr}
 8005e74:	490b      	ldr	r1, [pc, #44]	; (8005ea4 <siprintf+0x34>)
 8005e76:	b09c      	sub	sp, #112	; 0x70
 8005e78:	ab1d      	add	r3, sp, #116	; 0x74
 8005e7a:	9002      	str	r0, [sp, #8]
 8005e7c:	9006      	str	r0, [sp, #24]
 8005e7e:	9107      	str	r1, [sp, #28]
 8005e80:	9104      	str	r1, [sp, #16]
 8005e82:	4809      	ldr	r0, [pc, #36]	; (8005ea8 <siprintf+0x38>)
 8005e84:	4909      	ldr	r1, [pc, #36]	; (8005eac <siprintf+0x3c>)
 8005e86:	cb04      	ldmia	r3!, {r2}
 8005e88:	9105      	str	r1, [sp, #20]
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	a902      	add	r1, sp, #8
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	f000 f9ac 	bl	80061ec <_svfiprintf_r>
 8005e94:	2200      	movs	r2, #0
 8005e96:	9b02      	ldr	r3, [sp, #8]
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	b01c      	add	sp, #112	; 0x70
 8005e9c:	bc08      	pop	{r3}
 8005e9e:	b003      	add	sp, #12
 8005ea0:	4718      	bx	r3
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	7fffffff 	.word	0x7fffffff
 8005ea8:	20000058 	.word	0x20000058
 8005eac:	ffff0208 	.word	0xffff0208

08005eb0 <memset>:
 8005eb0:	0003      	movs	r3, r0
 8005eb2:	1882      	adds	r2, r0, r2
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d100      	bne.n	8005eba <memset+0xa>
 8005eb8:	4770      	bx	lr
 8005eba:	7019      	strb	r1, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	e7f9      	b.n	8005eb4 <memset+0x4>

08005ec0 <__errno>:
 8005ec0:	4b01      	ldr	r3, [pc, #4]	; (8005ec8 <__errno+0x8>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	4770      	bx	lr
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	20000058 	.word	0x20000058

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	2600      	movs	r6, #0
 8005ed0:	4c0c      	ldr	r4, [pc, #48]	; (8005f04 <__libc_init_array+0x38>)
 8005ed2:	4d0d      	ldr	r5, [pc, #52]	; (8005f08 <__libc_init_array+0x3c>)
 8005ed4:	1b64      	subs	r4, r4, r5
 8005ed6:	10a4      	asrs	r4, r4, #2
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	2600      	movs	r6, #0
 8005ede:	f000 fc6d 	bl	80067bc <_init>
 8005ee2:	4c0a      	ldr	r4, [pc, #40]	; (8005f0c <__libc_init_array+0x40>)
 8005ee4:	4d0a      	ldr	r5, [pc, #40]	; (8005f10 <__libc_init_array+0x44>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	00b3      	lsls	r3, r6, #2
 8005ef2:	58eb      	ldr	r3, [r5, r3]
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	00b3      	lsls	r3, r6, #2
 8005efc:	58eb      	ldr	r3, [r5, r3]
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	080080ec 	.word	0x080080ec
 8005f08:	080080ec 	.word	0x080080ec
 8005f0c:	080080f0 	.word	0x080080f0
 8005f10:	080080ec 	.word	0x080080ec

08005f14 <__retarget_lock_acquire_recursive>:
 8005f14:	4770      	bx	lr

08005f16 <__retarget_lock_release_recursive>:
 8005f16:	4770      	bx	lr

08005f18 <memcpy>:
 8005f18:	2300      	movs	r3, #0
 8005f1a:	b510      	push	{r4, lr}
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d100      	bne.n	8005f22 <memcpy+0xa>
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	5ccc      	ldrb	r4, [r1, r3]
 8005f24:	54c4      	strb	r4, [r0, r3]
 8005f26:	3301      	adds	r3, #1
 8005f28:	e7f8      	b.n	8005f1c <memcpy+0x4>
	...

08005f2c <_free_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	0005      	movs	r5, r0
 8005f30:	2900      	cmp	r1, #0
 8005f32:	d010      	beq.n	8005f56 <_free_r+0x2a>
 8005f34:	1f0c      	subs	r4, r1, #4
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da00      	bge.n	8005f3e <_free_r+0x12>
 8005f3c:	18e4      	adds	r4, r4, r3
 8005f3e:	0028      	movs	r0, r5
 8005f40:	f000 f8e2 	bl	8006108 <__malloc_lock>
 8005f44:	4a1d      	ldr	r2, [pc, #116]	; (8005fbc <_free_r+0x90>)
 8005f46:	6813      	ldr	r3, [r2, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <_free_r+0x2c>
 8005f4c:	6063      	str	r3, [r4, #4]
 8005f4e:	6014      	str	r4, [r2, #0]
 8005f50:	0028      	movs	r0, r5
 8005f52:	f000 f8e1 	bl	8006118 <__malloc_unlock>
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d908      	bls.n	8005f6e <_free_r+0x42>
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	1821      	adds	r1, r4, r0
 8005f60:	428b      	cmp	r3, r1
 8005f62:	d1f3      	bne.n	8005f4c <_free_r+0x20>
 8005f64:	6819      	ldr	r1, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	1809      	adds	r1, r1, r0
 8005f6a:	6021      	str	r1, [r4, #0]
 8005f6c:	e7ee      	b.n	8005f4c <_free_r+0x20>
 8005f6e:	001a      	movs	r2, r3
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <_free_r+0x4e>
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	d9f9      	bls.n	8005f6e <_free_r+0x42>
 8005f7a:	6811      	ldr	r1, [r2, #0]
 8005f7c:	1850      	adds	r0, r2, r1
 8005f7e:	42a0      	cmp	r0, r4
 8005f80:	d10b      	bne.n	8005f9a <_free_r+0x6e>
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	1809      	adds	r1, r1, r0
 8005f86:	1850      	adds	r0, r2, r1
 8005f88:	6011      	str	r1, [r2, #0]
 8005f8a:	4283      	cmp	r3, r0
 8005f8c:	d1e0      	bne.n	8005f50 <_free_r+0x24>
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	1841      	adds	r1, r0, r1
 8005f94:	6011      	str	r1, [r2, #0]
 8005f96:	6053      	str	r3, [r2, #4]
 8005f98:	e7da      	b.n	8005f50 <_free_r+0x24>
 8005f9a:	42a0      	cmp	r0, r4
 8005f9c:	d902      	bls.n	8005fa4 <_free_r+0x78>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	e7d5      	b.n	8005f50 <_free_r+0x24>
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	1821      	adds	r1, r4, r0
 8005fa8:	428b      	cmp	r3, r1
 8005faa:	d103      	bne.n	8005fb4 <_free_r+0x88>
 8005fac:	6819      	ldr	r1, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	1809      	adds	r1, r1, r0
 8005fb2:	6021      	str	r1, [r4, #0]
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	6054      	str	r4, [r2, #4]
 8005fb8:	e7ca      	b.n	8005f50 <_free_r+0x24>
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	2000045c 	.word	0x2000045c

08005fc0 <sbrk_aligned>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	4e0f      	ldr	r6, [pc, #60]	; (8006000 <sbrk_aligned+0x40>)
 8005fc4:	000d      	movs	r5, r1
 8005fc6:	6831      	ldr	r1, [r6, #0]
 8005fc8:	0004      	movs	r4, r0
 8005fca:	2900      	cmp	r1, #0
 8005fcc:	d102      	bne.n	8005fd4 <sbrk_aligned+0x14>
 8005fce:	f000 fba1 	bl	8006714 <_sbrk_r>
 8005fd2:	6030      	str	r0, [r6, #0]
 8005fd4:	0029      	movs	r1, r5
 8005fd6:	0020      	movs	r0, r4
 8005fd8:	f000 fb9c 	bl	8006714 <_sbrk_r>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d00a      	beq.n	8005ff6 <sbrk_aligned+0x36>
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	1cc5      	adds	r5, r0, #3
 8005fe4:	439d      	bics	r5, r3
 8005fe6:	42a8      	cmp	r0, r5
 8005fe8:	d007      	beq.n	8005ffa <sbrk_aligned+0x3a>
 8005fea:	1a29      	subs	r1, r5, r0
 8005fec:	0020      	movs	r0, r4
 8005fee:	f000 fb91 	bl	8006714 <_sbrk_r>
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d101      	bne.n	8005ffa <sbrk_aligned+0x3a>
 8005ff6:	2501      	movs	r5, #1
 8005ff8:	426d      	negs	r5, r5
 8005ffa:	0028      	movs	r0, r5
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	20000460 	.word	0x20000460

08006004 <_malloc_r>:
 8006004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006006:	2203      	movs	r2, #3
 8006008:	1ccb      	adds	r3, r1, #3
 800600a:	4393      	bics	r3, r2
 800600c:	3308      	adds	r3, #8
 800600e:	0006      	movs	r6, r0
 8006010:	001f      	movs	r7, r3
 8006012:	2b0c      	cmp	r3, #12
 8006014:	d238      	bcs.n	8006088 <_malloc_r+0x84>
 8006016:	270c      	movs	r7, #12
 8006018:	42b9      	cmp	r1, r7
 800601a:	d837      	bhi.n	800608c <_malloc_r+0x88>
 800601c:	0030      	movs	r0, r6
 800601e:	f000 f873 	bl	8006108 <__malloc_lock>
 8006022:	4b38      	ldr	r3, [pc, #224]	; (8006104 <_malloc_r+0x100>)
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	001c      	movs	r4, r3
 800602a:	2c00      	cmp	r4, #0
 800602c:	d133      	bne.n	8006096 <_malloc_r+0x92>
 800602e:	0039      	movs	r1, r7
 8006030:	0030      	movs	r0, r6
 8006032:	f7ff ffc5 	bl	8005fc0 <sbrk_aligned>
 8006036:	0004      	movs	r4, r0
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d15e      	bne.n	80060fa <_malloc_r+0xf6>
 800603c:	9b00      	ldr	r3, [sp, #0]
 800603e:	681c      	ldr	r4, [r3, #0]
 8006040:	0025      	movs	r5, r4
 8006042:	2d00      	cmp	r5, #0
 8006044:	d14e      	bne.n	80060e4 <_malloc_r+0xe0>
 8006046:	2c00      	cmp	r4, #0
 8006048:	d051      	beq.n	80060ee <_malloc_r+0xea>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	0029      	movs	r1, r5
 800604e:	18e3      	adds	r3, r4, r3
 8006050:	0030      	movs	r0, r6
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	f000 fb5e 	bl	8006714 <_sbrk_r>
 8006058:	9b01      	ldr	r3, [sp, #4]
 800605a:	4283      	cmp	r3, r0
 800605c:	d147      	bne.n	80060ee <_malloc_r+0xea>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	0030      	movs	r0, r6
 8006062:	1aff      	subs	r7, r7, r3
 8006064:	0039      	movs	r1, r7
 8006066:	f7ff ffab 	bl	8005fc0 <sbrk_aligned>
 800606a:	3001      	adds	r0, #1
 800606c:	d03f      	beq.n	80060ee <_malloc_r+0xea>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	19db      	adds	r3, r3, r7
 8006072:	6023      	str	r3, [r4, #0]
 8006074:	9b00      	ldr	r3, [sp, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d040      	beq.n	80060fe <_malloc_r+0xfa>
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	42a2      	cmp	r2, r4
 8006080:	d133      	bne.n	80060ea <_malloc_r+0xe6>
 8006082:	2200      	movs	r2, #0
 8006084:	605a      	str	r2, [r3, #4]
 8006086:	e014      	b.n	80060b2 <_malloc_r+0xae>
 8006088:	2b00      	cmp	r3, #0
 800608a:	dac5      	bge.n	8006018 <_malloc_r+0x14>
 800608c:	230c      	movs	r3, #12
 800608e:	2500      	movs	r5, #0
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	0028      	movs	r0, r5
 8006094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006096:	6821      	ldr	r1, [r4, #0]
 8006098:	1bc9      	subs	r1, r1, r7
 800609a:	d420      	bmi.n	80060de <_malloc_r+0xda>
 800609c:	290b      	cmp	r1, #11
 800609e:	d918      	bls.n	80060d2 <_malloc_r+0xce>
 80060a0:	19e2      	adds	r2, r4, r7
 80060a2:	6027      	str	r7, [r4, #0]
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	d112      	bne.n	80060ce <_malloc_r+0xca>
 80060a8:	9b00      	ldr	r3, [sp, #0]
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	6863      	ldr	r3, [r4, #4]
 80060ae:	6011      	str	r1, [r2, #0]
 80060b0:	6053      	str	r3, [r2, #4]
 80060b2:	0030      	movs	r0, r6
 80060b4:	0025      	movs	r5, r4
 80060b6:	f000 f82f 	bl	8006118 <__malloc_unlock>
 80060ba:	2207      	movs	r2, #7
 80060bc:	350b      	adds	r5, #11
 80060be:	1d23      	adds	r3, r4, #4
 80060c0:	4395      	bics	r5, r2
 80060c2:	1aea      	subs	r2, r5, r3
 80060c4:	429d      	cmp	r5, r3
 80060c6:	d0e4      	beq.n	8006092 <_malloc_r+0x8e>
 80060c8:	1b5b      	subs	r3, r3, r5
 80060ca:	50a3      	str	r3, [r4, r2]
 80060cc:	e7e1      	b.n	8006092 <_malloc_r+0x8e>
 80060ce:	605a      	str	r2, [r3, #4]
 80060d0:	e7ec      	b.n	80060ac <_malloc_r+0xa8>
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	d1d5      	bne.n	8006084 <_malloc_r+0x80>
 80060d8:	9b00      	ldr	r3, [sp, #0]
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e7e9      	b.n	80060b2 <_malloc_r+0xae>
 80060de:	0023      	movs	r3, r4
 80060e0:	6864      	ldr	r4, [r4, #4]
 80060e2:	e7a2      	b.n	800602a <_malloc_r+0x26>
 80060e4:	002c      	movs	r4, r5
 80060e6:	686d      	ldr	r5, [r5, #4]
 80060e8:	e7ab      	b.n	8006042 <_malloc_r+0x3e>
 80060ea:	0013      	movs	r3, r2
 80060ec:	e7c4      	b.n	8006078 <_malloc_r+0x74>
 80060ee:	230c      	movs	r3, #12
 80060f0:	0030      	movs	r0, r6
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	f000 f810 	bl	8006118 <__malloc_unlock>
 80060f8:	e7cb      	b.n	8006092 <_malloc_r+0x8e>
 80060fa:	6027      	str	r7, [r4, #0]
 80060fc:	e7d9      	b.n	80060b2 <_malloc_r+0xae>
 80060fe:	605b      	str	r3, [r3, #4]
 8006100:	deff      	udf	#255	; 0xff
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	2000045c 	.word	0x2000045c

08006108 <__malloc_lock>:
 8006108:	b510      	push	{r4, lr}
 800610a:	4802      	ldr	r0, [pc, #8]	; (8006114 <__malloc_lock+0xc>)
 800610c:	f7ff ff02 	bl	8005f14 <__retarget_lock_acquire_recursive>
 8006110:	bd10      	pop	{r4, pc}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	20000458 	.word	0x20000458

08006118 <__malloc_unlock>:
 8006118:	b510      	push	{r4, lr}
 800611a:	4802      	ldr	r0, [pc, #8]	; (8006124 <__malloc_unlock+0xc>)
 800611c:	f7ff fefb 	bl	8005f16 <__retarget_lock_release_recursive>
 8006120:	bd10      	pop	{r4, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	20000458 	.word	0x20000458

08006128 <__ssputs_r>:
 8006128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612a:	b085      	sub	sp, #20
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	9203      	str	r2, [sp, #12]
 8006130:	688e      	ldr	r6, [r1, #8]
 8006132:	9a01      	ldr	r2, [sp, #4]
 8006134:	0007      	movs	r7, r0
 8006136:	000c      	movs	r4, r1
 8006138:	680b      	ldr	r3, [r1, #0]
 800613a:	4296      	cmp	r6, r2
 800613c:	d831      	bhi.n	80061a2 <__ssputs_r+0x7a>
 800613e:	898a      	ldrh	r2, [r1, #12]
 8006140:	2190      	movs	r1, #144	; 0x90
 8006142:	00c9      	lsls	r1, r1, #3
 8006144:	420a      	tst	r2, r1
 8006146:	d029      	beq.n	800619c <__ssputs_r+0x74>
 8006148:	2003      	movs	r0, #3
 800614a:	6921      	ldr	r1, [r4, #16]
 800614c:	1a5b      	subs	r3, r3, r1
 800614e:	9302      	str	r3, [sp, #8]
 8006150:	6963      	ldr	r3, [r4, #20]
 8006152:	4343      	muls	r3, r0
 8006154:	0fdd      	lsrs	r5, r3, #31
 8006156:	18ed      	adds	r5, r5, r3
 8006158:	9b01      	ldr	r3, [sp, #4]
 800615a:	9802      	ldr	r0, [sp, #8]
 800615c:	3301      	adds	r3, #1
 800615e:	181b      	adds	r3, r3, r0
 8006160:	106d      	asrs	r5, r5, #1
 8006162:	42ab      	cmp	r3, r5
 8006164:	d900      	bls.n	8006168 <__ssputs_r+0x40>
 8006166:	001d      	movs	r5, r3
 8006168:	0552      	lsls	r2, r2, #21
 800616a:	d529      	bpl.n	80061c0 <__ssputs_r+0x98>
 800616c:	0029      	movs	r1, r5
 800616e:	0038      	movs	r0, r7
 8006170:	f7ff ff48 	bl	8006004 <_malloc_r>
 8006174:	1e06      	subs	r6, r0, #0
 8006176:	d02d      	beq.n	80061d4 <__ssputs_r+0xac>
 8006178:	9a02      	ldr	r2, [sp, #8]
 800617a:	6921      	ldr	r1, [r4, #16]
 800617c:	f7ff fecc 	bl	8005f18 <memcpy>
 8006180:	89a2      	ldrh	r2, [r4, #12]
 8006182:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <__ssputs_r+0xc0>)
 8006184:	401a      	ands	r2, r3
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	4313      	orrs	r3, r2
 800618a:	81a3      	strh	r3, [r4, #12]
 800618c:	9b02      	ldr	r3, [sp, #8]
 800618e:	6126      	str	r6, [r4, #16]
 8006190:	18f6      	adds	r6, r6, r3
 8006192:	6026      	str	r6, [r4, #0]
 8006194:	6165      	str	r5, [r4, #20]
 8006196:	9e01      	ldr	r6, [sp, #4]
 8006198:	1aed      	subs	r5, r5, r3
 800619a:	60a5      	str	r5, [r4, #8]
 800619c:	9b01      	ldr	r3, [sp, #4]
 800619e:	429e      	cmp	r6, r3
 80061a0:	d900      	bls.n	80061a4 <__ssputs_r+0x7c>
 80061a2:	9e01      	ldr	r6, [sp, #4]
 80061a4:	0032      	movs	r2, r6
 80061a6:	9903      	ldr	r1, [sp, #12]
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	f000 fa9f 	bl	80066ec <memmove>
 80061ae:	2000      	movs	r0, #0
 80061b0:	68a3      	ldr	r3, [r4, #8]
 80061b2:	1b9b      	subs	r3, r3, r6
 80061b4:	60a3      	str	r3, [r4, #8]
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	199b      	adds	r3, r3, r6
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	b005      	add	sp, #20
 80061be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c0:	002a      	movs	r2, r5
 80061c2:	0038      	movs	r0, r7
 80061c4:	f000 fac3 	bl	800674e <_realloc_r>
 80061c8:	1e06      	subs	r6, r0, #0
 80061ca:	d1df      	bne.n	800618c <__ssputs_r+0x64>
 80061cc:	0038      	movs	r0, r7
 80061ce:	6921      	ldr	r1, [r4, #16]
 80061d0:	f7ff feac 	bl	8005f2c <_free_r>
 80061d4:	230c      	movs	r3, #12
 80061d6:	2001      	movs	r0, #1
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	89a2      	ldrh	r2, [r4, #12]
 80061dc:	3334      	adds	r3, #52	; 0x34
 80061de:	4313      	orrs	r3, r2
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	4240      	negs	r0, r0
 80061e4:	e7ea      	b.n	80061bc <__ssputs_r+0x94>
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	fffffb7f 	.word	0xfffffb7f

080061ec <_svfiprintf_r>:
 80061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ee:	b0a1      	sub	sp, #132	; 0x84
 80061f0:	9003      	str	r0, [sp, #12]
 80061f2:	001d      	movs	r5, r3
 80061f4:	898b      	ldrh	r3, [r1, #12]
 80061f6:	000f      	movs	r7, r1
 80061f8:	0016      	movs	r6, r2
 80061fa:	061b      	lsls	r3, r3, #24
 80061fc:	d511      	bpl.n	8006222 <_svfiprintf_r+0x36>
 80061fe:	690b      	ldr	r3, [r1, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10e      	bne.n	8006222 <_svfiprintf_r+0x36>
 8006204:	2140      	movs	r1, #64	; 0x40
 8006206:	f7ff fefd 	bl	8006004 <_malloc_r>
 800620a:	6038      	str	r0, [r7, #0]
 800620c:	6138      	str	r0, [r7, #16]
 800620e:	2800      	cmp	r0, #0
 8006210:	d105      	bne.n	800621e <_svfiprintf_r+0x32>
 8006212:	230c      	movs	r3, #12
 8006214:	9a03      	ldr	r2, [sp, #12]
 8006216:	3801      	subs	r0, #1
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	b021      	add	sp, #132	; 0x84
 800621c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	2300      	movs	r3, #0
 8006224:	ac08      	add	r4, sp, #32
 8006226:	6163      	str	r3, [r4, #20]
 8006228:	3320      	adds	r3, #32
 800622a:	7663      	strb	r3, [r4, #25]
 800622c:	3310      	adds	r3, #16
 800622e:	76a3      	strb	r3, [r4, #26]
 8006230:	9507      	str	r5, [sp, #28]
 8006232:	0035      	movs	r5, r6
 8006234:	782b      	ldrb	r3, [r5, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <_svfiprintf_r+0x52>
 800623a:	2b25      	cmp	r3, #37	; 0x25
 800623c:	d148      	bne.n	80062d0 <_svfiprintf_r+0xe4>
 800623e:	1bab      	subs	r3, r5, r6
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	42b5      	cmp	r5, r6
 8006244:	d00b      	beq.n	800625e <_svfiprintf_r+0x72>
 8006246:	0032      	movs	r2, r6
 8006248:	0039      	movs	r1, r7
 800624a:	9803      	ldr	r0, [sp, #12]
 800624c:	f7ff ff6c 	bl	8006128 <__ssputs_r>
 8006250:	3001      	adds	r0, #1
 8006252:	d100      	bne.n	8006256 <_svfiprintf_r+0x6a>
 8006254:	e0af      	b.n	80063b6 <_svfiprintf_r+0x1ca>
 8006256:	6963      	ldr	r3, [r4, #20]
 8006258:	9a05      	ldr	r2, [sp, #20]
 800625a:	189b      	adds	r3, r3, r2
 800625c:	6163      	str	r3, [r4, #20]
 800625e:	782b      	ldrb	r3, [r5, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d100      	bne.n	8006266 <_svfiprintf_r+0x7a>
 8006264:	e0a7      	b.n	80063b6 <_svfiprintf_r+0x1ca>
 8006266:	2201      	movs	r2, #1
 8006268:	2300      	movs	r3, #0
 800626a:	4252      	negs	r2, r2
 800626c:	6062      	str	r2, [r4, #4]
 800626e:	a904      	add	r1, sp, #16
 8006270:	3254      	adds	r2, #84	; 0x54
 8006272:	1852      	adds	r2, r2, r1
 8006274:	1c6e      	adds	r6, r5, #1
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	60e3      	str	r3, [r4, #12]
 800627a:	60a3      	str	r3, [r4, #8]
 800627c:	7013      	strb	r3, [r2, #0]
 800627e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006280:	4b55      	ldr	r3, [pc, #340]	; (80063d8 <_svfiprintf_r+0x1ec>)
 8006282:	2205      	movs	r2, #5
 8006284:	0018      	movs	r0, r3
 8006286:	7831      	ldrb	r1, [r6, #0]
 8006288:	9305      	str	r3, [sp, #20]
 800628a:	f000 fa55 	bl	8006738 <memchr>
 800628e:	1c75      	adds	r5, r6, #1
 8006290:	2800      	cmp	r0, #0
 8006292:	d11f      	bne.n	80062d4 <_svfiprintf_r+0xe8>
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	06d3      	lsls	r3, r2, #27
 8006298:	d504      	bpl.n	80062a4 <_svfiprintf_r+0xb8>
 800629a:	2353      	movs	r3, #83	; 0x53
 800629c:	a904      	add	r1, sp, #16
 800629e:	185b      	adds	r3, r3, r1
 80062a0:	2120      	movs	r1, #32
 80062a2:	7019      	strb	r1, [r3, #0]
 80062a4:	0713      	lsls	r3, r2, #28
 80062a6:	d504      	bpl.n	80062b2 <_svfiprintf_r+0xc6>
 80062a8:	2353      	movs	r3, #83	; 0x53
 80062aa:	a904      	add	r1, sp, #16
 80062ac:	185b      	adds	r3, r3, r1
 80062ae:	212b      	movs	r1, #43	; 0x2b
 80062b0:	7019      	strb	r1, [r3, #0]
 80062b2:	7833      	ldrb	r3, [r6, #0]
 80062b4:	2b2a      	cmp	r3, #42	; 0x2a
 80062b6:	d016      	beq.n	80062e6 <_svfiprintf_r+0xfa>
 80062b8:	0035      	movs	r5, r6
 80062ba:	2100      	movs	r1, #0
 80062bc:	200a      	movs	r0, #10
 80062be:	68e3      	ldr	r3, [r4, #12]
 80062c0:	782a      	ldrb	r2, [r5, #0]
 80062c2:	1c6e      	adds	r6, r5, #1
 80062c4:	3a30      	subs	r2, #48	; 0x30
 80062c6:	2a09      	cmp	r2, #9
 80062c8:	d94e      	bls.n	8006368 <_svfiprintf_r+0x17c>
 80062ca:	2900      	cmp	r1, #0
 80062cc:	d111      	bne.n	80062f2 <_svfiprintf_r+0x106>
 80062ce:	e017      	b.n	8006300 <_svfiprintf_r+0x114>
 80062d0:	3501      	adds	r5, #1
 80062d2:	e7af      	b.n	8006234 <_svfiprintf_r+0x48>
 80062d4:	9b05      	ldr	r3, [sp, #20]
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	1ac0      	subs	r0, r0, r3
 80062da:	2301      	movs	r3, #1
 80062dc:	4083      	lsls	r3, r0
 80062de:	4313      	orrs	r3, r2
 80062e0:	002e      	movs	r6, r5
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	e7cc      	b.n	8006280 <_svfiprintf_r+0x94>
 80062e6:	9b07      	ldr	r3, [sp, #28]
 80062e8:	1d19      	adds	r1, r3, #4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	9107      	str	r1, [sp, #28]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	db01      	blt.n	80062f6 <_svfiprintf_r+0x10a>
 80062f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062f4:	e004      	b.n	8006300 <_svfiprintf_r+0x114>
 80062f6:	425b      	negs	r3, r3
 80062f8:	60e3      	str	r3, [r4, #12]
 80062fa:	2302      	movs	r3, #2
 80062fc:	4313      	orrs	r3, r2
 80062fe:	6023      	str	r3, [r4, #0]
 8006300:	782b      	ldrb	r3, [r5, #0]
 8006302:	2b2e      	cmp	r3, #46	; 0x2e
 8006304:	d10a      	bne.n	800631c <_svfiprintf_r+0x130>
 8006306:	786b      	ldrb	r3, [r5, #1]
 8006308:	2b2a      	cmp	r3, #42	; 0x2a
 800630a:	d135      	bne.n	8006378 <_svfiprintf_r+0x18c>
 800630c:	9b07      	ldr	r3, [sp, #28]
 800630e:	3502      	adds	r5, #2
 8006310:	1d1a      	adds	r2, r3, #4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	9207      	str	r2, [sp, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	db2b      	blt.n	8006372 <_svfiprintf_r+0x186>
 800631a:	9309      	str	r3, [sp, #36]	; 0x24
 800631c:	4e2f      	ldr	r6, [pc, #188]	; (80063dc <_svfiprintf_r+0x1f0>)
 800631e:	2203      	movs	r2, #3
 8006320:	0030      	movs	r0, r6
 8006322:	7829      	ldrb	r1, [r5, #0]
 8006324:	f000 fa08 	bl	8006738 <memchr>
 8006328:	2800      	cmp	r0, #0
 800632a:	d006      	beq.n	800633a <_svfiprintf_r+0x14e>
 800632c:	2340      	movs	r3, #64	; 0x40
 800632e:	1b80      	subs	r0, r0, r6
 8006330:	4083      	lsls	r3, r0
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	3501      	adds	r5, #1
 8006336:	4313      	orrs	r3, r2
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	7829      	ldrb	r1, [r5, #0]
 800633c:	2206      	movs	r2, #6
 800633e:	4828      	ldr	r0, [pc, #160]	; (80063e0 <_svfiprintf_r+0x1f4>)
 8006340:	1c6e      	adds	r6, r5, #1
 8006342:	7621      	strb	r1, [r4, #24]
 8006344:	f000 f9f8 	bl	8006738 <memchr>
 8006348:	2800      	cmp	r0, #0
 800634a:	d03c      	beq.n	80063c6 <_svfiprintf_r+0x1da>
 800634c:	4b25      	ldr	r3, [pc, #148]	; (80063e4 <_svfiprintf_r+0x1f8>)
 800634e:	2b00      	cmp	r3, #0
 8006350:	d125      	bne.n	800639e <_svfiprintf_r+0x1b2>
 8006352:	2207      	movs	r2, #7
 8006354:	9b07      	ldr	r3, [sp, #28]
 8006356:	3307      	adds	r3, #7
 8006358:	4393      	bics	r3, r2
 800635a:	3308      	adds	r3, #8
 800635c:	9307      	str	r3, [sp, #28]
 800635e:	6963      	ldr	r3, [r4, #20]
 8006360:	9a04      	ldr	r2, [sp, #16]
 8006362:	189b      	adds	r3, r3, r2
 8006364:	6163      	str	r3, [r4, #20]
 8006366:	e764      	b.n	8006232 <_svfiprintf_r+0x46>
 8006368:	4343      	muls	r3, r0
 800636a:	0035      	movs	r5, r6
 800636c:	2101      	movs	r1, #1
 800636e:	189b      	adds	r3, r3, r2
 8006370:	e7a6      	b.n	80062c0 <_svfiprintf_r+0xd4>
 8006372:	2301      	movs	r3, #1
 8006374:	425b      	negs	r3, r3
 8006376:	e7d0      	b.n	800631a <_svfiprintf_r+0x12e>
 8006378:	2300      	movs	r3, #0
 800637a:	200a      	movs	r0, #10
 800637c:	001a      	movs	r2, r3
 800637e:	3501      	adds	r5, #1
 8006380:	6063      	str	r3, [r4, #4]
 8006382:	7829      	ldrb	r1, [r5, #0]
 8006384:	1c6e      	adds	r6, r5, #1
 8006386:	3930      	subs	r1, #48	; 0x30
 8006388:	2909      	cmp	r1, #9
 800638a:	d903      	bls.n	8006394 <_svfiprintf_r+0x1a8>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0c5      	beq.n	800631c <_svfiprintf_r+0x130>
 8006390:	9209      	str	r2, [sp, #36]	; 0x24
 8006392:	e7c3      	b.n	800631c <_svfiprintf_r+0x130>
 8006394:	4342      	muls	r2, r0
 8006396:	0035      	movs	r5, r6
 8006398:	2301      	movs	r3, #1
 800639a:	1852      	adds	r2, r2, r1
 800639c:	e7f1      	b.n	8006382 <_svfiprintf_r+0x196>
 800639e:	aa07      	add	r2, sp, #28
 80063a0:	9200      	str	r2, [sp, #0]
 80063a2:	0021      	movs	r1, r4
 80063a4:	003a      	movs	r2, r7
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <_svfiprintf_r+0x1fc>)
 80063a8:	9803      	ldr	r0, [sp, #12]
 80063aa:	e000      	b.n	80063ae <_svfiprintf_r+0x1c2>
 80063ac:	bf00      	nop
 80063ae:	9004      	str	r0, [sp, #16]
 80063b0:	9b04      	ldr	r3, [sp, #16]
 80063b2:	3301      	adds	r3, #1
 80063b4:	d1d3      	bne.n	800635e <_svfiprintf_r+0x172>
 80063b6:	89bb      	ldrh	r3, [r7, #12]
 80063b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063ba:	065b      	lsls	r3, r3, #25
 80063bc:	d400      	bmi.n	80063c0 <_svfiprintf_r+0x1d4>
 80063be:	e72c      	b.n	800621a <_svfiprintf_r+0x2e>
 80063c0:	2001      	movs	r0, #1
 80063c2:	4240      	negs	r0, r0
 80063c4:	e729      	b.n	800621a <_svfiprintf_r+0x2e>
 80063c6:	aa07      	add	r2, sp, #28
 80063c8:	9200      	str	r2, [sp, #0]
 80063ca:	0021      	movs	r1, r4
 80063cc:	003a      	movs	r2, r7
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <_svfiprintf_r+0x1fc>)
 80063d0:	9803      	ldr	r0, [sp, #12]
 80063d2:	f000 f87b 	bl	80064cc <_printf_i>
 80063d6:	e7ea      	b.n	80063ae <_svfiprintf_r+0x1c2>
 80063d8:	080080b0 	.word	0x080080b0
 80063dc:	080080b6 	.word	0x080080b6
 80063e0:	080080ba 	.word	0x080080ba
 80063e4:	00000000 	.word	0x00000000
 80063e8:	08006129 	.word	0x08006129

080063ec <_printf_common>:
 80063ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ee:	0016      	movs	r6, r2
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	688a      	ldr	r2, [r1, #8]
 80063f4:	690b      	ldr	r3, [r1, #16]
 80063f6:	000c      	movs	r4, r1
 80063f8:	9000      	str	r0, [sp, #0]
 80063fa:	4293      	cmp	r3, r2
 80063fc:	da00      	bge.n	8006400 <_printf_common+0x14>
 80063fe:	0013      	movs	r3, r2
 8006400:	0022      	movs	r2, r4
 8006402:	6033      	str	r3, [r6, #0]
 8006404:	3243      	adds	r2, #67	; 0x43
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	2a00      	cmp	r2, #0
 800640a:	d001      	beq.n	8006410 <_printf_common+0x24>
 800640c:	3301      	adds	r3, #1
 800640e:	6033      	str	r3, [r6, #0]
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	069b      	lsls	r3, r3, #26
 8006414:	d502      	bpl.n	800641c <_printf_common+0x30>
 8006416:	6833      	ldr	r3, [r6, #0]
 8006418:	3302      	adds	r3, #2
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	2306      	movs	r3, #6
 8006420:	0015      	movs	r5, r2
 8006422:	401d      	ands	r5, r3
 8006424:	421a      	tst	r2, r3
 8006426:	d027      	beq.n	8006478 <_printf_common+0x8c>
 8006428:	0023      	movs	r3, r4
 800642a:	3343      	adds	r3, #67	; 0x43
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	1e5a      	subs	r2, r3, #1
 8006430:	4193      	sbcs	r3, r2
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	0692      	lsls	r2, r2, #26
 8006436:	d430      	bmi.n	800649a <_printf_common+0xae>
 8006438:	0022      	movs	r2, r4
 800643a:	9901      	ldr	r1, [sp, #4]
 800643c:	9800      	ldr	r0, [sp, #0]
 800643e:	9d08      	ldr	r5, [sp, #32]
 8006440:	3243      	adds	r2, #67	; 0x43
 8006442:	47a8      	blx	r5
 8006444:	3001      	adds	r0, #1
 8006446:	d025      	beq.n	8006494 <_printf_common+0xa8>
 8006448:	2206      	movs	r2, #6
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	2500      	movs	r5, #0
 800644e:	4013      	ands	r3, r2
 8006450:	2b04      	cmp	r3, #4
 8006452:	d105      	bne.n	8006460 <_printf_common+0x74>
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	68e5      	ldr	r5, [r4, #12]
 8006458:	1aed      	subs	r5, r5, r3
 800645a:	43eb      	mvns	r3, r5
 800645c:	17db      	asrs	r3, r3, #31
 800645e:	401d      	ands	r5, r3
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	6922      	ldr	r2, [r4, #16]
 8006464:	4293      	cmp	r3, r2
 8006466:	dd01      	ble.n	800646c <_printf_common+0x80>
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	18ed      	adds	r5, r5, r3
 800646c:	2600      	movs	r6, #0
 800646e:	42b5      	cmp	r5, r6
 8006470:	d120      	bne.n	80064b4 <_printf_common+0xc8>
 8006472:	2000      	movs	r0, #0
 8006474:	e010      	b.n	8006498 <_printf_common+0xac>
 8006476:	3501      	adds	r5, #1
 8006478:	68e3      	ldr	r3, [r4, #12]
 800647a:	6832      	ldr	r2, [r6, #0]
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	42ab      	cmp	r3, r5
 8006480:	ddd2      	ble.n	8006428 <_printf_common+0x3c>
 8006482:	0022      	movs	r2, r4
 8006484:	2301      	movs	r3, #1
 8006486:	9901      	ldr	r1, [sp, #4]
 8006488:	9800      	ldr	r0, [sp, #0]
 800648a:	9f08      	ldr	r7, [sp, #32]
 800648c:	3219      	adds	r2, #25
 800648e:	47b8      	blx	r7
 8006490:	3001      	adds	r0, #1
 8006492:	d1f0      	bne.n	8006476 <_printf_common+0x8a>
 8006494:	2001      	movs	r0, #1
 8006496:	4240      	negs	r0, r0
 8006498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800649a:	2030      	movs	r0, #48	; 0x30
 800649c:	18e1      	adds	r1, r4, r3
 800649e:	3143      	adds	r1, #67	; 0x43
 80064a0:	7008      	strb	r0, [r1, #0]
 80064a2:	0021      	movs	r1, r4
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	3145      	adds	r1, #69	; 0x45
 80064a8:	7809      	ldrb	r1, [r1, #0]
 80064aa:	18a2      	adds	r2, r4, r2
 80064ac:	3243      	adds	r2, #67	; 0x43
 80064ae:	3302      	adds	r3, #2
 80064b0:	7011      	strb	r1, [r2, #0]
 80064b2:	e7c1      	b.n	8006438 <_printf_common+0x4c>
 80064b4:	0022      	movs	r2, r4
 80064b6:	2301      	movs	r3, #1
 80064b8:	9901      	ldr	r1, [sp, #4]
 80064ba:	9800      	ldr	r0, [sp, #0]
 80064bc:	9f08      	ldr	r7, [sp, #32]
 80064be:	321a      	adds	r2, #26
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0e6      	beq.n	8006494 <_printf_common+0xa8>
 80064c6:	3601      	adds	r6, #1
 80064c8:	e7d1      	b.n	800646e <_printf_common+0x82>
	...

080064cc <_printf_i>:
 80064cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ce:	b08b      	sub	sp, #44	; 0x2c
 80064d0:	9206      	str	r2, [sp, #24]
 80064d2:	000a      	movs	r2, r1
 80064d4:	3243      	adds	r2, #67	; 0x43
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	9005      	str	r0, [sp, #20]
 80064da:	9204      	str	r2, [sp, #16]
 80064dc:	7e0a      	ldrb	r2, [r1, #24]
 80064de:	000c      	movs	r4, r1
 80064e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064e2:	2a78      	cmp	r2, #120	; 0x78
 80064e4:	d809      	bhi.n	80064fa <_printf_i+0x2e>
 80064e6:	2a62      	cmp	r2, #98	; 0x62
 80064e8:	d80b      	bhi.n	8006502 <_printf_i+0x36>
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d100      	bne.n	80064f0 <_printf_i+0x24>
 80064ee:	e0be      	b.n	800666e <_printf_i+0x1a2>
 80064f0:	497c      	ldr	r1, [pc, #496]	; (80066e4 <_printf_i+0x218>)
 80064f2:	9103      	str	r1, [sp, #12]
 80064f4:	2a58      	cmp	r2, #88	; 0x58
 80064f6:	d100      	bne.n	80064fa <_printf_i+0x2e>
 80064f8:	e093      	b.n	8006622 <_printf_i+0x156>
 80064fa:	0026      	movs	r6, r4
 80064fc:	3642      	adds	r6, #66	; 0x42
 80064fe:	7032      	strb	r2, [r6, #0]
 8006500:	e022      	b.n	8006548 <_printf_i+0x7c>
 8006502:	0010      	movs	r0, r2
 8006504:	3863      	subs	r0, #99	; 0x63
 8006506:	2815      	cmp	r0, #21
 8006508:	d8f7      	bhi.n	80064fa <_printf_i+0x2e>
 800650a:	f7f9 fe03 	bl	8000114 <__gnu_thumb1_case_shi>
 800650e:	0016      	.short	0x0016
 8006510:	fff6001f 	.word	0xfff6001f
 8006514:	fff6fff6 	.word	0xfff6fff6
 8006518:	001ffff6 	.word	0x001ffff6
 800651c:	fff6fff6 	.word	0xfff6fff6
 8006520:	fff6fff6 	.word	0xfff6fff6
 8006524:	003600a3 	.word	0x003600a3
 8006528:	fff60083 	.word	0xfff60083
 800652c:	00b4fff6 	.word	0x00b4fff6
 8006530:	0036fff6 	.word	0x0036fff6
 8006534:	fff6fff6 	.word	0xfff6fff6
 8006538:	0087      	.short	0x0087
 800653a:	0026      	movs	r6, r4
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	3642      	adds	r6, #66	; 0x42
 8006540:	1d11      	adds	r1, r2, #4
 8006542:	6019      	str	r1, [r3, #0]
 8006544:	6813      	ldr	r3, [r2, #0]
 8006546:	7033      	strb	r3, [r6, #0]
 8006548:	2301      	movs	r3, #1
 800654a:	e0a2      	b.n	8006692 <_printf_i+0x1c6>
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	6809      	ldr	r1, [r1, #0]
 8006550:	1d02      	adds	r2, r0, #4
 8006552:	060d      	lsls	r5, r1, #24
 8006554:	d50b      	bpl.n	800656e <_printf_i+0xa2>
 8006556:	6805      	ldr	r5, [r0, #0]
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	2d00      	cmp	r5, #0
 800655c:	da03      	bge.n	8006566 <_printf_i+0x9a>
 800655e:	232d      	movs	r3, #45	; 0x2d
 8006560:	9a04      	ldr	r2, [sp, #16]
 8006562:	426d      	negs	r5, r5
 8006564:	7013      	strb	r3, [r2, #0]
 8006566:	4b5f      	ldr	r3, [pc, #380]	; (80066e4 <_printf_i+0x218>)
 8006568:	270a      	movs	r7, #10
 800656a:	9303      	str	r3, [sp, #12]
 800656c:	e01b      	b.n	80065a6 <_printf_i+0xda>
 800656e:	6805      	ldr	r5, [r0, #0]
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	0649      	lsls	r1, r1, #25
 8006574:	d5f1      	bpl.n	800655a <_printf_i+0x8e>
 8006576:	b22d      	sxth	r5, r5
 8006578:	e7ef      	b.n	800655a <_printf_i+0x8e>
 800657a:	680d      	ldr	r5, [r1, #0]
 800657c:	6819      	ldr	r1, [r3, #0]
 800657e:	1d08      	adds	r0, r1, #4
 8006580:	6018      	str	r0, [r3, #0]
 8006582:	062e      	lsls	r6, r5, #24
 8006584:	d501      	bpl.n	800658a <_printf_i+0xbe>
 8006586:	680d      	ldr	r5, [r1, #0]
 8006588:	e003      	b.n	8006592 <_printf_i+0xc6>
 800658a:	066d      	lsls	r5, r5, #25
 800658c:	d5fb      	bpl.n	8006586 <_printf_i+0xba>
 800658e:	680d      	ldr	r5, [r1, #0]
 8006590:	b2ad      	uxth	r5, r5
 8006592:	4b54      	ldr	r3, [pc, #336]	; (80066e4 <_printf_i+0x218>)
 8006594:	2708      	movs	r7, #8
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	2a6f      	cmp	r2, #111	; 0x6f
 800659a:	d000      	beq.n	800659e <_printf_i+0xd2>
 800659c:	3702      	adds	r7, #2
 800659e:	0023      	movs	r3, r4
 80065a0:	2200      	movs	r2, #0
 80065a2:	3343      	adds	r3, #67	; 0x43
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	60a3      	str	r3, [r4, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	db03      	blt.n	80065b6 <_printf_i+0xea>
 80065ae:	2104      	movs	r1, #4
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	438a      	bics	r2, r1
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	d102      	bne.n	80065c0 <_printf_i+0xf4>
 80065ba:	9e04      	ldr	r6, [sp, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <_printf_i+0x10e>
 80065c0:	9e04      	ldr	r6, [sp, #16]
 80065c2:	0028      	movs	r0, r5
 80065c4:	0039      	movs	r1, r7
 80065c6:	f7f9 fe35 	bl	8000234 <__aeabi_uidivmod>
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	3e01      	subs	r6, #1
 80065ce:	5c5b      	ldrb	r3, [r3, r1]
 80065d0:	7033      	strb	r3, [r6, #0]
 80065d2:	002b      	movs	r3, r5
 80065d4:	0005      	movs	r5, r0
 80065d6:	429f      	cmp	r7, r3
 80065d8:	d9f3      	bls.n	80065c2 <_printf_i+0xf6>
 80065da:	2f08      	cmp	r7, #8
 80065dc:	d109      	bne.n	80065f2 <_printf_i+0x126>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	07db      	lsls	r3, r3, #31
 80065e2:	d506      	bpl.n	80065f2 <_printf_i+0x126>
 80065e4:	6862      	ldr	r2, [r4, #4]
 80065e6:	6923      	ldr	r3, [r4, #16]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	dc02      	bgt.n	80065f2 <_printf_i+0x126>
 80065ec:	2330      	movs	r3, #48	; 0x30
 80065ee:	3e01      	subs	r6, #1
 80065f0:	7033      	strb	r3, [r6, #0]
 80065f2:	9b04      	ldr	r3, [sp, #16]
 80065f4:	1b9b      	subs	r3, r3, r6
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	9b07      	ldr	r3, [sp, #28]
 80065fa:	0021      	movs	r1, r4
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	9805      	ldr	r0, [sp, #20]
 8006600:	9b06      	ldr	r3, [sp, #24]
 8006602:	aa09      	add	r2, sp, #36	; 0x24
 8006604:	f7ff fef2 	bl	80063ec <_printf_common>
 8006608:	3001      	adds	r0, #1
 800660a:	d147      	bne.n	800669c <_printf_i+0x1d0>
 800660c:	2001      	movs	r0, #1
 800660e:	4240      	negs	r0, r0
 8006610:	b00b      	add	sp, #44	; 0x2c
 8006612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006614:	2220      	movs	r2, #32
 8006616:	6809      	ldr	r1, [r1, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	6022      	str	r2, [r4, #0]
 800661c:	2278      	movs	r2, #120	; 0x78
 800661e:	4932      	ldr	r1, [pc, #200]	; (80066e8 <_printf_i+0x21c>)
 8006620:	9103      	str	r1, [sp, #12]
 8006622:	0021      	movs	r1, r4
 8006624:	3145      	adds	r1, #69	; 0x45
 8006626:	700a      	strb	r2, [r1, #0]
 8006628:	6819      	ldr	r1, [r3, #0]
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	c920      	ldmia	r1!, {r5}
 800662e:	0610      	lsls	r0, r2, #24
 8006630:	d402      	bmi.n	8006638 <_printf_i+0x16c>
 8006632:	0650      	lsls	r0, r2, #25
 8006634:	d500      	bpl.n	8006638 <_printf_i+0x16c>
 8006636:	b2ad      	uxth	r5, r5
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	07d3      	lsls	r3, r2, #31
 800663c:	d502      	bpl.n	8006644 <_printf_i+0x178>
 800663e:	2320      	movs	r3, #32
 8006640:	4313      	orrs	r3, r2
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	2710      	movs	r7, #16
 8006646:	2d00      	cmp	r5, #0
 8006648:	d1a9      	bne.n	800659e <_printf_i+0xd2>
 800664a:	2220      	movs	r2, #32
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	4393      	bics	r3, r2
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	e7a4      	b.n	800659e <_printf_i+0xd2>
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	680d      	ldr	r5, [r1, #0]
 8006658:	1d10      	adds	r0, r2, #4
 800665a:	6949      	ldr	r1, [r1, #20]
 800665c:	6018      	str	r0, [r3, #0]
 800665e:	6813      	ldr	r3, [r2, #0]
 8006660:	062e      	lsls	r6, r5, #24
 8006662:	d501      	bpl.n	8006668 <_printf_i+0x19c>
 8006664:	6019      	str	r1, [r3, #0]
 8006666:	e002      	b.n	800666e <_printf_i+0x1a2>
 8006668:	066d      	lsls	r5, r5, #25
 800666a:	d5fb      	bpl.n	8006664 <_printf_i+0x198>
 800666c:	8019      	strh	r1, [r3, #0]
 800666e:	2300      	movs	r3, #0
 8006670:	9e04      	ldr	r6, [sp, #16]
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	e7c0      	b.n	80065f8 <_printf_i+0x12c>
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	1d11      	adds	r1, r2, #4
 800667a:	6019      	str	r1, [r3, #0]
 800667c:	6816      	ldr	r6, [r2, #0]
 800667e:	2100      	movs	r1, #0
 8006680:	0030      	movs	r0, r6
 8006682:	6862      	ldr	r2, [r4, #4]
 8006684:	f000 f858 	bl	8006738 <memchr>
 8006688:	2800      	cmp	r0, #0
 800668a:	d001      	beq.n	8006690 <_printf_i+0x1c4>
 800668c:	1b80      	subs	r0, r0, r6
 800668e:	6060      	str	r0, [r4, #4]
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	2300      	movs	r3, #0
 8006696:	9a04      	ldr	r2, [sp, #16]
 8006698:	7013      	strb	r3, [r2, #0]
 800669a:	e7ad      	b.n	80065f8 <_printf_i+0x12c>
 800669c:	0032      	movs	r2, r6
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	9906      	ldr	r1, [sp, #24]
 80066a2:	9805      	ldr	r0, [sp, #20]
 80066a4:	9d07      	ldr	r5, [sp, #28]
 80066a6:	47a8      	blx	r5
 80066a8:	3001      	adds	r0, #1
 80066aa:	d0af      	beq.n	800660c <_printf_i+0x140>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	079b      	lsls	r3, r3, #30
 80066b0:	d415      	bmi.n	80066de <_printf_i+0x212>
 80066b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b4:	68e0      	ldr	r0, [r4, #12]
 80066b6:	4298      	cmp	r0, r3
 80066b8:	daaa      	bge.n	8006610 <_printf_i+0x144>
 80066ba:	0018      	movs	r0, r3
 80066bc:	e7a8      	b.n	8006610 <_printf_i+0x144>
 80066be:	0022      	movs	r2, r4
 80066c0:	2301      	movs	r3, #1
 80066c2:	9906      	ldr	r1, [sp, #24]
 80066c4:	9805      	ldr	r0, [sp, #20]
 80066c6:	9e07      	ldr	r6, [sp, #28]
 80066c8:	3219      	adds	r2, #25
 80066ca:	47b0      	blx	r6
 80066cc:	3001      	adds	r0, #1
 80066ce:	d09d      	beq.n	800660c <_printf_i+0x140>
 80066d0:	3501      	adds	r5, #1
 80066d2:	68e3      	ldr	r3, [r4, #12]
 80066d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	42ab      	cmp	r3, r5
 80066da:	dcf0      	bgt.n	80066be <_printf_i+0x1f2>
 80066dc:	e7e9      	b.n	80066b2 <_printf_i+0x1e6>
 80066de:	2500      	movs	r5, #0
 80066e0:	e7f7      	b.n	80066d2 <_printf_i+0x206>
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	080080c1 	.word	0x080080c1
 80066e8:	080080d2 	.word	0x080080d2

080066ec <memmove>:
 80066ec:	b510      	push	{r4, lr}
 80066ee:	4288      	cmp	r0, r1
 80066f0:	d902      	bls.n	80066f8 <memmove+0xc>
 80066f2:	188b      	adds	r3, r1, r2
 80066f4:	4298      	cmp	r0, r3
 80066f6:	d303      	bcc.n	8006700 <memmove+0x14>
 80066f8:	2300      	movs	r3, #0
 80066fa:	e007      	b.n	800670c <memmove+0x20>
 80066fc:	5c8b      	ldrb	r3, [r1, r2]
 80066fe:	5483      	strb	r3, [r0, r2]
 8006700:	3a01      	subs	r2, #1
 8006702:	d2fb      	bcs.n	80066fc <memmove+0x10>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	5ccc      	ldrb	r4, [r1, r3]
 8006708:	54c4      	strb	r4, [r0, r3]
 800670a:	3301      	adds	r3, #1
 800670c:	429a      	cmp	r2, r3
 800670e:	d1fa      	bne.n	8006706 <memmove+0x1a>
 8006710:	e7f8      	b.n	8006704 <memmove+0x18>
	...

08006714 <_sbrk_r>:
 8006714:	2300      	movs	r3, #0
 8006716:	b570      	push	{r4, r5, r6, lr}
 8006718:	4d06      	ldr	r5, [pc, #24]	; (8006734 <_sbrk_r+0x20>)
 800671a:	0004      	movs	r4, r0
 800671c:	0008      	movs	r0, r1
 800671e:	602b      	str	r3, [r5, #0]
 8006720:	f7fb ff8a 	bl	8002638 <_sbrk>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d103      	bne.n	8006730 <_sbrk_r+0x1c>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d000      	beq.n	8006730 <_sbrk_r+0x1c>
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	bd70      	pop	{r4, r5, r6, pc}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	20000454 	.word	0x20000454

08006738 <memchr>:
 8006738:	b2c9      	uxtb	r1, r1
 800673a:	1882      	adds	r2, r0, r2
 800673c:	4290      	cmp	r0, r2
 800673e:	d101      	bne.n	8006744 <memchr+0xc>
 8006740:	2000      	movs	r0, #0
 8006742:	4770      	bx	lr
 8006744:	7803      	ldrb	r3, [r0, #0]
 8006746:	428b      	cmp	r3, r1
 8006748:	d0fb      	beq.n	8006742 <memchr+0xa>
 800674a:	3001      	adds	r0, #1
 800674c:	e7f6      	b.n	800673c <memchr+0x4>

0800674e <_realloc_r>:
 800674e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006750:	0007      	movs	r7, r0
 8006752:	000e      	movs	r6, r1
 8006754:	0014      	movs	r4, r2
 8006756:	2900      	cmp	r1, #0
 8006758:	d105      	bne.n	8006766 <_realloc_r+0x18>
 800675a:	0011      	movs	r1, r2
 800675c:	f7ff fc52 	bl	8006004 <_malloc_r>
 8006760:	0005      	movs	r5, r0
 8006762:	0028      	movs	r0, r5
 8006764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006766:	2a00      	cmp	r2, #0
 8006768:	d103      	bne.n	8006772 <_realloc_r+0x24>
 800676a:	f7ff fbdf 	bl	8005f2c <_free_r>
 800676e:	0025      	movs	r5, r4
 8006770:	e7f7      	b.n	8006762 <_realloc_r+0x14>
 8006772:	f000 f81b 	bl	80067ac <_malloc_usable_size_r>
 8006776:	9001      	str	r0, [sp, #4]
 8006778:	4284      	cmp	r4, r0
 800677a:	d803      	bhi.n	8006784 <_realloc_r+0x36>
 800677c:	0035      	movs	r5, r6
 800677e:	0843      	lsrs	r3, r0, #1
 8006780:	42a3      	cmp	r3, r4
 8006782:	d3ee      	bcc.n	8006762 <_realloc_r+0x14>
 8006784:	0021      	movs	r1, r4
 8006786:	0038      	movs	r0, r7
 8006788:	f7ff fc3c 	bl	8006004 <_malloc_r>
 800678c:	1e05      	subs	r5, r0, #0
 800678e:	d0e8      	beq.n	8006762 <_realloc_r+0x14>
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	0022      	movs	r2, r4
 8006794:	429c      	cmp	r4, r3
 8006796:	d900      	bls.n	800679a <_realloc_r+0x4c>
 8006798:	001a      	movs	r2, r3
 800679a:	0031      	movs	r1, r6
 800679c:	0028      	movs	r0, r5
 800679e:	f7ff fbbb 	bl	8005f18 <memcpy>
 80067a2:	0031      	movs	r1, r6
 80067a4:	0038      	movs	r0, r7
 80067a6:	f7ff fbc1 	bl	8005f2c <_free_r>
 80067aa:	e7da      	b.n	8006762 <_realloc_r+0x14>

080067ac <_malloc_usable_size_r>:
 80067ac:	1f0b      	subs	r3, r1, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	1f18      	subs	r0, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da01      	bge.n	80067ba <_malloc_usable_size_r+0xe>
 80067b6:	580b      	ldr	r3, [r1, r0]
 80067b8:	18c0      	adds	r0, r0, r3
 80067ba:	4770      	bx	lr

080067bc <_init>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c2:	bc08      	pop	{r3}
 80067c4:	469e      	mov	lr, r3
 80067c6:	4770      	bx	lr

080067c8 <_fini>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ce:	bc08      	pop	{r3}
 80067d0:	469e      	mov	lr, r3
 80067d2:	4770      	bx	lr
